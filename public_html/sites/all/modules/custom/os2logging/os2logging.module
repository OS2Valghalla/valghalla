<?php
/**
 * @file
 * Code for the OS2Logging feature.
 */

include_once 'os2logging.features.inc';

use Monolog\Logger;

/*
 * Implements HOOK_menu()
 */
function os2logging_menu() {
  $items = array();

  $items['admin/config/os2logging'] = array(
      'title' => t('OS2 Logging Setup'),
      'description' => t('Set up OS2 Logging'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'system_admin_menu_block_page',
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/os2logging/settings'] = array(
      'title' => t('OS2 Logging Settings'),
      'description' => t('General description for OS2 Logging'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('os2logging_settings_form'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/os2logging.admin.inc',
  );

  $items['admin/reports/os2logging'] = array(
    'title' => t('OS2Logging Access Logs'),
    'description' => t('Access log overview table'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2logging_access_logs_table_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/os2logging.admin.inc',
  );

  return $items;
}

function os2logging_monolog_channel_info() {
  $channels = array();

  $channels['os2logging'] = array(
      'label' => t('OS2Logging'),
      'description' => t('The default channel that os2logging messages are routed through.'),
      'default profile' => 'os2logging',
  );

  return $channels;
}

/*
 * Implements HOOK_node_load()
 */
function os2logging_node_load($nodes, $types) {
  global $user;

  // Ignoring anonym user, as valghalla is only available for authenticated
  // user.
  // Ignore anonymous user.
  $log_anonym_user = variable_get('os2logging_log_anonymous_user');
  if (!$log_anonym_user && $user->uid == 0) {
    return;
  }

  $chosen_node_types = variable_get('os2logging_chosen_node_types');

  $logger = monolog('os2logging');
  $logger->pushProcessor(new \Monolog\Processor\WebProcessor);
  if (!empty($chosen_node_types)) {
    foreach ($nodes as $nid => $node) {
      if (in_array($node->type, $chosen_node_types)) {
        $message = sprintf("node type: %s id: %d was loaded by user (uid: %s name: %s  e-mail: %s) \n\r", $node->type, $node->nid, $user->uid, $user->name, $user->mail);
        $logger->log(Logger::INFO, $message, array('sid' => $node->nid, 'uid' => $user->uid, 'created' => REQUEST_TIME));
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function os2logging_help($path, $arg) {
  switch ($path) {
    case 'admin/help#os2logging':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_watchdog().
 */
function os2logging_watchdog(array $log_entry) {
  try {

    // Perform a partial bootstrap if watchdog is called prior to the
    // DRUPAL_BOOTSTRAP_FULL phase.
    if (!function_exists('monolog')) {
      monolog_logging_bootstrap();
    }

    // Check whether to use the watchdog type as the channel name.
    // @see http://drupal.org/node/1990282
    if (variable_get('monolog_type_as_channel', 1)) {


   if (monolog_channel_info_load($log_entry['type']) ) {

        $logger = monolog($log_entry['type']);

        if ('Psr\Log\NullLogger' != get_class($logger)) {
          $enabled_contexts = monolog_logging_get_contexts();
          $context = array_intersect_key($log_entry, $enabled_contexts);
          if (isset($enabled_contexts['request_id'])) {
            $context['request_id'] = monolog_request_id();
          }

          $message = strip_tags(!isset($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
          $level = monolog_logging_map_severity_level($log_entry['severity']);
          $logger->log($level, $message, $context);
        }
      }
    }
  }

  catch (Exception $e) {
    // Fail silently since we cannot log any messages or do anything that would
    // trigger another watchdog call.
  }
}

/**
 * Implements hook_monolog_handler_info().
 */
function os2logging_monolog_handler_info() {
  $handlers = array();

  $handlers['os2logging_accesslog'] = array(
    'label' => t('OS2Logging AccessLog entity handler'),
    'description' => t('Saves logs as OS2Logging AccessLog entities.'),
    'handler file' => drupal_get_path('module', 'os2logging') . '/handlers/os2logging_accesslog.inc',
    'group' => t('Wrappers / special handlers'),
    'settings callback' => 'os2logging_accesslog_handler_settings',
    'loader callback' => 'os2logging_accesslog_handler_loader',
  );

  return $handlers;
}

/**
 * Implements hook_cron().
 */
function os2logging_cron() {
  module_load_include('inc', 'os2logging', 'includes/os2logging.access_log');
  os2logging_access_log_cleanup();
}

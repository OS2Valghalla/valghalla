'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}

+function ($) {
  'use strict';

  var version = $.fn.jquery.split(' ')[0].split('.');
  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap');

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }

    return false; // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });
    var callback = function callback() {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function () {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function handle(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]';
  var Alert = function Alert(el) {
    $(el).on('click', dismiss, this.close);
  };

  Alert.VERSION = '3.3.7';

  Alert.TRANSITION_DURATION = 150;

  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector);

    if (e) e.preventDefault();

    if (!$parent.length) {
      $parent = $this.closest('.alert');
    }

    $parent.trigger(e = $.Event('close.bs.alert'));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass('in');

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove();
    }

    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
  };

  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');

      if (!data) $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.alert;

  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;

  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };

  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function Button(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };

  Button.VERSION = '3.3.7';

  Button.DEFAULTS = {
    loadingText: 'loading...'
  };

  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();

    state += 'Text';

    if (data.resetText == null) $el.data('resetText', $el[val]());

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state]);

      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d).prop(d, true);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d).prop(d, false);
      }
    }, this), 0);
  };

  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');

    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false;
        $parent.find('.active').removeClass('active');
        this.$element.addClass('active');
      } else if ($input.prop('type') == 'checkbox') {
        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
        this.$element.toggleClass('active');
      }
      $input.prop('checked', this.$element.hasClass('active'));
      if (changed) $input.trigger('change');
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
      this.$element.toggleClass('active');
    }
  };

  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.button', data = new Button(this, options));

      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
    });
  }

  var old = $.fn.button;

  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;

  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };

  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target).closest('.btn');
    Plugin.call($btn, 'toggle');
    if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
      // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
      e.preventDefault();
      // The target component still receive the focus
      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');
    }
  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function Carousel(element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = null;
    this.sliding = null;
    this.interval = null;
    this.$active = null;
    this.$items = null;

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };

  Carousel.VERSION = '3.3.7';

  Carousel.TRANSITION_DURATION = 600;

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  };

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return;
    switch (e.which) {
      case 37:
        this.prev();break;
      case 39:
        this.next();break;
      default:
        return;
    }

    e.preventDefault();
  };

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);

    this.interval && clearInterval(this.interval);

    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

    return this;
  };

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active);
    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
    if (willWrap && !this.options.wrap) return active;
    var delta = direction == 'prev' ? -1 : 1;
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };

  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

    if (pos > this.$items.length - 1 || pos < 0) return;

    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
      that.to(pos);
    }); // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle();

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
  };

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }

    this.interval = clearInterval(this.interval);

    return this;
  };

  Carousel.prototype.next = function () {
    if (this.sliding) return;
    return this.slide('next');
  };

  Carousel.prototype.prev = function () {
    if (this.sliding) return;
    return this.slide('prev');
  };

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var that = this;

    if ($next.hasClass('active')) return this.sliding = false;

    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented()) return;

    this.sliding = true;

    isCycling && this.pause();

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth; // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([type, direction].join(' ')).addClass('active');
        $active.removeClass(['active', direction].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }

    isCycling && this.cycle();

    return this;
  };

  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;

      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
    });
  }

  var old = $.fn.carousel;

  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;

  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };

  // CAROUSEL DATA-API
  // =================

  var clickHandler = function clickHandler(e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    if (!$target.hasClass('carousel')) return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex) options.interval = false;

    Plugin.call($target, options);

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }

    e.preventDefault();
  };

  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function Collapse(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
    this.transitioning = null;

    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }

    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = '3.3.7';

  Collapse.TRANSITION_DURATION = 350;

  Collapse.DEFAULTS = {
    toggle: true
  };

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return;

    var activesData;
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse');
      if (activesData && activesData.transitioning) return;
    }

    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    if (actives && actives.length) {
      Plugin.call(actives, 'hide');
      activesData || actives.data('bs.collapse', null);
    }

    var dimension = this.dimension();

    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);

    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);

    this.transitioning = 1;

    var complete = function complete() {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return;

    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);

    this.$trigger.addClass('collapsed').attr('aria-expanded', false);

    this.transitioning = 1;

    var complete = function complete() {
      this.transitioning = 0;
      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };

  Collapse.prototype.getParent = function () {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
      var $element = $(element);
      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
    }, this)).end();
  };

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in');

    $element.attr('aria-expanded', isOpen);
    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
  };

  function getTargetFromTrigger($trigger) {
    var href;
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

    return $(target);
  }

  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;

  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };

  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this);

    if (!$this.attr('data-target')) e.preventDefault();

    var $target = getTargetFromTrigger($this);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();

    Plugin.call($target, option);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function Dropdown(element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };

  Dropdown.VERSION = '3.3.7';

  function getParent($this) {
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = selector && $(selector);

    return $parent && $parent.length ? $parent : $this.parent();
  }

  function clearMenus(e) {
    if (e && e.which === 3) return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };

      if (!$parent.hasClass('open')) return;

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.attr('aria-expanded', 'false');
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
    });
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    clearMenus();

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
      }

      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.trigger('focus').attr('aria-expanded', 'true');

      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
    }

    return false;
  };

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

    var $this = $(this);

    e.preventDefault();
    e.stopPropagation();

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }

    var desc = ' li:not(.disabled):visible a';
    var $items = $parent.find('.dropdown-menu' + desc);

    if (!$items.length) return;

    var index = $items.index(e.target);

    if (e.which == 38 && index > 0) index--; // up
    if (e.which == 40 && index < $items.length - 1) index++; // down
    if (!~index) index = 0;

    $items.eq(index).trigger('focus');
  };

  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');

      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.dropdown;

  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;

  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };

  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function Modal(element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find('.modal-dialog');
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;

    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };

  Modal.VERSION = '3.3.7';

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');

    this.escape();
    this.resize();

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
      });
    });

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); // don't move modals dom position
      }

      that.$element.show().scrollTop(0);

      that.adjustDialog();

      if (transition) {
        that.$element[0].offsetWidth; // force reflow
      }

      that.$element.addClass('in');

      that.enforceFocus();

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

      transition ? that.$dialog // wait for modal to slide in
      .one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event('hide.bs.modal');

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.escape();
    this.resize();

    $(document).off('focusin.bs.modal');

    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

    this.$dialog.off('mousedown.dismiss.bs.modal');

    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal') // guard against infinite focus loop
    .on('focusin.bs.modal', $.proxy(function (e) {
      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false;
          return;
        }
        if (e.target !== e.currentTarget) return;
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
      }, this));

      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

      this.$backdrop.addClass('in');

      if (!callback) return;

      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');

      var callbackRemove = function callbackRemove() {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect();
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || '';
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad);
  };

  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data) $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;

  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    if ($this.is('a')) e.preventDefault();

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function Tooltip(element, options) {
    this.type = null;
    this.options = null;
    this.enabled = null;
    this.timeout = null;
    this.hoverState = null;
    this.$element = null;
    this.inState = null;

    this.init('tooltip', element, options);
  };

  Tooltip.VERSION = '3.3.7';

  Tooltip.TRANSITION_DURATION = 150;

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
    this.inState = { click: false, hover: false, focus: false };

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
    }

    var triggers = this.options.trigger.split(' ');

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }

    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
  };

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }

    return options;
  };

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value;
    });

    return options;
  };

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in';
      return;
    }

    clearTimeout(self.timeout);

    self.hoverState = 'in';

    if (!self.options.delay || !self.options.delay.show) return self.show();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show();
    }, self.options.delay.show);
  };

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true;
    }

    return false;
  };

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
    }

    if (self.isInStateTrue()) return;

    clearTimeout(self.timeout);

    self.hoverState = 'out';

    if (!self.options.delay || !self.options.delay.hide) return self.hide();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide();
    }, self.options.delay.hide);
  };

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom) return;
      var that = this;

      var $tip = this.tip();

      var tipId = this.getUID(this.type);

      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);

      if (this.options.animation) $tip.addClass('fade');

      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      this.$element.trigger('inserted.bs.' + this.type);

      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (autoPlace) {
        var orgPlacement = placement;
        var viewportDim = this.getPosition(this.$viewport);

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;

        $tip.removeClass(orgPlacement).addClass(placement);
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

      this.applyPlacement(calculatedOffset, placement);

      var complete = function complete() {
        var prevHoverState = that.hoverState;
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;

        if (prevHoverState == 'out') that.leave(that);
      };

      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    }
  };

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0;
    if (isNaN(marginLeft)) marginLeft = 0;

    offset.top += marginTop;
    offset.left += marginLeft;

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function using(props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);

    $tip.addClass('in');

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
  };

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };

  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = $(this.$tip);
    var e = $.Event('hide.bs.' + this.type);

    function complete() {
      if (that.hoverState != 'in') $tip.detach();
      if (that.$element) {
        // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
      }
      callback && callback();
    }

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    $tip.removeClass('in');

    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();

    this.hoverState = null;

    return this;
  };

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };

  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;

    var el = $element[0];
    var isBody = el.tagName == 'BODY';

    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement;
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
  };

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 };
    if (!this.$viewport) return delta;

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.right) {
        // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }

    return delta;
  };

  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;

    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

    return title;
  };

  Tooltip.prototype.getUID = function (prefix) {
    do {
      prefix += ~~(Math.random() * 1000000);
    } while (document.getElementById(prefix));
    return prefix;
  };

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template);
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
      }
    }
    return this.$tip;
  };

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };

  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };

  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };

  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }

    if (e) {
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue()) self.enter(self);else self.leave(self);
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
    }
  };

  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type);
      if (that.$tip) {
        that.$tip.detach();
      }
      that.$tip = null;
      that.$arrow = null;
      that.$viewport = null;
      that.$element = null;
    });
  };

  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tooltip;

  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;

  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function Popover(element, options) {
    this.init('popover', element, options);
  };

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

  Popover.VERSION = '3.3.7';

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });

  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

  Popover.prototype.constructor = Popover;

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };

  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events
    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

    $tip.removeClass('fade top bottom left right in');

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
  };

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };

  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;

    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };

  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.popover;

  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;

  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
    this.refresh();
    this.process();
  }

  ScrollSpy.VERSION = '3.3.7';

  ScrollSpy.DEFAULTS = {
    offset: 10
  };

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };

  ScrollSpy.prototype.refresh = function () {
    var that = this;
    var offsetMethod = 'offset';
    var offsetBase = 0;

    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }

    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);

      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      that.offsets.push(this[0]);
      that.targets.push(this[1]);
    });
  };

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;

    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
    }
  };

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;

    this.clear();

    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

    var active = $(selector).parents('li').addClass('active');

    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }

    active.trigger('activate.bs.scrollspy');
  };

  ScrollSpy.prototype.clear = function () {
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
  };

  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.scrollspy;

  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;

  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };

  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function Tab(element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element);
    // jscs:enable requireDollarBeforejQueryAssignment
  };

  Tab.VERSION = '3.3.7';

  Tab.TRANSITION_DURATION = 150;

  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return;

    var $previous = $ul.find('.active:last a');
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    });
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    });

    $previous.trigger(hideEvent);
    $this.trigger(showEvent);

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;

    var $target = $(selector);

    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      });
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      });
    });
  };

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);

      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

      if (transition) {
        element[0].offsetWidth; // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }

      if (element.parent('.dropdown-menu').length) {
        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
      }

      callback && callback();
    }

    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();

    $active.removeClass('in');
  };

  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');

      if (!data) $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tab;

  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;

  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };

  // TAB DATA-API
  // ============

  var clickHandler = function clickHandler(e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  };

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function Affix(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = '3.3.7';

  Affix.RESET = 'affix affix-top affix-bottom';

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }

    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;

    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

    return false;
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max($(document).height(), $(document.body).height());

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '');

      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');

      this.$element.trigger(e);

      if (e.isDefaultPrevented()) return;

      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      });
    }
  };

  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;

  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
}(jQuery);
'use strict';

// |--------------------------------------------------------------------------
// | Flexy header
// |--------------------------------------------------------------------------
// |
// | This jQuery script is written by
// |
// | Morten Nissen
// | hjemmesidekongen.dk
// |

var flexy_header = function ($) {
    'use strict';

    var pub = {},
        $header_static = $('.flexy-header--static'),
        $header_sticky = $('.flexy-header--sticky'),
        options = {
        update_interval: 100,
        tolerance: {
            upward: 20,
            downward: 10
        },
        offset: _get_offset_from_elements_bottom($header_static),
        classes: {
            pinned: "flexy-header--pinned",
            unpinned: "flexy-header--unpinned"
        }
    },
        was_scrolled = false,
        last_distance_from_top = 0;

    /**
     * Instantiate
     */
    pub.init = function (options) {
        registerEventHandlers();
        registerBootEventHandlers();
    };

    /**
     * Register boot event handlers
     */
    function registerBootEventHandlers() {
        $header_sticky.addClass(options.classes.unpinned);

        setInterval(function () {

            if (was_scrolled) {
                document_was_scrolled();

                was_scrolled = false;
            }
        }, options.update_interval);
    }

    /**
     * Register event handlers
     */
    function registerEventHandlers() {
        $(window).scroll(function (event) {
            was_scrolled = true;
        });
    }

    /**
     * Get offset from element bottom
     */
    function _get_offset_from_elements_bottom($element) {
        var element_height = $element.outerHeight(true),
            element_offset = $element.offset().top;

        return element_height + element_offset;
    }

    /**
     * Document was scrolled
     */
    function document_was_scrolled() {
        var current_distance_from_top = $(window).scrollTop();

        // If past offset
        if (current_distance_from_top >= options.offset) {

            // Downwards scroll
            if (current_distance_from_top > last_distance_from_top) {

                // Obey the downward tolerance
                if (Math.abs(current_distance_from_top - last_distance_from_top) <= options.tolerance.downward) {
                    return;
                }

                $header_sticky.removeClass(options.classes.pinned).addClass(options.classes.unpinned);
            }

            // Upwards scroll
            else {

                    // Obey the upward tolerance
                    if (Math.abs(current_distance_from_top - last_distance_from_top) <= options.tolerance.upward) {
                        return;
                    }

                    // We are not scrolled past the document which is possible on the Mac
                    if (current_distance_from_top + $(window).height() < $(document).height()) {
                        $header_sticky.removeClass(options.classes.unpinned).addClass(options.classes.pinned);
                    }
                }
        }

        // Not past offset
        else {
                $header_sticky.removeClass(options.classes.pinned).addClass(options.classes.unpinned);
            }

        last_distance_from_top = current_distance_from_top;
    }

    return pub;
}(jQuery);
'use strict';

// |--------------------------------------------------------------------------
// | Flexy navigation
// |--------------------------------------------------------------------------
// |
// | This jQuery script is written by
// |
// | Morten Nissen
// | hjemmesidekongen.dk
// |

var flexy_navigation = function ($) {
    'use strict';

    var pub = {},
        layout_classes = {
        'navigation': '.flexy-navigation',
        'obfuscator': '.flexy-navigation__obfuscator',
        'dropdown': '.flexy-navigation__item--dropdown',
        'dropdown_megamenu': '.flexy-navigation__item__dropdown-megamenu',

        'is_upgraded': 'is-upgraded',
        'navigation_has_megamenu': 'has-megamenu',
        'dropdown_has_megamenu': 'flexy-navigation__item--dropdown-with-megamenu'
    };

    /**
     * Instantiate
     */
    pub.init = function (options) {
        registerEventHandlers();
        registerBootEventHandlers();
    };

    /**
     * Register boot event handlers
     */
    function registerBootEventHandlers() {

        // Upgrade
        upgrade();
    }

    /**
     * Register event handlers
     */
    function registerEventHandlers() {}

    /**
     * Upgrade elements.
     * Add classes to elements, based upon attached classes.
     */
    function upgrade() {
        var $navigations = $(layout_classes.navigation);

        // Navigations
        if ($navigations.length > 0) {
            $navigations.each(function (index, element) {
                var $navigation = $(this),
                    $megamenus = $navigation.find(layout_classes.dropdown_megamenu),
                    $dropdown_megamenu = $navigation.find(layout_classes.dropdown_has_megamenu);

                // Has already been upgraded
                if ($navigation.hasClass(layout_classes.is_upgraded)) {
                    return;
                }

                // Has megamenu
                if ($megamenus.length > 0) {
                    $navigation.addClass(layout_classes.navigation_has_megamenu);

                    // Run through all megamenus
                    $megamenus.each(function (index, element) {
                        var $megamenu = $(this),
                            has_obfuscator = $('html').hasClass('has-obfuscator') ? true : false;

                        $megamenu.parents(layout_classes.dropdown).addClass(layout_classes.dropdown_has_megamenu).hover(function () {

                            if (has_obfuscator) {
                                obfuscator.show();
                            }
                        }, function () {

                            if (has_obfuscator) {
                                obfuscator.hide();
                            }
                        });
                    });
                }

                // Is upgraded
                $navigation.addClass(layout_classes.is_upgraded);
            });
        }
    }

    return pub;
}(jQuery);
"use strict";

/*! sidr - v2.2.1 - 2016-02-17
 * http://www.berriart.com/sidr/
 * Copyright (c) 2013-2016 Alberto Varela; Licensed MIT */

(function () {
  'use strict';

  var babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers;

  var sidrStatus = {
    moving: false,
    opened: false
  };

  var helper = {
    // Check for valids urls
    // From : http://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-an-url

    isUrl: function isUrl(str) {
      var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
      '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + // domain name
      '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
      '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
      '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
      '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

      if (pattern.test(str)) {
        return true;
      } else {
        return false;
      }
    },

    // Add sidr prefixes
    addPrefixes: function addPrefixes($element) {
      this.addPrefix($element, 'id');
      this.addPrefix($element, 'class');
      $element.removeAttr('style');
    },
    addPrefix: function addPrefix($element, attribute) {
      var toReplace = $element.attr(attribute);

      if (typeof toReplace === 'string' && toReplace !== '' && toReplace !== 'sidr-inner') {
        $element.attr(attribute, toReplace.replace(/([A-Za-z0-9_.\-]+)/g, 'sidr-' + attribute + '-$1'));
      }
    },

    // Check if transitions is supported
    transitions: function () {
      var body = document.body || document.documentElement,
          style = body.style,
          supported = false,
          property = 'transition';

      if (property in style) {
        supported = true;
      } else {
        (function () {
          var prefixes = ['moz', 'webkit', 'o', 'ms'],
              prefix = undefined,
              i = undefined;

          property = property.charAt(0).toUpperCase() + property.substr(1);
          supported = function () {
            for (i = 0; i < prefixes.length; i++) {
              prefix = prefixes[i];
              if (prefix + property in style) {
                return true;
              }
            }

            return false;
          }();
          property = supported ? '-' + prefix.toLowerCase() + '-' + property.toLowerCase() : null;
        })();
      }

      return {
        supported: supported,
        property: property
      };
    }()
  };

  var $$2 = jQuery;

  var bodyAnimationClass = 'sidr-animating';
  var openAction = 'open';
  var closeAction = 'close';
  var transitionEndEvent = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend';
  var Menu = function () {
    function Menu(name) {
      babelHelpers.classCallCheck(this, Menu);

      this.name = name;
      this.item = $$2('#' + name);
      this.openClass = name === 'sidr' ? 'sidr-open' : 'sidr-open ' + name + '-open';
      this.menuWidth = this.item.outerWidth(true);
      this.speed = this.item.data('speed');
      this.side = this.item.data('side');
      this.displace = this.item.data('displace');
      this.timing = this.item.data('timing');
      this.method = this.item.data('method');
      this.onOpenCallback = this.item.data('onOpen');
      this.onCloseCallback = this.item.data('onClose');
      this.onOpenEndCallback = this.item.data('onOpenEnd');
      this.onCloseEndCallback = this.item.data('onCloseEnd');
      this.body = $$2(this.item.data('body'));
    }

    babelHelpers.createClass(Menu, [{
      key: 'getAnimation',
      value: function getAnimation(action, element) {
        var animation = {},
            prop = this.side;

        if (action === 'open' && element === 'body') {
          animation[prop] = this.menuWidth + 'px';
        } else if (action === 'close' && element === 'menu') {
          animation[prop] = '-' + this.menuWidth + 'px';
        } else {
          animation[prop] = 0;
        }

        return animation;
      }
    }, {
      key: 'prepareBody',
      value: function prepareBody(action) {
        var prop = action === 'open' ? 'hidden' : '';

        // Prepare page if container is body
        if (this.body.is('body')) {
          var $html = $$2('html'),
              scrollTop = $html.scrollTop();

          $html.css('overflow-x', prop).scrollTop(scrollTop);
        }
      }
    }, {
      key: 'openBody',
      value: function openBody() {
        if (this.displace) {
          var transitions = helper.transitions,
              $body = this.body;

          if (transitions.supported) {
            $body.css(transitions.property, this.side + ' ' + this.speed / 1000 + 's ' + this.timing).css(this.side, 0).css({
              width: $body.width(),
              position: 'absolute'
            });
            $body.css(this.side, this.menuWidth + 'px');
          } else {
            var bodyAnimation = this.getAnimation(openAction, 'body');

            $body.css({
              width: $body.width(),
              position: 'absolute'
            }).animate(bodyAnimation, {
              queue: false,
              duration: this.speed
            });
          }
        }
      }
    }, {
      key: 'onCloseBody',
      value: function onCloseBody() {
        var transitions = helper.transitions,
            resetStyles = {
          width: '',
          position: '',
          right: '',
          left: ''
        };

        if (transitions.supported) {
          resetStyles[transitions.property] = '';
        }

        this.body.css(resetStyles).unbind(transitionEndEvent);
      }
    }, {
      key: 'closeBody',
      value: function closeBody() {
        var _this = this;

        if (this.displace) {
          if (helper.transitions.supported) {
            this.body.css(this.side, 0).one(transitionEndEvent, function () {
              _this.onCloseBody();
            });
          } else {
            var bodyAnimation = this.getAnimation(closeAction, 'body');

            this.body.animate(bodyAnimation, {
              queue: false,
              duration: this.speed,
              complete: function complete() {
                _this.onCloseBody();
              }
            });
          }
        }
      }
    }, {
      key: 'moveBody',
      value: function moveBody(action) {
        if (action === openAction) {
          this.openBody();
        } else {
          this.closeBody();
        }
      }
    }, {
      key: 'onOpenMenu',
      value: function onOpenMenu(callback) {
        var name = this.name;

        sidrStatus.moving = false;
        sidrStatus.opened = name;

        this.item.unbind(transitionEndEvent);

        this.body.removeClass(bodyAnimationClass).addClass(this.openClass);

        this.onOpenEndCallback();

        if (typeof callback === 'function') {
          callback(name);
        }
      }
    }, {
      key: 'openMenu',
      value: function openMenu(callback) {
        var _this2 = this;

        var $item = this.item;

        if (helper.transitions.supported) {
          $item.css(this.side, 0).one(transitionEndEvent, function () {
            _this2.onOpenMenu(callback);
          });
        } else {
          var menuAnimation = this.getAnimation(openAction, 'menu');

          $item.css('display', 'block').animate(menuAnimation, {
            queue: false,
            duration: this.speed,
            complete: function complete() {
              _this2.onOpenMenu(callback);
            }
          });
        }
      }
    }, {
      key: 'onCloseMenu',
      value: function onCloseMenu(callback) {
        this.item.css({
          left: '',
          right: ''
        }).unbind(transitionEndEvent);
        $$2('html').css('overflow-x', '');

        sidrStatus.moving = false;
        sidrStatus.opened = false;

        this.body.removeClass(bodyAnimationClass).removeClass(this.openClass);

        this.onCloseEndCallback();

        // Callback
        if (typeof callback === 'function') {
          callback(name);
        }
      }
    }, {
      key: 'closeMenu',
      value: function closeMenu(callback) {
        var _this3 = this;

        var item = this.item;

        if (helper.transitions.supported) {
          item.css(this.side, '').one(transitionEndEvent, function () {
            _this3.onCloseMenu(callback);
          });
        } else {
          var menuAnimation = this.getAnimation(closeAction, 'menu');

          item.animate(menuAnimation, {
            queue: false,
            duration: this.speed,
            complete: function complete() {
              _this3.onCloseMenu();
            }
          });
        }
      }
    }, {
      key: 'moveMenu',
      value: function moveMenu(action, callback) {
        this.body.addClass(bodyAnimationClass);

        if (action === openAction) {
          this.openMenu(callback);
        } else {
          this.closeMenu(callback);
        }
      }
    }, {
      key: 'move',
      value: function move(action, callback) {
        // Lock sidr
        sidrStatus.moving = true;

        this.prepareBody(action);
        this.moveBody(action);
        this.moveMenu(action, callback);
      }
    }, {
      key: 'open',
      value: function open(callback) {
        var _this4 = this;

        // Check if is already opened or moving
        if (sidrStatus.opened === this.name || sidrStatus.moving) {
          return;
        }

        // If another menu opened close first
        if (sidrStatus.opened !== false) {
          var alreadyOpenedMenu = new Menu(sidrStatus.opened);

          alreadyOpenedMenu.close(function () {
            _this4.open(callback);
          });

          return;
        }

        this.move('open', callback);

        // onOpen callback
        this.onOpenCallback();
      }
    }, {
      key: 'close',
      value: function close(callback) {
        // Check if is already closed or moving
        if (sidrStatus.opened !== this.name || sidrStatus.moving) {
          return;
        }

        this.move('close', callback);

        // onClose callback
        this.onCloseCallback();
      }
    }, {
      key: 'toggle',
      value: function toggle(callback) {
        if (sidrStatus.opened === this.name) {
          this.close(callback);
        } else {
          this.open(callback);
        }
      }
    }]);
    return Menu;
  }();

  var $$1 = jQuery;

  function execute(action, name, callback) {
    var sidr = new Menu(name);

    switch (action) {
      case 'open':
        sidr.open(callback);
        break;
      case 'close':
        sidr.close(callback);
        break;
      case 'toggle':
        sidr.toggle(callback);
        break;
      default:
        $$1.error('Method ' + action + ' does not exist on jQuery.sidr');
        break;
    }
  }

  var i;
  var $ = jQuery;
  var publicMethods = ['open', 'close', 'toggle'];
  var methodName;
  var methods = {};
  var getMethod = function getMethod(methodName) {
    return function (name, callback) {
      // Check arguments
      if (typeof name === 'function') {
        callback = name;
        name = 'sidr';
      } else if (!name) {
        name = 'sidr';
      }

      execute(methodName, name, callback);
    };
  };
  for (i = 0; i < publicMethods.length; i++) {
    methodName = publicMethods[i];
    methods[methodName] = getMethod(methodName);
  }

  function sidr(method) {
    if (method === 'status') {
      return sidrStatus;
    } else if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'function' || typeof method === 'string' || !method) {
      return methods.toggle.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.sidr');
    }
  }

  var $$3 = jQuery;

  function fillContent($sideMenu, settings) {
    // The menu content
    if (typeof settings.source === 'function') {
      var newContent = settings.source(name);

      $sideMenu.html(newContent);
    } else if (typeof settings.source === 'string' && helper.isUrl(settings.source)) {
      $$3.get(settings.source, function (data) {
        $sideMenu.html(data);
      });
    } else if (typeof settings.source === 'string') {
      var htmlContent = '',
          selectors = settings.source.split(',');

      $$3.each(selectors, function (index, element) {
        htmlContent += '<div class="sidr-inner">' + $$3(element).html() + '</div>';
      });

      // Renaming ids and classes
      if (settings.renaming) {
        var $htmlContent = $$3('<div />').html(htmlContent);

        $htmlContent.find('*').each(function (index, element) {
          var $element = $$3(element);

          helper.addPrefixes($element);
        });
        htmlContent = $htmlContent.html();
      }

      $sideMenu.html(htmlContent);
    } else if (settings.source !== null) {
      $$3.error('Invalid Sidr Source');
    }

    return $sideMenu;
  }

  function fnSidr(options) {
    var transitions = helper.transitions,
        settings = $$3.extend({
      name: 'sidr', // Name for the 'sidr'
      speed: 200, // Accepts standard jQuery effects speeds (i.e. fast, normal or milliseconds)
      side: 'left', // Accepts 'left' or 'right'
      source: null, // Override the source of the content.
      renaming: true, // The ids and classes will be prepended with a prefix when loading existent content
      body: 'body', // Page container selector,
      displace: true, // Displace the body content or not
      timing: 'ease', // Timing function for CSS transitions
      method: 'toggle', // The method to call when element is clicked
      bind: 'touchstart click', // The event(s) to trigger the menu
      onOpen: function onOpen() {},
      // Callback when sidr start opening
      onClose: function onClose() {},
      // Callback when sidr start closing
      onOpenEnd: function onOpenEnd() {},
      // Callback when sidr end opening
      onCloseEnd: function onCloseEnd() {} // Callback when sidr end closing

    }, options),
        name = settings.name,
        $sideMenu = $$3('#' + name);

    // If the side menu do not exist create it
    if ($sideMenu.length === 0) {
      $sideMenu = $$3('<div />').attr('id', name).appendTo($$3('body'));
    }

    // Add transition to menu if are supported
    if (transitions.supported) {
      $sideMenu.css(transitions.property, settings.side + ' ' + settings.speed / 1000 + 's ' + settings.timing);
    }

    // Adding styles and options
    $sideMenu.addClass('sidr').addClass(settings.side).data({
      speed: settings.speed,
      side: settings.side,
      body: settings.body,
      displace: settings.displace,
      timing: settings.timing,
      method: settings.method,
      onOpen: settings.onOpen,
      onClose: settings.onClose,
      onOpenEnd: settings.onOpenEnd,
      onCloseEnd: settings.onCloseEnd
    });

    $sideMenu = fillContent($sideMenu, settings);

    return this.each(function () {
      var $this = $$3(this),
          data = $this.data('sidr'),
          flag = false;

      // If the plugin hasn't been initialized yet
      if (!data) {
        sidrStatus.moving = false;
        sidrStatus.opened = false;

        $this.data('sidr', name);

        $this.bind(settings.bind, function (event) {
          event.preventDefault();

          if (!flag) {
            flag = true;
            sidr(settings.method, name);

            setTimeout(function () {
              flag = false;
            }, 100);
          }
        });
      }
    });
  }

  jQuery.sidr = sidr;
  jQuery.fn.sidr = fnSidr;
})();
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (window, document, undefined) {
  "use strict";

  (function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
      s(r[o]);
    }return s;
  })({ 1: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var defaultParams = {
        title: '',
        text: '',
        type: null,
        allowOutsideClick: false,
        showConfirmButton: true,
        showCancelButton: false,
        closeOnConfirm: true,
        closeOnCancel: true,
        confirmButtonText: 'OK',
        confirmButtonClass: 'btn-primary',
        cancelButtonText: 'Cancel',
        cancelButtonClass: 'btn-default',
        containerClass: '',
        titleClass: '',
        textClass: '',
        imageUrl: null,
        imageSize: null,
        timer: null,
        customClass: '',
        html: false,
        animation: true,
        allowEscapeKey: true,
        inputType: 'text',
        inputPlaceholder: '',
        inputValue: '',
        showLoaderOnConfirm: false
      };

      exports.default = defaultParams;
    }, {}], 2: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.handleCancel = exports.handleConfirm = exports.handleButton = undefined;

      var _handleSwalDom = require('./handle-swal-dom');

      var _handleDom = require('./handle-dom');

      /*
       * User clicked on "Confirm"/"OK" or "Cancel"
       */
      var handleButton = function handleButton(event, params, modal) {
        var e = event || window.event;
        var target = e.target || e.srcElement;

        var targetedConfirm = target.className.indexOf('confirm') !== -1;
        var targetedOverlay = target.className.indexOf('sweet-overlay') !== -1;
        var modalIsVisible = (0, _handleDom.hasClass)(modal, 'visible');
        var doneFunctionExists = params.doneFunction && modal.getAttribute('data-has-done-function') === 'true';

        // Since the user can change the background-color of the confirm button programmatically,
        // we must calculate what the color should be on hover/active
        var normalColor, hoverColor, activeColor;
        if (targetedConfirm && params.confirmButtonColor) {
          normalColor = params.confirmButtonColor;
          hoverColor = colorLuminance(normalColor, -0.04);
          activeColor = colorLuminance(normalColor, -0.14);
        }

        function shouldSetConfirmButtonColor(color) {
          if (targetedConfirm && params.confirmButtonColor) {
            target.style.backgroundColor = color;
          }
        }

        switch (e.type) {
          case 'click':
            var clickedOnModal = modal === target;
            var clickedOnModalChild = (0, _handleDom.isDescendant)(modal, target);

            // Ignore click outside if allowOutsideClick is false
            if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && !params.allowOutsideClick) {
              break;
            }

            if (targetedConfirm && doneFunctionExists && modalIsVisible) {
              handleConfirm(modal, params);
            } else if (doneFunctionExists && modalIsVisible || targetedOverlay) {
              handleCancel(modal, params);
            } else if ((0, _handleDom.isDescendant)(modal, target) && target.tagName === 'BUTTON') {
              sweetAlert.close();
            }
            break;
        }
      };

      /*
       *  User clicked on "Confirm"/"OK"
       */
      var handleConfirm = function handleConfirm(modal, params) {
        var callbackValue = true;

        if ((0, _handleDom.hasClass)(modal, 'show-input')) {
          callbackValue = modal.querySelector('input').value;

          if (!callbackValue) {
            callbackValue = '';
          }
        }

        params.doneFunction(callbackValue);

        if (params.closeOnConfirm) {
          sweetAlert.close();
        }
        // Disable cancel and confirm button if the parameter is true
        if (params.showLoaderOnConfirm) {
          sweetAlert.disableButtons();
        }
      };

      /*
       *  User clicked on "Cancel"
       */
      var handleCancel = function handleCancel(modal, params) {
        // Check if callback function expects a parameter (to track cancel actions)
        var functionAsStr = String(params.doneFunction).replace(/\s/g, '');
        var functionHandlesCancel = functionAsStr.substring(0, 9) === 'function(' && functionAsStr.substring(9, 10) !== ')';

        if (functionHandlesCancel) {
          params.doneFunction(false);
        }

        if (params.closeOnCancel) {
          sweetAlert.close();
        }
      };

      exports.handleButton = handleButton;
      exports.handleConfirm = handleConfirm;
      exports.handleCancel = handleCancel;
    }, { "./handle-dom": 3, "./handle-swal-dom": 5 }], 3: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var hasClass = function hasClass(elem, className) {
        return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
      };

      var addClass = function addClass(elem, className) {
        if (!hasClass(elem, className)) {
          elem.className += ' ' + className;
        }
      };

      var removeClass = function removeClass(elem, className) {
        var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';
        if (hasClass(elem, className)) {
          while (newClass.indexOf(' ' + className + ' ') >= 0) {
            newClass = newClass.replace(' ' + className + ' ', ' ');
          }
          elem.className = newClass.replace(/^\s+|\s+$/g, '');
        }
      };

      var escapeHtml = function escapeHtml(str) {
        var div = document.createElement('div');
        div.appendChild(document.createTextNode(str));
        return div.innerHTML;
      };

      var _show = function _show(elem) {
        elem.style.opacity = '';
        elem.style.display = 'block';
      };

      var show = function show(elems) {
        if (elems && !elems.length) {
          return _show(elems);
        }
        for (var i = 0; i < elems.length; ++i) {
          _show(elems[i]);
        }
      };

      var _hide = function _hide(elem) {
        elem.style.opacity = '';
        elem.style.display = 'none';
      };

      var hide = function hide(elems) {
        if (elems && !elems.length) {
          return _hide(elems);
        }
        for (var i = 0; i < elems.length; ++i) {
          _hide(elems[i]);
        }
      };

      var isDescendant = function isDescendant(parent, child) {
        var node = child.parentNode;
        while (node !== null) {
          if (node === parent) {
            return true;
          }
          node = node.parentNode;
        }
        return false;
      };

      var getTopMargin = function getTopMargin(elem) {
        elem.style.left = '-9999px';
        elem.style.display = 'block';

        var height = elem.clientHeight,
            padding;
        if (typeof getComputedStyle !== "undefined") {
          // IE 8
          padding = parseInt(getComputedStyle(elem).getPropertyValue('padding-top'), 10);
        } else {
          padding = parseInt(elem.currentStyle.padding);
        }

        elem.style.left = '';
        elem.style.display = 'none';
        return '-' + parseInt((height + padding) / 2) + 'px';
      };

      var fadeIn = function fadeIn(elem, interval) {
        if (+elem.style.opacity < 1) {
          interval = interval || 16;
          elem.style.opacity = 0;
          elem.style.display = 'block';
          var last = +new Date();
          var tick = function tick() {
            elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;
            last = +new Date();

            if (+elem.style.opacity < 1) {
              setTimeout(tick, interval);
            }
          };
          tick();
        }
        elem.style.display = 'block'; //fallback IE8
      };

      var fadeOut = function fadeOut(elem, interval) {
        interval = interval || 16;
        elem.style.opacity = 1;
        var last = +new Date();
        var tick = function tick() {
          elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;
          last = +new Date();

          if (+elem.style.opacity > 0) {
            setTimeout(tick, interval);
          } else {
            elem.style.display = 'none';
          }
        };
        tick();
      };

      var fireClick = function fireClick(node) {
        // Taken from http://www.nonobtrusive.com/2011/11/29/programatically-fire-crossbrowser-click-event-with-javascript/
        // Then fixed for today's Chrome browser.
        if (typeof MouseEvent === 'function') {
          // Up-to-date approach
          var mevt = new MouseEvent('click', {
            view: window,
            bubbles: false,
            cancelable: true
          });
          node.dispatchEvent(mevt);
        } else if (document.createEvent) {
          // Fallback
          var evt = document.createEvent('MouseEvents');
          evt.initEvent('click', false, false);
          node.dispatchEvent(evt);
        } else if (document.createEventObject) {
          node.fireEvent('onclick');
        } else if (typeof node.onclick === 'function') {
          node.onclick();
        }
      };

      var stopEventPropagation = function stopEventPropagation(e) {
        // In particular, make sure the space bar doesn't scroll the main window.
        if (typeof e.stopPropagation === 'function') {
          e.stopPropagation();
          e.preventDefault();
        } else if (window.event && window.event.hasOwnProperty('cancelBubble')) {
          window.event.cancelBubble = true;
        }
      };

      exports.hasClass = hasClass;
      exports.addClass = addClass;
      exports.removeClass = removeClass;
      exports.escapeHtml = escapeHtml;
      exports._show = _show;
      exports.show = show;
      exports._hide = _hide;
      exports.hide = hide;
      exports.isDescendant = isDescendant;
      exports.getTopMargin = getTopMargin;
      exports.fadeIn = fadeIn;
      exports.fadeOut = fadeOut;
      exports.fireClick = fireClick;
      exports.stopEventPropagation = stopEventPropagation;
    }, {}], 4: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _handleDom = require('./handle-dom');

      var _handleSwalDom = require('./handle-swal-dom');

      var handleKeyDown = function handleKeyDown(event, params, modal) {
        var e = event || window.event;
        var keyCode = e.keyCode || e.which;

        var $okButton = modal.querySelector('button.confirm');
        var $cancelButton = modal.querySelector('button.cancel');
        var $modalButtons = modal.querySelectorAll('button[tabindex]');

        if ([9, 13, 32, 27].indexOf(keyCode) === -1) {
          // Don't do work on keys we don't care about.
          return;
        }

        var $targetElement = e.target || e.srcElement;

        var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.
        for (var i = 0; i < $modalButtons.length; i++) {
          if ($targetElement === $modalButtons[i]) {
            btnIndex = i;
            break;
          }
        }

        if (keyCode === 9) {
          // TAB
          if (btnIndex === -1) {
            // No button focused. Jump to the confirm button.
            $targetElement = $okButton;
          } else {
            // Cycle to the next button
            if (btnIndex === $modalButtons.length - 1) {
              $targetElement = $modalButtons[0];
            } else {
              $targetElement = $modalButtons[btnIndex + 1];
            }
          }

          (0, _handleDom.stopEventPropagation)(e);
          $targetElement.focus();

          if (params.confirmButtonColor) {
            (0, _handleSwalDom.setFocusStyle)($targetElement, params.confirmButtonColor);
          }
        } else {
          if (keyCode === 13) {
            if ($targetElement.tagName === 'INPUT') {
              $targetElement = $okButton;
              $okButton.focus();
            }

            if (btnIndex === -1) {
              // ENTER/SPACE clicked outside of a button.
              $targetElement = $okButton;
            } else {
              // Do nothing - let the browser handle it.
              $targetElement = undefined;
            }
          } else if (keyCode === 27 && params.allowEscapeKey === true) {
            $targetElement = $cancelButton;
            (0, _handleDom.fireClick)($targetElement, e);
          } else {
            // Fallback - let the browser handle it.
            $targetElement = undefined;
          }
        }
      };

      exports.default = handleKeyDown;
    }, { "./handle-dom": 3, "./handle-swal-dom": 5 }], 5: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.fixVerticalPosition = exports.resetInputError = exports.resetInput = exports.openModal = exports.getInput = exports.getOverlay = exports.getModal = exports.sweetAlertInitialize = undefined;

      var _handleDom = require('./handle-dom');

      var _defaultParams = require('./default-params');

      var _defaultParams2 = _interopRequireDefault(_defaultParams);

      var _injectedHtml = require('./injected-html');

      var _injectedHtml2 = _interopRequireDefault(_injectedHtml);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      var modalClass = '.sweet-alert';
      var overlayClass = '.sweet-overlay';

      /*
       * Add modal + overlay to DOM
       */

      var sweetAlertInitialize = function sweetAlertInitialize() {
        var sweetWrap = document.createElement('div');
        sweetWrap.innerHTML = _injectedHtml2.default;

        // Append elements to body
        while (sweetWrap.firstChild) {
          document.body.appendChild(sweetWrap.firstChild);
        }
      };

      /*
       * Get DOM element of modal
       */
      var getModal = function getModal() {
        var $modal = document.querySelector(modalClass);

        if (!$modal) {
          sweetAlertInitialize();
          $modal = getModal();
        }

        return $modal;
      };

      /*
       * Get DOM element of input (in modal)
       */
      var getInput = function getInput() {
        var $modal = getModal();
        if ($modal) {
          return $modal.querySelector('input');
        }
      };

      /*
       * Get DOM element of overlay
       */
      var getOverlay = function getOverlay() {
        return document.querySelector(overlayClass);
      };

      /*
       * Animation when opening modal
       */
      var openModal = function openModal(callback) {
        var $modal = getModal();
        (0, _handleDom.fadeIn)(getOverlay(), 10);
        (0, _handleDom.show)($modal);
        (0, _handleDom.addClass)($modal, 'showSweetAlert');
        (0, _handleDom.removeClass)($modal, 'hideSweetAlert');

        window.previousActiveElement = document.activeElement;
        var $okButton = $modal.querySelector('button.confirm');
        $okButton.focus();

        setTimeout(function () {
          (0, _handleDom.addClass)($modal, 'visible');
        }, 500);

        var timer = $modal.getAttribute('data-timer');

        if (timer !== 'null' && timer !== '') {
          var timerCallback = callback;
          $modal.timeout = setTimeout(function () {
            var doneFunctionExists = (timerCallback || null) && $modal.getAttribute('data-has-done-function') === 'true';
            if (doneFunctionExists) {
              timerCallback(null);
            } else {
              sweetAlert.close();
            }
          }, timer);
        }
      };

      /*
       * Reset the styling of the input
       * (for example if errors have been shown)
       */
      var resetInput = function resetInput() {
        var $modal = getModal();
        var $input = getInput();

        (0, _handleDom.removeClass)($modal, 'show-input');
        $input.value = _defaultParams2.default.inputValue;
        $input.setAttribute('type', _defaultParams2.default.inputType);
        $input.setAttribute('placeholder', _defaultParams2.default.inputPlaceholder);

        resetInputError();
      };

      var resetInputError = function resetInputError(event) {
        // If press enter => ignore
        if (event && event.keyCode === 13) {
          return false;
        }

        var $modal = getModal();

        var $errorIcon = $modal.querySelector('.sa-input-error');
        (0, _handleDom.removeClass)($errorIcon, 'show');

        var $errorContainer = $modal.querySelector('.form-group');
        (0, _handleDom.removeClass)($errorContainer, 'has-error');
      };

      /*
       * Set "margin-top"-property on modal based on its computed height
       */
      var fixVerticalPosition = function fixVerticalPosition() {
        var $modal = getModal();
        $modal.style.marginTop = (0, _handleDom.getTopMargin)(getModal());
      };

      exports.sweetAlertInitialize = sweetAlertInitialize;
      exports.getModal = getModal;
      exports.getOverlay = getOverlay;
      exports.getInput = getInput;
      exports.openModal = openModal;
      exports.resetInput = resetInput;
      exports.resetInputError = resetInputError;
      exports.fixVerticalPosition = fixVerticalPosition;
    }, { "./default-params": 1, "./handle-dom": 3, "./injected-html": 6 }], 6: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var injectedHTML =

      // Dark overlay
      "<div class=\"sweet-overlay\" tabIndex=\"-1\"></div>" +

      // Modal
      "<div class=\"sweet-alert\" tabIndex=\"-1\">" +

      // Error icon
      "<div class=\"sa-icon sa-error\">\n      <span class=\"sa-x-mark\">\n        <span class=\"sa-line sa-left\"></span>\n        <span class=\"sa-line sa-right\"></span>\n      </span>\n    </div>" +

      // Warning icon
      "<div class=\"sa-icon sa-warning\">\n      <span class=\"sa-body\"></span>\n      <span class=\"sa-dot\"></span>\n    </div>" +

      // Info icon
      "<div class=\"sa-icon sa-info\"></div>" +

      // Success icon
      "<div class=\"sa-icon sa-success\">\n      <span class=\"sa-line sa-tip\"></span>\n      <span class=\"sa-line sa-long\"></span>\n\n      <div class=\"sa-placeholder\"></div>\n      <div class=\"sa-fix\"></div>\n    </div>" + "<div class=\"sa-icon sa-custom\"></div>" +

      // Title, text and input
      "<h2>Title</h2>\n    <p class=\"lead text-muted\">Text</p>\n    <div class=\"form-group\">\n      <input type=\"text\" class=\"form-control\" tabIndex=\"3\" />\n      <span class=\"sa-input-error help-block\">\n        <span class=\"glyphicon glyphicon-exclamation-sign\"></span> <span class=\"sa-help-text\">Not valid</span>\n      </span>\n    </div>" +

      // Cancel and confirm buttons
      "<div class=\"sa-button-container\">\n      <button class=\"cancel btn btn-lg\" tabIndex=\"2\">Cancel</button>\n      <div class=\"sa-confirm-button-container\">\n        <button class=\"confirm btn btn-lg\" tabIndex=\"1\">OK</button>" +

      // Loading animation
      "<div class=\"la-ball-fall\">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div>" +

      // End of modal
      "</div>";

      exports.default = injectedHTML;
    }, {}], 7: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      };

      var _utils = require('./utils');

      var _handleSwalDom = require('./handle-swal-dom');

      var _handleDom = require('./handle-dom');

      var alertTypes = ['error', 'warning', 'info', 'success', 'input', 'prompt'];

      /*
       * Set type, text and actions on modal
       */
      var setParameters = function setParameters(params) {
        var modal = (0, _handleSwalDom.getModal)();

        var $title = modal.querySelector('h2');
        var $text = modal.querySelector('p');
        var $cancelBtn = modal.querySelector('button.cancel');
        var $confirmBtn = modal.querySelector('button.confirm');

        /*
         * Title
         */
        $title.innerHTML = params.html ? params.title : (0, _handleDom.escapeHtml)(params.title).split('\n').join('<br>');

        /*
         * Text
         */
        $text.innerHTML = params.html ? params.text : (0, _handleDom.escapeHtml)(params.text || '').split('\n').join('<br>');
        if (params.text) (0, _handleDom.show)($text);

        /*
         * Custom class
         */
        if (params.customClass) {
          (0, _handleDom.addClass)(modal, params.customClass);
          modal.setAttribute('data-custom-class', params.customClass);
        } else {
          // Find previously set classes and remove them
          var customClass = modal.getAttribute('data-custom-class');
          (0, _handleDom.removeClass)(modal, customClass);
          modal.setAttribute('data-custom-class', '');
        }

        /*
         * Icon
         */
        (0, _handleDom.hide)(modal.querySelectorAll('.sa-icon'));

        if (params.type && !(0, _utils.isIE8)()) {
          var _ret = function () {

            var validType = false;

            for (var i = 0; i < alertTypes.length; i++) {
              if (params.type === alertTypes[i]) {
                validType = true;
                break;
              }
            }

            if (!validType) {
              logStr('Unknown alert type: ' + params.type);
              return {
                v: false
              };
            }

            var typesWithIcons = ['success', 'error', 'warning', 'info'];
            var $icon = void 0;

            if (typesWithIcons.indexOf(params.type) !== -1) {
              $icon = modal.querySelector('.sa-icon.' + 'sa-' + params.type);
              (0, _handleDom.show)($icon);
            }

            var $input = (0, _handleSwalDom.getInput)();

            // Animate icon
            switch (params.type) {

              case 'success':
                (0, _handleDom.addClass)($icon, 'animate');
                (0, _handleDom.addClass)($icon.querySelector('.sa-tip'), 'animateSuccessTip');
                (0, _handleDom.addClass)($icon.querySelector('.sa-long'), 'animateSuccessLong');
                break;

              case 'error':
                (0, _handleDom.addClass)($icon, 'animateErrorIcon');
                (0, _handleDom.addClass)($icon.querySelector('.sa-x-mark'), 'animateXMark');
                break;

              case 'warning':
                (0, _handleDom.addClass)($icon, 'pulseWarning');
                (0, _handleDom.addClass)($icon.querySelector('.sa-body'), 'pulseWarningIns');
                (0, _handleDom.addClass)($icon.querySelector('.sa-dot'), 'pulseWarningIns');
                break;

              case 'input':
              case 'prompt':
                $input.setAttribute('type', params.inputType);
                $input.value = params.inputValue;
                $input.setAttribute('placeholder', params.inputPlaceholder);
                (0, _handleDom.addClass)(modal, 'show-input');
                setTimeout(function () {
                  $input.focus();
                  $input.addEventListener('keyup', swal.resetInputError);
                }, 400);
                break;
            }
          }();

          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }

        /*
         * Custom image
         */
        if (params.imageUrl) {
          var $customIcon = modal.querySelector('.sa-icon.sa-custom');

          $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';
          (0, _handleDom.show)($customIcon);

          var _imgWidth = 80;
          var _imgHeight = 80;

          if (params.imageSize) {
            var dimensions = params.imageSize.toString().split('x');
            var imgWidth = dimensions[0];
            var imgHeight = dimensions[1];

            if (!imgWidth || !imgHeight) {
              logStr('Parameter imageSize expects value with format WIDTHxHEIGHT, got ' + params.imageSize);
            } else {
              _imgWidth = imgWidth;
              _imgHeight = imgHeight;
            }
          }

          $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');
        }

        /*
         * Show cancel button?
         */
        modal.setAttribute('data-has-cancel-button', params.showCancelButton);
        if (params.showCancelButton) {
          $cancelBtn.style.display = 'inline-block';
        } else {
          (0, _handleDom.hide)($cancelBtn);
        }

        /*
         * Show confirm button?
         */
        modal.setAttribute('data-has-confirm-button', params.showConfirmButton);
        if (params.showConfirmButton) {
          $confirmBtn.style.display = 'inline-block';
        } else {
          (0, _handleDom.hide)($confirmBtn);
        }

        /*
         * Custom text on cancel/confirm buttons
         */
        if (params.cancelButtonText) {
          $cancelBtn.innerHTML = (0, _handleDom.escapeHtml)(params.cancelButtonText);
        }
        if (params.confirmButtonText) {
          $confirmBtn.innerHTML = (0, _handleDom.escapeHtml)(params.confirmButtonText);
        }

        /*
         * Reset confirm buttons to default class (Ugly fix)
         */
        $confirmBtn.className = 'confirm btn btn-lg';

        /*
         * Attach selected class to the sweet alert modal
         */
        (0, _handleDom.addClass)(modal, params.containerClass);

        /*
         * Set confirm button to selected class
         */
        (0, _handleDom.addClass)($confirmBtn, params.confirmButtonClass);

        /*
         * Set cancel button to selected class
         */
        (0, _handleDom.addClass)($cancelBtn, params.cancelButtonClass);

        /*
         * Set title to selected class
         */
        (0, _handleDom.addClass)($title, params.titleClass);

        /*
         * Set text to selected class
         */
        (0, _handleDom.addClass)($text, params.textClass);

        /*
         * Allow outside click
         */
        modal.setAttribute('data-allow-outside-click', params.allowOutsideClick);

        /*
         * Callback function
         */
        var hasDoneFunction = params.doneFunction ? true : false;
        modal.setAttribute('data-has-done-function', hasDoneFunction);

        /*
         * Animation
         */
        if (!params.animation) {
          modal.setAttribute('data-animation', 'none');
        } else if (typeof params.animation === 'string') {
          modal.setAttribute('data-animation', params.animation); // Custom animation
        } else {
          modal.setAttribute('data-animation', 'pop');
        }

        /*
         * Timer
         */
        modal.setAttribute('data-timer', params.timer);
      };

      exports.default = setParameters;
    }, { "./handle-dom": 3, "./handle-swal-dom": 5, "./utils": 8 }], 8: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /*
       * Allow user to pass their own params
       */
      var extend = function extend(a, b) {
        for (var key in b) {
          if (b.hasOwnProperty(key)) {
            a[key] = b[key];
          }
        }
        return a;
      };

      /*
       * Check if the user is using Internet Explorer 8 (for fallbacks)
       */
      var isIE8 = function isIE8() {
        return window.attachEvent && !window.addEventListener;
      };

      /*
       * IE compatible logging for developers
       */
      var logStr = function logStr(string) {
        if (window.console) {
          // IE...
          window.console.log('SweetAlert: ' + string);
        }
      };

      exports.extend = extend;
      exports.isIE8 = isIE8;
      exports.logStr = logStr;
    }, {}], 9: [function (require, module, exports) {
      'use strict';

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      }; // SweetAlert
      // 2014-2015 (c) - Tristan Edwards
      // github.com/t4t5/sweetalert

      /*
       * jQuery-like functions for manipulating the DOM
       */

      /*
       * Handy utilities
       */

      /*
       *  Handle sweetAlert's DOM elements
       */

      // Handle button events and keyboard events


      // Default values


      var _handleDom = require('./modules/handle-dom');

      var _utils = require('./modules/utils');

      var _handleSwalDom = require('./modules/handle-swal-dom');

      var _handleClick = require('./modules/handle-click');

      var _handleKey = require('./modules/handle-key');

      var _handleKey2 = _interopRequireDefault(_handleKey);

      var _defaultParams = require('./modules/default-params');

      var _defaultParams2 = _interopRequireDefault(_defaultParams);

      var _setParams = require('./modules/set-params');

      var _setParams2 = _interopRequireDefault(_setParams);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      /*
       * Remember state in cases where opening and handling a modal will fiddle with it.
       * (We also use window.previousActiveElement as a global variable)
       */
      var previousWindowKeyDown;
      var lastFocusedButton;

      /*
       * Global sweetAlert function
       * (this is what the user calls)
       */
      var sweetAlert, _swal;

      exports.default = sweetAlert = _swal = function swal() {
        var customizations = arguments[0];

        (0, _handleDom.addClass)(document.body, 'stop-scrolling');
        (0, _handleSwalDom.resetInput)();

        /*
         * Use argument if defined or default value from params object otherwise.
         * Supports the case where a default value is boolean true and should be
         * overridden by a corresponding explicit argument which is boolean false.
         */
        function argumentOrDefault(key) {
          var args = customizations;
          return args[key] === undefined ? _defaultParams2.default[key] : args[key];
        }

        if (customizations === undefined) {
          (0, _utils.logStr)('SweetAlert expects at least 1 attribute!');
          return false;
        }

        var params = (0, _utils.extend)({}, _defaultParams2.default);

        switch (typeof customizations === 'undefined' ? 'undefined' : _typeof(customizations)) {

          // Ex: swal("Hello", "Just testing", "info");
          case 'string':
            params.title = customizations;
            params.text = arguments[1] || '';
            params.type = arguments[2] || '';
            break;

          // Ex: swal({ title:"Hello", text: "Just testing", type: "info" });
          case 'object':
            if (customizations.title === undefined) {
              (0, _utils.logStr)('Missing "title" argument!');
              return false;
            }

            params.title = customizations.title;

            for (var customName in _defaultParams2.default) {
              params[customName] = argumentOrDefault(customName);
            }

            // Show "Confirm" instead of "OK" if cancel button is visible
            params.confirmButtonText = params.showCancelButton ? 'Confirm' : _defaultParams2.default.confirmButtonText;
            params.confirmButtonText = argumentOrDefault('confirmButtonText');

            // Callback function when clicking on "OK"/"Cancel"
            params.doneFunction = arguments[1] || null;

            break;

          default:
            (0, _utils.logStr)('Unexpected type of argument! Expected "string" or "object", got ' + (typeof customizations === 'undefined' ? 'undefined' : _typeof(customizations)));
            return false;

        }

        (0, _setParams2.default)(params);
        (0, _handleSwalDom.fixVerticalPosition)();
        (0, _handleSwalDom.openModal)(arguments[1]);

        // Modal interactions
        var modal = (0, _handleSwalDom.getModal)();

        /*
         * Make sure all modal buttons respond to all events
         */
        var $buttons = modal.querySelectorAll('button');
        var buttonEvents = ['onclick'];
        var onButtonEvent = function onButtonEvent(e) {
          return (0, _handleClick.handleButton)(e, params, modal);
        };

        for (var btnIndex = 0; btnIndex < $buttons.length; btnIndex++) {
          for (var evtIndex = 0; evtIndex < buttonEvents.length; evtIndex++) {
            var btnEvt = buttonEvents[evtIndex];
            $buttons[btnIndex][btnEvt] = onButtonEvent;
          }
        }

        // Clicking outside the modal dismisses it (if allowed by user)
        (0, _handleSwalDom.getOverlay)().onclick = onButtonEvent;

        previousWindowKeyDown = window.onkeydown;

        var onKeyEvent = function onKeyEvent(e) {
          return (0, _handleKey2.default)(e, params, modal);
        };
        window.onkeydown = onKeyEvent;

        window.onfocus = function () {
          // When the user has focused away and focused back from the whole window.
          setTimeout(function () {
            // Put in a timeout to jump out of the event sequence.
            // Calling focus() in the event sequence confuses things.
            if (lastFocusedButton !== undefined) {
              lastFocusedButton.focus();
              lastFocusedButton = undefined;
            }
          }, 0);
        };

        // Show alert with enabled buttons always
        _swal.enableButtons();
      };

      /*
       * Set default params for each popup
       * @param {Object} userParams
       */

      sweetAlert.setDefaults = _swal.setDefaults = function (userParams) {
        if (!userParams) {
          throw new Error('userParams is required');
        }
        if ((typeof userParams === 'undefined' ? 'undefined' : _typeof(userParams)) !== 'object') {
          throw new Error('userParams has to be a object');
        }

        (0, _utils.extend)(_defaultParams2.default, userParams);
      };

      /*
       * Animation when closing modal
       */
      sweetAlert.close = _swal.close = function () {
        var modal = (0, _handleSwalDom.getModal)();

        (0, _handleDom.fadeOut)((0, _handleSwalDom.getOverlay)(), 5);
        (0, _handleDom.fadeOut)(modal, 5);
        (0, _handleDom.removeClass)(modal, 'showSweetAlert');
        (0, _handleDom.addClass)(modal, 'hideSweetAlert');
        (0, _handleDom.removeClass)(modal, 'visible');

        /*
         * Reset icon animations
         */
        var $successIcon = modal.querySelector('.sa-icon.sa-success');
        (0, _handleDom.removeClass)($successIcon, 'animate');
        (0, _handleDom.removeClass)($successIcon.querySelector('.sa-tip'), 'animateSuccessTip');
        (0, _handleDom.removeClass)($successIcon.querySelector('.sa-long'), 'animateSuccessLong');

        var $errorIcon = modal.querySelector('.sa-icon.sa-error');
        (0, _handleDom.removeClass)($errorIcon, 'animateErrorIcon');
        (0, _handleDom.removeClass)($errorIcon.querySelector('.sa-x-mark'), 'animateXMark');

        var $warningIcon = modal.querySelector('.sa-icon.sa-warning');
        (0, _handleDom.removeClass)($warningIcon, 'pulseWarning');
        (0, _handleDom.removeClass)($warningIcon.querySelector('.sa-body'), 'pulseWarningIns');
        (0, _handleDom.removeClass)($warningIcon.querySelector('.sa-dot'), 'pulseWarningIns');

        // Reset custom class (delay so that UI changes aren't visible)
        setTimeout(function () {
          var customClass = modal.getAttribute('data-custom-class');
          (0, _handleDom.removeClass)(modal, customClass);
        }, 300);

        // Make page scrollable again
        (0, _handleDom.removeClass)(document.body, 'stop-scrolling');

        // Reset the page to its previous state
        window.onkeydown = previousWindowKeyDown;
        if (window.previousActiveElement) {
          window.previousActiveElement.focus();
        }
        lastFocusedButton = undefined;
        clearTimeout(modal.timeout);

        return true;
      };

      /*
       * Validation of the input field is done by user
       * If something is wrong => call showInputError with errorMessage
       */
      sweetAlert.showInputError = _swal.showInputError = function (errorMessage) {
        var modal = (0, _handleSwalDom.getModal)();

        var $errorIcon = modal.querySelector('.sa-input-error');
        (0, _handleDom.addClass)($errorIcon, 'show');

        var $errorContainer = modal.querySelector('.form-group');
        (0, _handleDom.addClass)($errorContainer, 'has-error');

        $errorContainer.querySelector('.sa-help-text').innerHTML = errorMessage;

        setTimeout(function () {
          sweetAlert.enableButtons();
        }, 1);

        modal.querySelector('input').focus();
      };

      /*
       * Reset input error DOM elements
       */
      sweetAlert.resetInputError = _swal.resetInputError = function (event) {
        // If press enter => ignore
        if (event && event.keyCode === 13) {
          return false;
        }

        var $modal = (0, _handleSwalDom.getModal)();

        var $errorIcon = $modal.querySelector('.sa-input-error');
        (0, _handleDom.removeClass)($errorIcon, 'show');

        var $errorContainer = $modal.querySelector('.form-group');
        (0, _handleDom.removeClass)($errorContainer, 'has-error');
      };

      /*
       * Disable confirm and cancel buttons
       */
      sweetAlert.disableButtons = _swal.disableButtons = function (event) {
        var modal = (0, _handleSwalDom.getModal)();
        var $confirmButton = modal.querySelector('button.confirm');
        var $cancelButton = modal.querySelector('button.cancel');
        $confirmButton.disabled = true;
        $cancelButton.disabled = true;
      };

      /*
       * Enable confirm and cancel buttons
       */
      sweetAlert.enableButtons = _swal.enableButtons = function (event) {
        var modal = (0, _handleSwalDom.getModal)();
        var $confirmButton = modal.querySelector('button.confirm');
        var $cancelButton = modal.querySelector('button.cancel');
        $confirmButton.disabled = false;
        $cancelButton.disabled = false;
      };

      if (typeof window !== 'undefined') {
        // The 'handle-click' module requires
        // that 'sweetAlert' was set as global.
        window.sweetAlert = window.swal = sweetAlert;
      } else {
        (0, _utils.logStr)('SweetAlert is a frontend module!');
      }
    }, { "./modules/default-params": 1, "./modules/handle-click": 2, "./modules/handle-dom": 3, "./modules/handle-key": 4, "./modules/handle-swal-dom": 5, "./modules/set-params": 7, "./modules/utils": 8 }] }, {}, [9]);

  /*
   * Use SweetAlert with RequireJS
   */

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return sweetAlert;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sweetAlert;
  }
})(window, document);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
  var AjaxMonitor,
      Bar,
      DocumentMonitor,
      ElementMonitor,
      ElementTracker,
      EventLagMonitor,
      Evented,
      Events,
      NoTargetError,
      Pace,
      RequestIntercept,
      SOURCE_KEYS,
      Scaler,
      SocketRequestTracker,
      XHRRequestTracker,
      animation,
      avgAmplitude,
      bar,
      cancelAnimation,
      cancelAnimationFrame,
      defaultOptions,
      _extend,
      extendNative,
      getFromDOM,
      getIntercept,
      handlePushState,
      ignoreStack,
      init,
      now,
      options,
      requestAnimationFrame,
      result,
      runAnimation,
      scalers,
      shouldIgnoreURL,
      shouldTrack,
      source,
      sources,
      uniScaler,
      _WebSocket,
      _XDomainRequest,
      _XMLHttpRequest,
      _i,
      _intercept,
      _len,
      _pushState,
      _ref,
      _ref1,
      _replaceState,
      __slice = [].slice,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      __indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  defaultOptions = {
    catchupTime: 100,
    initialRate: .03,
    minTime: 250,
    ghostTime: 100,
    maxProgressPerFrame: 20,
    easeFactor: 1.25,
    startOnPageLoad: true,
    restartOnPushState: true,
    restartOnRequestAfter: 500,
    target: 'body',
    elements: {
      checkInterval: 100,
      selectors: ['body']
    },
    eventLag: {
      minSamples: 10,
      sampleCount: 3,
      lagThreshold: 3
    },
    ajax: {
      trackMethods: ['GET'],
      trackWebSockets: true,
      ignoreURLs: []
    }
  };

  now = function now() {
    var _ref;
    return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +new Date();
  };

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

  if (requestAnimationFrame == null) {
    requestAnimationFrame = function requestAnimationFrame(fn) {
      return setTimeout(fn, 50);
    };
    cancelAnimationFrame = function cancelAnimationFrame(id) {
      return clearTimeout(id);
    };
  }

  runAnimation = function runAnimation(fn) {
    var last, _tick;
    last = now();
    _tick = function tick() {
      var diff;
      diff = now() - last;
      if (diff >= 33) {
        last = now();
        return fn(diff, function () {
          return requestAnimationFrame(_tick);
        });
      } else {
        return setTimeout(_tick, 33 - diff);
      }
    };
    return _tick();
  };

  result = function result() {
    var args, key, obj;
    obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (typeof obj[key] === 'function') {
      return obj[key].apply(obj, args);
    } else {
      return obj[key];
    }
  };

  _extend = function extend() {
    var key, out, source, sources, val, _i, _len;
    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      if (source) {
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          val = source[key];
          if (out[key] != null && _typeof(out[key]) === 'object' && val != null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
            _extend(out[key], val);
          } else {
            out[key] = val;
          }
        }
      }
    }
    return out;
  };

  avgAmplitude = function avgAmplitude(arr) {
    var count, sum, v, _i, _len;
    sum = count = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      sum += Math.abs(v);
      count++;
    }
    return sum / count;
  };

  getFromDOM = function getFromDOM(key, json) {
    var data, e, el;
    if (key == null) {
      key = 'options';
    }
    if (json == null) {
      json = true;
    }
    el = document.querySelector("[data-pace-" + key + "]");
    if (!el) {
      return;
    }
    data = el.getAttribute("data-pace-" + key);
    if (!json) {
      return data;
    }
    try {
      return JSON.parse(data);
    } catch (_error) {
      e = _error;
      return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
    }
  };

  Evented = function () {
    function Evented() {}

    Evented.prototype.on = function (event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function (event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function (event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function () {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;
  }();

  Pace = window.Pace || {};

  window.Pace = Pace;

  _extend(Pace, Evented.prototype);

  options = Pace.options = _extend({}, defaultOptions, window.paceOptions, getFromDOM());

  _ref = ['ajax', 'document', 'eventLag', 'elements'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    source = _ref[_i];
    if (options[source] === true) {
      options[source] = defaultOptions[source];
    }
  }

  NoTargetError = function (_super) {
    __extends(NoTargetError, _super);

    function NoTargetError() {
      _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return NoTargetError;
  }(Error);

  Bar = function () {
    function Bar() {
      this.progress = 0;
    }

    Bar.prototype.getElement = function () {
      var targetElement;
      if (this.el == null) {
        targetElement = document.querySelector(options.target);
        if (!targetElement) {
          throw new NoTargetError();
        }
        this.el = document.createElement('div');
        this.el.className = "pace pace-active";
        document.body.className = document.body.className.replace(/pace-done/g, '');
        document.body.className += ' pace-running';
        this.el.innerHTML = '<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
        if (targetElement.firstChild != null) {
          targetElement.insertBefore(this.el, targetElement.firstChild);
        } else {
          targetElement.appendChild(this.el);
        }
      }
      return this.el;
    };

    Bar.prototype.finish = function () {
      var el;
      el = this.getElement();
      el.className = el.className.replace('pace-active', '');
      el.className += ' pace-inactive';
      document.body.className = document.body.className.replace('pace-running', '');
      return document.body.className += ' pace-done';
    };

    Bar.prototype.update = function (prog) {
      this.progress = prog;
      return this.render();
    };

    Bar.prototype.destroy = function () {
      try {
        this.getElement().parentNode.removeChild(this.getElement());
      } catch (_error) {
        NoTargetError = _error;
      }
      return this.el = void 0;
    };

    Bar.prototype.render = function () {
      var el, key, progressStr, transform, _j, _len1, _ref2;
      if (document.querySelector(options.target) == null) {
        return false;
      }
      el = this.getElement();
      transform = "translate3d(" + this.progress + "%, 0, 0)";
      _ref2 = ['webkitTransform', 'msTransform', 'transform'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        key = _ref2[_j];
        el.children[0].style[key] = transform;
      }
      if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
        el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
        if (this.progress >= 100) {
          progressStr = '99';
        } else {
          progressStr = this.progress < 10 ? "0" : "";
          progressStr += this.progress | 0;
        }
        el.children[0].setAttribute('data-progress', "" + progressStr);
      }
      return this.lastRenderedProgress = this.progress;
    };

    Bar.prototype.done = function () {
      return this.progress >= 100;
    };

    return Bar;
  }();

  Events = function () {
    function Events() {
      this.bindings = {};
    }

    Events.prototype.trigger = function (name, val) {
      var binding, _j, _len1, _ref2, _results;
      if (this.bindings[name] != null) {
        _ref2 = this.bindings[name];
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          binding = _ref2[_j];
          _results.push(binding.call(this, val));
        }
        return _results;
      }
    };

    Events.prototype.on = function (name, fn) {
      var _base;
      if ((_base = this.bindings)[name] == null) {
        _base[name] = [];
      }
      return this.bindings[name].push(fn);
    };

    return Events;
  }();

  _XMLHttpRequest = window.XMLHttpRequest;

  _XDomainRequest = window.XDomainRequest;

  _WebSocket = window.WebSocket;

  extendNative = function extendNative(to, from) {
    var e, key, _results;
    _results = [];
    for (key in from.prototype) {
      try {
        if (to[key] == null && typeof from[key] !== 'function') {
          if (typeof Object.defineProperty === 'function') {
            _results.push(Object.defineProperty(to, key, {
              get: function get() {
                return from.prototype[key];
              },
              configurable: true,
              enumerable: true
            }));
          } else {
            _results.push(to[key] = from.prototype[key]);
          }
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        e = _error;
      }
    }
    return _results;
  };

  ignoreStack = [];

  Pace.ignore = function () {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('ignore');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  Pace.track = function () {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('track');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  shouldTrack = function shouldTrack(method) {
    var _ref2;
    if (method == null) {
      method = 'GET';
    }
    if (ignoreStack[0] === 'track') {
      return 'force';
    }
    if (!ignoreStack.length && options.ajax) {
      if (method === 'socket' && options.ajax.trackWebSockets) {
        return true;
      } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
        return true;
      }
    }
    return false;
  };

  RequestIntercept = function (_super) {
    __extends(RequestIntercept, _super);

    function RequestIntercept() {
      var monitorXHR,
          _this = this;
      RequestIntercept.__super__.constructor.apply(this, arguments);
      monitorXHR = function monitorXHR(req) {
        var _open;
        _open = req.open;
        return req.open = function (type, url, async) {
          if (shouldTrack(type)) {
            _this.trigger('request', {
              type: type,
              url: url,
              request: req
            });
          }
          return _open.apply(req, arguments);
        };
      };
      window.XMLHttpRequest = function (flags) {
        var req;
        req = new _XMLHttpRequest(flags);
        monitorXHR(req);
        return req;
      };
      try {
        extendNative(window.XMLHttpRequest, _XMLHttpRequest);
      } catch (_error) {}
      if (_XDomainRequest != null) {
        window.XDomainRequest = function () {
          var req;
          req = new _XDomainRequest();
          monitorXHR(req);
          return req;
        };
        try {
          extendNative(window.XDomainRequest, _XDomainRequest);
        } catch (_error) {}
      }
      if (_WebSocket != null && options.ajax.trackWebSockets) {
        window.WebSocket = function (url, protocols) {
          var req;
          if (protocols != null) {
            req = new _WebSocket(url, protocols);
          } else {
            req = new _WebSocket(url);
          }
          if (shouldTrack('socket')) {
            _this.trigger('request', {
              type: 'socket',
              url: url,
              protocols: protocols,
              request: req
            });
          }
          return req;
        };
        try {
          extendNative(window.WebSocket, _WebSocket);
        } catch (_error) {}
      }
    }

    return RequestIntercept;
  }(Events);

  _intercept = null;

  getIntercept = function getIntercept() {
    if (_intercept == null) {
      _intercept = new RequestIntercept();
    }
    return _intercept;
  };

  shouldIgnoreURL = function shouldIgnoreURL(url) {
    var pattern, _j, _len1, _ref2;
    _ref2 = options.ajax.ignoreURLs;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      pattern = _ref2[_j];
      if (typeof pattern === 'string') {
        if (url.indexOf(pattern) !== -1) {
          return true;
        }
      } else {
        if (pattern.test(url)) {
          return true;
        }
      }
    }
    return false;
  };

  getIntercept().on('request', function (_arg) {
    var after, args, request, type, url;
    type = _arg.type, request = _arg.request, url = _arg.url;
    if (shouldIgnoreURL(url)) {
      return;
    }
    if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
      args = arguments;
      after = options.restartOnRequestAfter || 0;
      if (typeof after === 'boolean') {
        after = 0;
      }
      return setTimeout(function () {
        var stillActive, _j, _len1, _ref2, _ref3, _results;
        if (type === 'socket') {
          stillActive = request.readyState < 2;
        } else {
          stillActive = 0 < (_ref2 = request.readyState) && _ref2 < 4;
        }
        if (stillActive) {
          Pace.restart();
          _ref3 = Pace.sources;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            source = _ref3[_j];
            if (source instanceof AjaxMonitor) {
              source.watch.apply(source, args);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }, after);
    }
  });

  AjaxMonitor = function () {
    function AjaxMonitor() {
      var _this = this;
      this.elements = [];
      getIntercept().on('request', function () {
        return _this.watch.apply(_this, arguments);
      });
    }

    AjaxMonitor.prototype.watch = function (_arg) {
      var request, tracker, type, url;
      type = _arg.type, request = _arg.request, url = _arg.url;
      if (shouldIgnoreURL(url)) {
        return;
      }
      if (type === 'socket') {
        tracker = new SocketRequestTracker(request);
      } else {
        tracker = new XHRRequestTracker(request);
      }
      return this.elements.push(tracker);
    };

    return AjaxMonitor;
  }();

  XHRRequestTracker = function () {
    function XHRRequestTracker(request) {
      var event,
          size,
          _j,
          _len1,
          _onreadystatechange,
          _ref2,
          _this = this;
      this.progress = 0;
      if (window.ProgressEvent != null) {
        size = null;
        request.addEventListener('progress', function (evt) {
          if (evt.lengthComputable) {
            return _this.progress = 100 * evt.loaded / evt.total;
          } else {
            return _this.progress = _this.progress + (100 - _this.progress) / 2;
          }
        }, false);
        _ref2 = ['load', 'abort', 'timeout', 'error'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          event = _ref2[_j];
          request.addEventListener(event, function () {
            return _this.progress = 100;
          }, false);
        }
      } else {
        _onreadystatechange = request.onreadystatechange;
        request.onreadystatechange = function () {
          var _ref3;
          if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
            _this.progress = 100;
          } else if (request.readyState === 3) {
            _this.progress = 50;
          }
          return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
        };
      }
    }

    return XHRRequestTracker;
  }();

  SocketRequestTracker = function () {
    function SocketRequestTracker(request) {
      var event,
          _j,
          _len1,
          _ref2,
          _this = this;
      this.progress = 0;
      _ref2 = ['error', 'open'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        event = _ref2[_j];
        request.addEventListener(event, function () {
          return _this.progress = 100;
        }, false);
      }
    }

    return SocketRequestTracker;
  }();

  ElementMonitor = function () {
    function ElementMonitor(options) {
      var selector, _j, _len1, _ref2;
      if (options == null) {
        options = {};
      }
      this.elements = [];
      if (options.selectors == null) {
        options.selectors = [];
      }
      _ref2 = options.selectors;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        selector = _ref2[_j];
        this.elements.push(new ElementTracker(selector));
      }
    }

    return ElementMonitor;
  }();

  ElementTracker = function () {
    function ElementTracker(selector) {
      this.selector = selector;
      this.progress = 0;
      this.check();
    }

    ElementTracker.prototype.check = function () {
      var _this = this;
      if (document.querySelector(this.selector)) {
        return this.done();
      } else {
        return setTimeout(function () {
          return _this.check();
        }, options.elements.checkInterval);
      }
    };

    ElementTracker.prototype.done = function () {
      return this.progress = 100;
    };

    return ElementTracker;
  }();

  DocumentMonitor = function () {
    DocumentMonitor.prototype.states = {
      loading: 0,
      interactive: 50,
      complete: 100
    };

    function DocumentMonitor() {
      var _onreadystatechange,
          _ref2,
          _this = this;
      this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
      _onreadystatechange = document.onreadystatechange;
      document.onreadystatechange = function () {
        if (_this.states[document.readyState] != null) {
          _this.progress = _this.states[document.readyState];
        }
        return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
      };
    }

    return DocumentMonitor;
  }();

  EventLagMonitor = function () {
    function EventLagMonitor() {
      var avg,
          interval,
          last,
          points,
          samples,
          _this = this;
      this.progress = 0;
      avg = 0;
      samples = [];
      points = 0;
      last = now();
      interval = setInterval(function () {
        var diff;
        diff = now() - last - 50;
        last = now();
        samples.push(diff);
        if (samples.length > options.eventLag.sampleCount) {
          samples.shift();
        }
        avg = avgAmplitude(samples);
        if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
          _this.progress = 100;
          return clearInterval(interval);
        } else {
          return _this.progress = 100 * (3 / (avg + 3));
        }
      }, 50);
    }

    return EventLagMonitor;
  }();

  Scaler = function () {
    function Scaler(source) {
      this.source = source;
      this.last = this.sinceLastUpdate = 0;
      this.rate = options.initialRate;
      this.catchup = 0;
      this.progress = this.lastProgress = 0;
      if (this.source != null) {
        this.progress = result(this.source, 'progress');
      }
    }

    Scaler.prototype.tick = function (frameTime, val) {
      var scaling;
      if (val == null) {
        val = result(this.source, 'progress');
      }
      if (val >= 100) {
        this.done = true;
      }
      if (val === this.last) {
        this.sinceLastUpdate += frameTime;
      } else {
        if (this.sinceLastUpdate) {
          this.rate = (val - this.last) / this.sinceLastUpdate;
        }
        this.catchup = (val - this.progress) / options.catchupTime;
        this.sinceLastUpdate = 0;
        this.last = val;
      }
      if (val > this.progress) {
        this.progress += this.catchup * frameTime;
      }
      scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
      this.progress += scaling * this.rate * frameTime;
      this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
      this.progress = Math.max(0, this.progress);
      this.progress = Math.min(100, this.progress);
      this.lastProgress = this.progress;
      return this.progress;
    };

    return Scaler;
  }();

  sources = null;

  scalers = null;

  bar = null;

  uniScaler = null;

  animation = null;

  cancelAnimation = null;

  Pace.running = false;

  handlePushState = function handlePushState() {
    if (options.restartOnPushState) {
      return Pace.restart();
    }
  };

  if (window.history.pushState != null) {
    _pushState = window.history.pushState;
    window.history.pushState = function () {
      handlePushState();
      return _pushState.apply(window.history, arguments);
    };
  }

  if (window.history.replaceState != null) {
    _replaceState = window.history.replaceState;
    window.history.replaceState = function () {
      handlePushState();
      return _replaceState.apply(window.history, arguments);
    };
  }

  SOURCE_KEYS = {
    ajax: AjaxMonitor,
    elements: ElementMonitor,
    document: DocumentMonitor,
    eventLag: EventLagMonitor
  };

  (init = function init() {
    var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
    Pace.sources = sources = [];
    _ref2 = ['ajax', 'elements', 'document', 'eventLag'];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      type = _ref2[_j];
      if (options[type] !== false) {
        sources.push(new SOURCE_KEYS[type](options[type]));
      }
    }
    _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      source = _ref4[_k];
      sources.push(new source(options));
    }
    Pace.bar = bar = new Bar();
    scalers = [];
    return uniScaler = new Scaler();
  })();

  Pace.stop = function () {
    Pace.trigger('stop');
    Pace.running = false;
    bar.destroy();
    cancelAnimation = true;
    if (animation != null) {
      if (typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animation);
      }
      animation = null;
    }
    return init();
  };

  Pace.restart = function () {
    Pace.trigger('restart');
    Pace.stop();
    return Pace.start();
  };

  Pace.go = function () {
    var start;
    Pace.running = true;
    bar.render();
    start = now();
    cancelAnimation = false;
    return animation = runAnimation(function (frameTime, enqueueNextFrame) {
      var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
      remaining = 100 - bar.progress;
      count = sum = 0;
      done = true;
      for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
        source = sources[i];
        scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
        elements = (_ref2 = source.elements) != null ? _ref2 : [source];
        for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
          element = elements[j];
          scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
          done &= scaler.done;
          if (scaler.done) {
            continue;
          }
          count++;
          sum += scaler.tick(frameTime);
        }
      }
      avg = sum / count;
      bar.update(uniScaler.tick(frameTime, avg));
      if (bar.done() || done || cancelAnimation) {
        bar.update(100);
        Pace.trigger('done');
        return setTimeout(function () {
          bar.finish();
          Pace.running = false;
          return Pace.trigger('hide');
        }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
      } else {
        return enqueueNextFrame();
      }
    });
  };

  Pace.start = function (_options) {
    _extend(options, _options);
    Pace.running = true;
    try {
      bar.render();
    } catch (_error) {
      NoTargetError = _error;
    }
    if (!document.querySelector('.pace')) {
      return setTimeout(Pace.start, 50);
    } else {
      Pace.trigger('start');
      return Pace.go();
    }
  };

  if (typeof define === 'function' && define.amd) {
    define(['pace'], function () {
      return Pace;
    });
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    module.exports = Pace;
  } else {
    if (options.startOnPageLoad) {
      Pace.start();
    }
  }
}).call(undefined);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();
})(undefined, function () {
  'use strict';

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  /**
   * Sticky Sidebar JavaScript Plugin.
   * @version 3.3.1
   * @author Ahmed Bouhuolia <a.bouhuolia@gmail.com>
   * @license The MIT License (MIT)
   */
  var StickySidebar = function () {

    // ---------------------------------
    // # Define Constants
    // ---------------------------------
    //
    var EVENT_KEY = '.stickySidebar';
    var DEFAULTS = {

      /**
       * Additional top spacing of the element when it becomes sticky.
       * @type {Numeric|Function}
       */
      topSpacing: 0,

      /**
       * Additional bottom spacing of the element when it becomes sticky.
       * @type {Numeric|Function}
       */
      bottomSpacing: 0,

      /**
       * Container sidebar selector to know what the beginning and end of sticky element.
       * @type {String|False}
       */
      containerSelector: false,

      /**
       * Inner wrapper selector.
       * @type {String}
       */
      innerWrapperSelector: '.inner-wrapper-sticky',

      /**
       * The name of CSS class to apply to elements when they have become stuck.
       * @type {String|False}
       */
      stickyClass: 'is-affixed',

      /**
       * Detect when sidebar and its container change height so re-calculate their dimensions.
       * @type {Boolean}
       */
      resizeSensor: true,

      /**
       * The sidebar returns to its normal position if its width below this value.
       * @type {Numeric}
       */
      minWidth: false
    };

    // ---------------------------------
    // # Class Definition
    // ---------------------------------
    //
    /**
     * Sticky Sidebar Class.
     * @public
     */

    var StickySidebar = function () {

      /**
       * Sticky Sidebar Constructor.
       * @constructor
       * @param {HTMLElement|String} sidebar - The sidebar element or sidebar selector.
       * @param {Object} options - The options of sticky sidebar.
       */
      function StickySidebar(sidebar) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, StickySidebar);

        this.options = StickySidebar.extend(DEFAULTS, options);

        // Sidebar element query if there's no one, throw error.
        this.sidebar = 'string' === typeof sidebar ? document.querySelector(sidebar) : sidebar;
        if ('undefined' === typeof this.sidebar) throw new Error("There is no specific sidebar element.");

        this.sidebarInner = false;
        this.container = this.sidebar.parentElement;

        // Current Affix Type of sidebar element.
        this.affixedType = 'STATIC';
        this.direction = 'down';
        this.support = {
          transform: false,
          transform3d: false
        };

        this._initialized = false;
        this._reStyle = false;
        this._breakpoint = false;
        this._resizeListeners = [];

        // Dimensions of sidebar, container and screen viewport.
        this.dimensions = {
          translateY: 0,
          topSpacing: 0,
          lastTopSpacing: 0,
          bottomSpacing: 0,
          lastBottomSpacing: 0,
          sidebarHeight: 0,
          sidebarWidth: 0,
          containerTop: 0,
          containerHeight: 0,
          viewportHeight: 0,
          viewportTop: 0,
          lastViewportTop: 0
        };

        // Bind event handlers for referencability.
        ['handleEvent'].forEach(function (method) {
          _this[method] = _this[method].bind(_this);
        });

        // Initialize sticky sidebar for first time.
        this.initialize();
      }

      /**
       * Initializes the sticky sidebar by adding inner wrapper, define its container, 
       * min-width breakpoint, calculating dimensions, adding helper classes and inline style.
       * @private
       */

      _createClass(StickySidebar, [{
        key: 'initialize',
        value: function initialize() {
          var _this2 = this;

          this._setSupportFeatures();

          // Get sticky sidebar inner wrapper, if not found, will create one.
          if (this.options.innerWrapperSelector) {
            this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector);

            if (null === this.sidebarInner) this.sidebarInner = false;
          }

          if (!this.sidebarInner) {
            var wrapper = document.createElement('div');
            wrapper.setAttribute('class', 'inner-wrapper-sticky');
            this.sidebar.appendChild(wrapper);

            while (this.sidebar.firstChild != wrapper) {
              wrapper.appendChild(this.sidebar.firstChild);
            }this.sidebarInner = this.sidebar.querySelector('.inner-wrapper-sticky');
          }

          // Container wrapper of the sidebar.
          if (this.options.containerSelector) {
            var containers = document.querySelectorAll(this.options.containerSelector);
            containers = Array.prototype.slice.call(containers);

            containers.forEach(function (container, item) {
              if (!container.contains(_this2.sidebar)) return;
              _this2.container = container;
            });

            if (!containers.length) throw new Error("The container does not contains on the sidebar.");
          }

          // If top/bottom spacing is not function parse value to integer.
          if ('function' !== typeof this.options.topSpacing) this.options.topSpacing = parseInt(this.options.topSpacing) || 0;

          if ('function' !== typeof this.options.bottomSpacing) this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0;

          // Breakdown sticky sidebar if screen width below `options.minWidth`.
          this._widthBreakpoint();

          // Calculate dimensions of sidebar, container and viewport.
          this.calcDimensions();

          // Affix sidebar in proper position.
          this.stickyPosition();

          // Bind all events.
          this.bindEvents();

          // Inform other properties the sticky sidebar is initialized.
          this._initialized = true;
        }

        /**
         * Bind all events of sticky sidebar plugin.
         * @protected
         */

      }, {
        key: 'bindEvents',
        value: function bindEvents() {
          window.addEventListener('resize', this, { passive: true, capture: false });
          window.addEventListener('scroll', this, { passive: true, capture: false });

          this.sidebar.addEventListener('update' + EVENT_KEY, this);

          if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {
            new ResizeSensor(this.sidebarInner, this.handleEvent);
            new ResizeSensor(this.container, this.handleEvent);
          }
        }

        /**
         * Handles all events of the plugin.
         * @param {Object} event - Event object passed from listener.
         */

      }, {
        key: 'handleEvent',
        value: function handleEvent(event) {
          this.updateSticky(event);
        }

        /**
         * Calculates dimensions of sidebar, container and screen viewpoint
         * @public
         */

      }, {
        key: 'calcDimensions',
        value: function calcDimensions() {
          if (this._breakpoint) return;
          var dims = this.dimensions;

          // Container of sticky sidebar dimensions.
          dims.containerTop = StickySidebar.offsetRelative(this.container).top;
          dims.containerHeight = this.container.clientHeight;
          dims.containerBottom = dims.containerTop + dims.containerHeight;

          // Sidebar dimensions.
          dims.sidebarHeight = this.sidebarInner.offsetHeight;
          dims.sidebarWidth = this.sidebar.offsetWidth;

          // Screen viewport dimensions.
          dims.viewportHeight = window.innerHeight;

          this._calcDimensionsWithScroll();
        }

        /**
         * Some dimensions values need to be up-to-date when scrolling the page.
         * @private
         */

      }, {
        key: '_calcDimensionsWithScroll',
        value: function _calcDimensionsWithScroll() {
          var dims = this.dimensions;

          dims.sidebarLeft = StickySidebar.offsetRelative(this.sidebar).left;

          dims.viewportTop = document.documentElement.scrollTop || document.body.scrollTop;
          dims.viewportBottom = dims.viewportTop + dims.viewportHeight;
          dims.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft;

          dims.topSpacing = this.options.topSpacing;
          dims.bottomSpacing = this.options.bottomSpacing;

          if ('function' === typeof dims.topSpacing) dims.topSpacing = parseInt(dims.topSpacing(this.sidebar)) || 0;

          if ('function' === typeof dims.bottomSpacing) dims.bottomSpacing = parseInt(dims.bottomSpacing(this.sidebar)) || 0;

          if ('VIEWPORT-TOP' === this.affixedType) {
            // Adjust translate Y in the case decrease top spacing value.
            if (dims.topSpacing < dims.lastTopSpacing) {
              dims.translateY += dims.lastTopSpacing - dims.topSpacing;
              this._reStyle = true;
            }
          } else if ('VIEWPORT-BOTTOM' === this.affixedType) {
            // Adjust translate Y in the case decrease bottom spacing value.
            if (dims.bottomSpacing < dims.lastBottomSpacing) {
              dims.translateY += dims.lastBottomSpacing - dims.bottomSpacing;
              this._reStyle = true;
            }
          }

          dims.lastTopSpacing = dims.topSpacing;
          dims.lastBottomSpacing = dims.bottomSpacing;
        }

        /**
         * Determine whether the sidebar is bigger than viewport.
         * @public
         * @return {Boolean}
         */

      }, {
        key: 'isSidebarFitsViewport',
        value: function isSidebarFitsViewport() {
          return this.dimensions.sidebarHeight < this.dimensions.viewportHeight;
        }

        /**
         * Observe browser scrolling direction top and down.
         */

      }, {
        key: 'observeScrollDir',
        value: function observeScrollDir() {
          var dims = this.dimensions;
          if (dims.lastViewportTop === dims.viewportTop) return;

          var furthest = 'down' === this.direction ? Math.min : Math.max;

          // If the browser is scrolling not in the same direction.
          if (dims.viewportTop === furthest(dims.viewportTop, dims.lastViewportTop)) this.direction = 'down' === this.direction ? 'up' : 'down';
        }

        /**
         * Gets affix type of sidebar according to current scrollTop and scrollLeft.
         * Holds all logical affix of the sidebar when scrolling up and down and when sidebar 
         * is bigger than viewport and vice versa.
         * @public
         * @return {String|False} - Proper affix type.
         */

      }, {
        key: 'getAffixType',
        value: function getAffixType() {
          var dims = this.dimensions,
              affixType = false;

          this._calcDimensionsWithScroll();

          var sidebarBottom = dims.sidebarHeight + dims.containerTop;
          var colliderTop = dims.viewportTop + dims.topSpacing;
          var colliderBottom = dims.viewportBottom - dims.bottomSpacing;

          // When browser is scrolling top.
          if ('up' === this.direction) {
            if (colliderTop <= dims.containerTop) {
              dims.translateY = 0;
              affixType = 'STATIC';
            } else if (colliderTop <= dims.translateY + dims.containerTop) {
              dims.translateY = colliderTop - dims.containerTop;
              affixType = 'VIEWPORT-TOP';
            } else if (!this.isSidebarFitsViewport() && dims.containerTop <= colliderTop) {
              affixType = 'VIEWPORT-UNBOTTOM';
            }
            // When browser is scrolling up.
          } else {
            // When sidebar element is not bigger than screen viewport.
            if (this.isSidebarFitsViewport()) {

              if (dims.sidebarHeight + colliderTop >= dims.containerBottom) {
                dims.translateY = dims.containerBottom - sidebarBottom;
                affixType = 'CONTAINER-BOTTOM';
              } else if (colliderTop >= dims.containerTop) {
                dims.translateY = colliderTop - dims.containerTop;
                affixType = 'VIEWPORT-TOP';
              }
              // When sidebar element is bigger than screen viewport.
            } else {

              if (dims.containerBottom <= colliderBottom) {
                dims.translateY = dims.containerBottom - sidebarBottom;
                affixType = 'CONTAINER-BOTTOM';
              } else if (sidebarBottom + dims.translateY <= colliderBottom) {
                dims.translateY = colliderBottom - sidebarBottom;
                affixType = 'VIEWPORT-BOTTOM';
              } else if (dims.containerTop + dims.translateY <= colliderTop) {
                affixType = 'VIEWPORT-UNBOTTOM';
              }
            }
          }

          // Make sure the translate Y is not bigger than container height.
          dims.translateY = Math.max(0, dims.translateY);
          dims.translateY = Math.min(dims.containerHeight, dims.translateY);

          dims.lastViewportTop = dims.viewportTop;
          return affixType;
        }

        /**
         * Gets inline style of sticky sidebar wrapper and inner wrapper according 
         * to its affix type.
         * @private
         * @param {String} affixType - Affix type of sticky sidebar.
         * @return {Object}
         */

      }, {
        key: '_getStyle',
        value: function _getStyle(affixType) {
          if ('undefined' === typeof affixType) return;

          var style = { inner: {}, outer: {} };
          var dims = this.dimensions;

          switch (affixType) {
            case 'VIEWPORT-TOP':
              style.inner = { position: 'fixed', top: dims.topSpacing,
                left: dims.sidebarLeft - dims.viewportLeft, width: dims.sidebarWidth };
              break;
            case 'VIEWPORT-BOTTOM':
              style.inner = { position: 'fixed', top: 'auto', left: dims.sidebarLeft,
                bottom: dims.bottomSpacing, width: dims.sidebarWidth };
              break;
            case 'CONTAINER-BOTTOM':
            case 'VIEWPORT-UNBOTTOM':
              var translate = this._getTranslate(0, dims.translateY + 'px');

              if (translate) style.inner = { transform: translate };else style.inner = { position: 'absolute', top: dims.translateY, width: dims.sidebarWidth };
              break;
          }

          switch (affixType) {
            case 'VIEWPORT-TOP':
            case 'VIEWPORT-BOTTOM':
            case 'VIEWPORT-UNBOTTOM':
            case 'CONTAINER-BOTTOM':
              style.outer = { height: dims.sidebarHeight, position: 'relative' };
              break;
          }

          style.outer = StickySidebar.extend({ height: '', position: '' }, style.outer);
          style.inner = StickySidebar.extend({ position: 'relative', top: '', left: '',
            bottom: '', width: '', transform: this._getTranslate() }, style.inner);

          return style;
        }

        /**
         * Cause the sidebar to be sticky according to affix type by adding inline
         * style, adding helper class and trigger events.
         * @function
         * @protected
         * @param {string} force - Update sticky sidebar position by force.
         */

      }, {
        key: 'stickyPosition',
        value: function stickyPosition(force) {
          if (this._breakpoint) return;

          force = this._reStyle || force || false;

          var affixType = this.getAffixType();
          var style = this._getStyle(affixType);

          if ((this.affixedType != affixType || force) && affixType) {
            var affixEvent = 'affix.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
            StickySidebar.eventTrigger(this.sidebar, affixEvent);

            if ('STATIC' === affixType) StickySidebar.removeClass(this.sidebar, this.options.stickyClass);else StickySidebar.addClass(this.sidebar, this.options.stickyClass);

            for (var key in style.outer) {
              this.sidebar.style[key] = style.outer[key];
            }

            for (var _key in style.inner) {
              var _unit2 = 'number' === typeof style.inner[_key] ? 'px' : '';
              this.sidebarInner.style[_key] = style.inner[_key] + _unit2;
            }

            var affixedEvent = 'affixed.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
            StickySidebar.eventTrigger(this.sidebar, affixedEvent);
          } else {
            if (this._initialized) this.sidebarInner.style.left = style.inner.left;
          }

          this.affixedType = affixType;
        }

        /**
         * Breakdown sticky sidebar when window width is below `options.minWidth` value.
         * @protected
         */

      }, {
        key: '_widthBreakpoint',
        value: function _widthBreakpoint() {

          if (window.innerWidth <= this.options.minWidth) {
            this._breakpoint = true;
            this.affixedType = 'STATIC';

            this.sidebar.removeAttribute('style');
            StickySidebar.removeClass(this.sidebar, this.options.stickyClass);
            this.sidebarInner.removeAttribute('style');
          } else {
            this._breakpoint = false;
          }
        }

        /**
         * Switches between functions stack for each event type, if there's no 
         * event, it will re-initialize sticky sidebar.
         * @public
         */

      }, {
        key: 'updateSticky',
        value: function updateSticky() {
          var _this3 = this;

          var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (this._running) return;
          this._running = true;

          (function (eventType) {

            requestAnimationFrame(function () {
              switch (eventType) {
                // When browser is scrolling and re-calculate just dimensions
                // within scroll. 
                case 'scroll':
                  _this3._calcDimensionsWithScroll();
                  _this3.observeScrollDir();
                  _this3.stickyPosition();
                  break;

                // When browser is resizing or there's no event, observe width
                // breakpoint and re-calculate dimensions.
                case 'resize':
                default:
                  _this3._widthBreakpoint();
                  _this3.calcDimensions();
                  _this3.stickyPosition(true);
                  break;
              }
              _this3._running = false;
            });
          })(event.type);
        }

        /**
         * Set browser support features to the public property.
         * @private
         */

      }, {
        key: '_setSupportFeatures',
        value: function _setSupportFeatures() {
          var support = this.support;

          support.transform = StickySidebar.supportTransform();
          support.transform3d = StickySidebar.supportTransform(true);
        }

        /**
         * Get translate value, if the browser supports transfrom3d, it will adopt it.
         * and the same with translate. if browser doesn't support both return false.
         * @param {Number} y - Value of Y-axis.
         * @param {Number} x - Value of X-axis.
         * @param {Number} z - Value of Z-axis.
         * @return {String|False}
         */

      }, {
        key: '_getTranslate',
        value: function _getTranslate() {
          var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (this.support.transform3d) return 'translate3d(' + y + ', ' + x + ', ' + z + ')';else if (this.support.translate) return 'translate(' + y + ', ' + x + ')';else return false;
        }

        /**
         * Destroy sticky sidebar plugin.
         * @public
         */

      }, {
        key: 'destroy',
        value: function destroy() {
          window.removeEventListener('resize', this, { caption: false });
          window.removeEventListener('scroll', this, { caption: false });

          this.sidebar.classList.remove(this.options.stickyClass);
          this.sidebar.style.minHeight = '';

          this.sidebar.removeEventListener('update' + EVENT_KEY, this);

          var styleReset = { inner: {}, outer: {} };

          styleReset.inner = { position: '', top: '', left: '', bottom: '', width: '', transform: '' };
          styleReset.outer = { height: '', position: '' };

          for (var key in styleReset.outer) {
            this.sidebar.style[key] = styleReset.outer[key];
          }for (var _key2 in styleReset.inner) {
            this.sidebarInner.style[_key2] = styleReset.inner[_key2];
          }if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {
            ResizeSensor.detach(this.sidebarInner, this.handleEvent);
            ResizeSensor.detach(this.container, this.handleEvent);
          }
        }

        /**
         * Determine if the browser supports CSS transform feature.
         * @function
         * @static
         * @param {Boolean} transform3d - Detect transform with translate3d.
         * @return {String}
         */

      }], [{
        key: 'supportTransform',
        value: function supportTransform(transform3d) {
          var result = false,
              property = transform3d ? 'perspective' : 'transform',
              upper = property.charAt(0).toUpperCase() + property.slice(1),
              prefixes = ['Webkit', 'Moz', 'O', 'ms'],
              support = document.createElement('support'),
              style = support.style;

          (property + ' ' + prefixes.join(upper + ' ') + upper).split(' ').forEach(function (property, i) {
            if (style[property] !== undefined) {
              result = property;
              return false;
            }
          });
          return result;
        }

        /**
         * Trigger custom event.
         * @static
         * @param {DOMObject} element - Target element on the DOM.
         * @param {String} eventName - Event name.
         * @param {Object} data - 
         */

      }, {
        key: 'eventTrigger',
        value: function eventTrigger(element, eventName, data) {
          try {
            var event = new CustomEvent(eventName, { detail: data });
          } catch (e) {
            var event = document.createEvent('CustomEvent');
            event.initCustomEvent(eventName, true, true, data);
          }
          element.dispatchEvent(event);
        }

        /**
         * Extend options object with defaults.
         * @function
         * @static
         */

      }, {
        key: 'extend',
        value: function extend(defaults, options) {
          var results = {};
          for (var key in defaults) {
            if ('undefined' !== typeof options[key]) results[key] = options[key];else results[key] = defaults[key];
          }
          return results;
        }

        /**
         * Get current coordinates left and top of specific element.
         * @static
         */

      }, {
        key: 'offsetRelative',
        value: function offsetRelative(element) {
          var result = { left: 0, top: 0 };

          do {
            var offsetTop = element.offsetTop;
            var offsetLeft = element.offsetLeft;

            if (!isNaN(offsetTop)) result.top += offsetTop;

            if (!isNaN(offsetLeft)) result.left += offsetLeft;

            element = 'BODY' === element.tagName ? element.parentElement : element.offsetParent;
          } while (element);
          return result;
        }

        /**
         * Add specific class name to specific element.
         * @static 
         * @param {ObjectDOM} element 
         * @param {String} className 
         */

      }, {
        key: 'addClass',
        value: function addClass(element, className) {
          if (!StickySidebar.hasClass(element, className)) {
            if (element.classList) element.classList.add(className);else element.className += ' ' + className;
          }
        }

        /**
         * Remove specific class name to specific element
         * @static
         * @param {ObjectDOM} element 
         * @param {String} className 
         */

      }, {
        key: 'removeClass',
        value: function removeClass(element, className) {
          if (StickySidebar.hasClass(element, className)) {
            if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
          }
        }

        /**
         * Determine weather the element has specific class name.
         * @static
         * @param {ObjectDOM} element 
         * @param {String} className 
         */

      }, {
        key: 'hasClass',
        value: function hasClass(element, className) {
          if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
      }]);

      return StickySidebar;
    }();

    return StickySidebar;
  }();

  // Global
  // -------------------------
  window.StickySidebar = StickySidebar;

  (function () {
    if ('undefined' === typeof window) return;

    var plugin = window.$ || window.jQuery || window.Zepto;
    var DATA_NAMESPACE = 'stickySidebar';

    // Make sure the site has jquery or zepto plugin.
    if (plugin) {
      /**
       * Sticky Sidebar Plugin Defintion.
       * @param {Object|String} - config
       */
      var _jQueryPlugin = function _jQueryPlugin(config) {
        return this.each(function () {
          var $this = plugin(this),
              data = plugin(this).data(DATA_NAMESPACE);

          if (!data) {
            data = new StickySidebar(this, (typeof config === 'undefined' ? 'undefined' : _typeof(config)) == 'object' && config);
            $this.data(DATA_NAMESPACE, data);
          }

          if ('string' === typeof config) {
            if (data[config] === undefined && ['destroy', 'updateSticky'].indexOf(config) === -1) throw new Error('No method named "' + config + '"');

            data[config]();
          }
        });
      };

      plugin.fn.stickySidebar = _jQueryPlugin;
      plugin.fn.stickySidebar.Constructor = StickySidebar;

      var old = plugin.fn.stickySidebar;

      /**
       * Sticky Sidebar No Conflict.
       */
      plugin.fn.stickySidebar.noConflict = function () {
        plugin.fn.stickySidebar = old;
        return this;
      };
    }
  })();
});

//# sourceMappingURL=jquery.sticky-sidebar.js.map
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
* TableSorter (FORK) 2.18.3 min - Client-side table sorting with ease!
* Copyright (c) 2007 Christian Bach; fork maintained by Rob Garrison
*/
!function (h) {
  h.extend({ tablesorter: new function () {
      function f() {
        var b = arguments[0],
            a = 1 < arguments.length ? Array.prototype.slice.call(arguments) : b;if ("undefined" !== typeof console && "undefined" !== typeof console.log) console[/error/i.test(b) ? "error" : /warn/i.test(b) ? "warn" : "log"](a);else alert(a);
      }function u(b, a) {
        f(b + " (" + (new Date().getTime() - a.getTime()) + "ms)");
      }function m(b) {
        for (var a in b) {
          return !1;
        }return !0;
      }function t(b, a, c) {
        if (!a) return "";var e,
            d = b.config,
            l = d.textExtraction || "",
            f = "",
            f = "basic" === l ? h(a).attr(d.textAttribute) || a.textContent || a.innerText || h(a).text() || "" : "function" === typeof l ? l(a, b, c) : "function" === typeof (e = g.getColumnData(b, l, c)) ? e(a, b, c) : a.textContent || a.innerText || h(a).text() || "";return h.trim(f);
      }function q(b) {
        var a,
            c,
            e = b.config,
            d = e.$tbodies = e.$table.children("tbody:not(." + e.cssInfoBlock + ")"),
            l,
            v,
            k,
            n,
            p,
            w,
            m,
            r,
            s,
            D = 0,
            y = "",
            z = d.length;if (0 === z) return e.debug ? f("Warning: *Empty table!* Not building a parser cache") : "";e.debug && (s = new Date(), f("Detecting parsers for each column"));a = [];for (c = []; D < z;) {
          l = d[D].rows;if (l[D]) for (v = e.columns, k = 0; k < v; k++) {
            n = e.$headers.filter('[data-column="' + k + '"]:last');p = g.getColumnData(b, e.headers, k);r = g.getParserById(g.getData(n, p, "extractor"));m = g.getParserById(g.getData(n, p, "sorter"));w = "false" === g.getData(n, p, "parser");e.empties[k] = (g.getData(n, p, "empty") || e.emptyTo || (e.emptyToBottom ? "bottom" : "top")).toLowerCase();e.strings[k] = (g.getData(n, p, "string") || e.stringTo || "max").toLowerCase();w && (m = g.getParserById("no-parser"));r || (r = !1);if (!m) a: {
              n = b;p = l;w = -1;m = k;for (var C = void 0, L = void 0, M = g.parsers.length, x = !1, A = "", C = !0; "" === A && C;) {
                w++, p[w] ? (x = p[w].cells[m], A = t(n, x, m), L = h(x), n.config.debug && f("Checking if value was empty on row " + w + ", column: " + m + ': "' + A + '"')) : C = !1;
              }for (; 0 <= --M;) {
                if ((C = g.parsers[M]) && "text" !== C.id && C.is && C.is(A, n, x, L)) {
                  m = C;break a;
                }
              }m = g.getParserById("text");
            }e.debug && (y += "column:" + k + "; extractor:" + r.id + "; parser:" + m.id + "; string:" + e.strings[k] + "; empty: " + e.empties[k] + "\n");c[k] = m;a[k] = r;
          }D += c.length ? z : 1;
        }e.debug && (f(y ? y : "No parsers detected"), u("Completed detecting parsers", s));e.parsers = c;e.extractors = a;
      }function z(b) {
        var a,
            c,
            e,
            d,
            l,
            v,
            k,
            n,
            p,
            m,
            B,
            r = b.config,
            s = r.$table.children("tbody"),
            q = r.extractors,
            y = r.parsers;r.cache = {};r.totalRows = 0;if (!y) return r.debug ? f("Warning: *Empty table!* Not building a cache") : "";r.debug && (n = new Date());r.showProcessing && g.isProcessing(b, !0);for (l = 0; l < s.length; l++) {
          if (B = [], a = r.cache[l] = { normalized: [] }, !s.eq(l).hasClass(r.cssInfoBlock)) {
            p = s[l] && s[l].rows.length || 0;for (e = 0; e < p; ++e) {
              if (m = { child: [] }, v = h(s[l].rows[e]), k = [], v.hasClass(r.cssChildRow) && 0 !== e) c = a.normalized.length - 1, a.normalized[c][r.columns].$row = a.normalized[c][r.columns].$row.add(v), v.prev().hasClass(r.cssChildRow) || v.prev().addClass(g.css.cssHasChild), m.child[c] = h.trim(v[0].textContent || v[0].innerText || v.text() || "");else {
                m.$row = v;m.order = e;for (d = 0; d < r.columns; ++d) {
                  "undefined" === typeof y[d] ? r.debug && f("No parser found for cell:", v[0].cells[d], "does it have a header?") : (c = t(b, v[0].cells[d], d), c = "undefined" === typeof q[d].id ? c : q[d].format(c, b, v[0].cells[d], d), c = "no-parser" === y[d].id ? "" : y[d].format(c, b, v[0].cells[d], d), k.push(r.ignoreCase && "string" === typeof c ? c.toLowerCase() : c), "numeric" === (y[d].type || "").toLowerCase() && (B[d] = Math.max(Math.abs(c) || 0, B[d] || 0)));
                }k[r.columns] = m;a.normalized.push(k);
              }
            }a.colMax = B;r.totalRows += a.normalized.length;
          }
        }r.showProcessing && g.isProcessing(b);r.debug && u("Building cache for " + p + " rows", n);
      }function A(b, a) {
        var c = b.config,
            e = c.widgetOptions,
            d = b.tBodies,
            l = [],
            f = c.cache,
            k,
            n,
            p,
            w,
            q,
            r;if (m(f)) return c.appender ? c.appender(b, l) : b.isUpdating ? c.$table.trigger("updateComplete", b) : "";c.debug && (r = new Date());for (q = 0; q < d.length; q++) {
          if (k = h(d[q]), k.length && !k.hasClass(c.cssInfoBlock)) {
            p = g.processTbody(b, k, !0);k = f[q].normalized;n = k.length;for (w = 0; w < n; w++) {
              l.push(k[w][c.columns].$row), c.appender && (!c.pager || c.pager.removeRows && e.pager_removeRows || c.pager.ajax) || p.append(k[w][c.columns].$row);
            }g.processTbody(b, p, !1);
          }
        }c.appender && c.appender(b, l);c.debug && u("Rebuilt table", r);a || c.appender || g.applyWidget(b);b.isUpdating && c.$table.trigger("updateComplete", b);
      }function F(b) {
        return (/^d/i.test(b) || 1 === b
        );
      }function E(b) {
        var a,
            c,
            e,
            d,
            l,
            v,
            k,
            n = b.config;n.headerList = [];n.headerContent = [];n.debug && (k = new Date());n.columns = g.computeColumnIndex(n.$table.children("thead, tfoot").children("tr"));d = n.cssIcon ? '<i class="' + (n.cssIcon === g.css.icon ? g.css.icon : n.cssIcon + " " + g.css.icon) + '"></i>' : "";n.$headers = h(b).find(n.selectorHeaders).each(function (k) {
          c = h(this);a = g.getColumnData(b, n.headers, k, !0);n.headerContent[k] = h(this).html();"" !== n.headerTemplate && (l = n.headerTemplate.replace(/\{content\}/g, h(this).html()).replace(/\{icon\}/g, d), n.onRenderTemplate && (e = n.onRenderTemplate.apply(c, [k, l])) && "string" === typeof e && (l = e), h(this).html('<div class="' + g.css.headerIn + '">' + l + "</div>"));n.onRenderHeader && n.onRenderHeader.apply(c, [k, n, n.$table]);this.column = parseInt(h(this).attr("data-column"), 10);this.order = F(g.getData(c, a, "sortInitialOrder") || n.sortInitialOrder) ? [1, 0, 2] : [0, 1, 2];this.count = -1;this.lockedOrder = !1;v = g.getData(c, a, "lockedOrder") || !1;"undefined" !== typeof v && !1 !== v && (this.order = this.lockedOrder = F(v) ? [1, 1, 1] : [0, 0, 0]);c.addClass(g.css.header + " " + n.cssHeader);n.headerList[k] = this;c.parent().addClass(g.css.headerRow + " " + n.cssHeaderRow).attr("role", "row");n.tabIndex && c.attr("tabindex", 0);
        }).attr({ scope: "col", role: "columnheader" });H(b);n.debug && (u("Built headers:", k), f(n.$headers));
      }function I(b, a, c) {
        var e = b.config;e.$table.find(e.selectorRemove).remove();q(b);z(b);J(e.$table, a, c);
      }function H(b) {
        var a,
            c,
            e,
            d = b.config;d.$headers.each(function (l, f) {
          c = h(f);e = g.getColumnData(b, d.headers, l, !0);a = "false" === g.getData(f, e, "sorter") || "false" === g.getData(f, e, "parser");f.sortDisabled = a;c[a ? "addClass" : "removeClass"]("sorter-false").attr("aria-disabled", "" + a);b.id && (a ? c.removeAttr("aria-controls") : c.attr("aria-controls", b.id));
        });
      }function G(b) {
        var a,
            c,
            e = b.config,
            d = e.sortList,
            l = d.length,
            f = g.css.sortNone + " " + e.cssNone,
            k = [g.css.sortAsc + " " + e.cssAsc, g.css.sortDesc + " " + e.cssDesc],
            n = [e.cssIconAsc, e.cssIconDesc, e.cssIconNone],
            p = ["ascending", "descending"],
            m = h(b).find("tfoot tr").children().add(e.$extraHeaders).removeClass(k.join(" "));e.$headers.removeClass(k.join(" ")).addClass(f).attr("aria-sort", "none").find("." + e.cssIcon).removeClass(n.join(" ")).addClass(n[2]);for (a = 0; a < l; a++) {
          if (2 !== d[a][1] && (b = e.$headers.not(".sorter-false").filter('[data-column="' + d[a][0] + '"]' + (1 === l ? ":last" : "")), b.length)) {
            for (c = 0; c < b.length; c++) {
              b[c].sortDisabled || b.eq(c).removeClass(f).addClass(k[d[a][1]]).attr("aria-sort", p[d[a][1]]).find("." + e.cssIcon).removeClass(n[2]).addClass(n[d[a][1]]);
            }m.length && m.filter('[data-column="' + d[a][0] + '"]').removeClass(f).addClass(k[d[a][1]]);
          }
        }e.$headers.not(".sorter-false").each(function () {
          var b = h(this),
              a = this.order[(this.count + 1) % (e.sortReset ? 3 : 2)],
              a = b.text() + ": " + g.language[b.hasClass(g.css.sortAsc) ? "sortAsc" : b.hasClass(g.css.sortDesc) ? "sortDesc" : "sortNone"] + g.language[0 === a ? "nextAsc" : 1 === a ? "nextDesc" : "nextNone"];b.attr("aria-label", a);
        });
      }function Q(b) {
        var a,
            c,
            e = b.config;e.widthFixed && 0 === e.$table.children("colgroup").length && (a = h("<colgroup>"), c = h(b).width(), h(b.tBodies).not("." + e.cssInfoBlock).find("tr:first").children(":visible").each(function () {
          a.append(h("<col>").css("width", parseInt(h(this).width() / c * 1E3, 10) / 10 + "%"));
        }), e.$table.prepend(a));
      }function R(b, a) {
        var c,
            e,
            d,
            l,
            g,
            k = b.config,
            f = a || k.sortList;k.sortList = [];h.each(f, function (b, a) {
          l = parseInt(a[0], 10);if (d = k.$headers.filter('[data-column="' + l + '"]:last')[0]) {
            e = (e = ("" + a[1]).match(/^(1|d|s|o|n)/)) ? e[0] : "";switch (e) {case "1":case "d":
                e = 1;break;case "s":
                e = g || 0;break;case "o":
                c = d.order[(g || 0) % (k.sortReset ? 3 : 2)];e = 0 === c ? 1 : 1 === c ? 0 : 2;break;case "n":
                d.count += 1;e = d.order[d.count % (k.sortReset ? 3 : 2)];break;default:
                e = 0;}g = 0 === b ? e : g;c = [l, parseInt(e, 10) || 0];k.sortList.push(c);e = h.inArray(c[1], d.order);d.count = 0 <= e ? e : c[1] % (k.sortReset ? 3 : 2);
          }
        });
      }function S(b, a) {
        return b && b[a] ? b[a].type || "" : "";
      }function N(b, a, c) {
        if (b.isUpdating) return setTimeout(function () {
          N(b, a, c);
        }, 50);var e,
            d,
            l,
            f,
            k = b.config,
            n = !c[k.sortMultiSortKey],
            p = k.$table;p.trigger("sortStart", b);a.count = c[k.sortResetKey] ? 2 : (a.count + 1) % (k.sortReset ? 3 : 2);k.sortRestart && (d = a, k.$headers.each(function () {
          this === d || !n && h(this).is("." + g.css.sortDesc + ",." + g.css.sortAsc) || (this.count = -1);
        }));d = parseInt(h(a).attr("data-column"), 10);if (n) {
          k.sortList = [];if (null !== k.sortForce) for (e = k.sortForce, l = 0; l < e.length; l++) {
            e[l][0] !== d && k.sortList.push(e[l]);
          }e = a.order[a.count];if (2 > e && (k.sortList.push([d, e]), 1 < a.colSpan)) for (l = 1; l < a.colSpan; l++) {
            k.sortList.push([d + l, e]);
          }
        } else {
          if (k.sortAppend && 1 < k.sortList.length) for (l = 0; l < k.sortAppend.length; l++) {
            f = g.isValueInArray(k.sortAppend[l][0], k.sortList), 0 <= f && k.sortList.splice(f, 1);
          }if (0 <= g.isValueInArray(d, k.sortList)) for (l = 0; l < k.sortList.length; l++) {
            f = k.sortList[l], e = k.$headers.filter('[data-column="' + f[0] + '"]:last')[0], f[0] === d && (f[1] = e.order[a.count], 2 === f[1] && (k.sortList.splice(l, 1), e.count = -1));
          } else if (e = a.order[a.count], 2 > e && (k.sortList.push([d, e]), 1 < a.colSpan)) for (l = 1; l < a.colSpan; l++) {
            k.sortList.push([d + l, e]);
          }
        }if (null !== k.sortAppend) for (e = k.sortAppend, l = 0; l < e.length; l++) {
          e[l][0] !== d && k.sortList.push(e[l]);
        }p.trigger("sortBegin", b);setTimeout(function () {
          G(b);K(b);A(b);p.trigger("sortEnd", b);
        }, 1);
      }function K(b) {
        var a,
            c,
            e,
            d,
            l,
            f,
            k,
            h,
            p,
            w,
            q,
            r = 0,
            s = b.config,
            t = s.textSorter || "",
            y = s.sortList,
            x = y.length,
            z = b.tBodies.length;if (!s.serverSideSorting && !m(s.cache)) {
          s.debug && (l = new Date());for (c = 0; c < z; c++) {
            f = s.cache[c].colMax, k = s.cache[c].normalized, k.sort(function (c, l) {
              for (a = 0; a < x; a++) {
                d = y[a][0];h = y[a][1];r = 0 === h;if (s.sortStable && c[d] === l[d] && 1 === x) break;(e = /n/i.test(S(s.parsers, d))) && s.strings[d] ? (e = "boolean" === typeof s.string[s.strings[d]] ? (r ? 1 : -1) * (s.string[s.strings[d]] ? -1 : 1) : s.strings[d] ? s.string[s.strings[d]] || 0 : 0, p = s.numberSorter ? s.numberSorter(c[d], l[d], r, f[d], b) : g["sortNumeric" + (r ? "Asc" : "Desc")](c[d], l[d], e, f[d], d, b)) : (w = r ? c : l, q = r ? l : c, p = "function" === typeof t ? t(w[d], q[d], r, d, b) : "object" === (typeof t === "undefined" ? "undefined" : _typeof(t)) && t.hasOwnProperty(d) ? t[d](w[d], q[d], r, d, b) : g["sortNatural" + (r ? "Asc" : "Desc")](c[d], l[d], d, b, s));if (p) return p;
              }return c[s.columns].order - l[s.columns].order;
            });
          }s.debug && u("Sorting on " + y.toString() + " and dir " + h + " time", l);
        }
      }function O(b, a) {
        var c = b[0];c.isUpdating && b.trigger("updateComplete", c);h.isFunction(a) && a(b[0]);
      }function J(b, a, c) {
        var e = b[0].config.sortList;!1 !== a && !b[0].isProcessing && e.length ? b.trigger("sorton", [e, function () {
          O(b, c);
        }, !0]) : (O(b, c), g.applyWidget(b[0], !1));
      }function P(b) {
        var a = b.config,
            c = a.$table;c.unbind("sortReset update updateRows updateCell updateAll addRows updateComplete sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave ".split(" ").join(a.namespace + " ")).bind("sortReset" + a.namespace, function (c, d) {
          c.stopPropagation();a.sortList = [];G(b);K(b);A(b);h.isFunction(d) && d(b);
        }).bind("updateAll" + a.namespace, function (c, d, l) {
          c.stopPropagation();b.isUpdating = !0;g.refreshWidgets(b, !0, !0);g.restoreHeaders(b);E(b);g.bindEvents(b, a.$headers, !0);P(b);I(b, d, l);
        }).bind("update" + a.namespace + " updateRows" + a.namespace, function (a, c, l) {
          a.stopPropagation();b.isUpdating = !0;H(b);I(b, c, l);
        }).bind("updateCell" + a.namespace, function (e, d, l, g) {
          e.stopPropagation();b.isUpdating = !0;c.find(a.selectorRemove).remove();var k, f, p;f = c.find("tbody");p = h(d);e = f.index(h.fn.closest ? p.closest("tbody") : p.parents("tbody").filter(":first"));k = h.fn.closest ? p.closest("tr") : p.parents("tr").filter(":first");d = p[0];f.length && 0 <= e && (f = f.eq(e).find("tr").index(k), p = p.index(), a.cache[e].normalized[f][a.columns].$row = k, k = "undefined" === typeof a.extractors[p].id ? t(b, d, p) : a.extractors[p].format(t(b, d, p), b, d, p), d = "no-parser" === a.parsers[p].id ? "" : a.parsers[p].format(k, b, d, p), a.cache[e].normalized[f][p] = a.ignoreCase && "string" === typeof d ? d.toLowerCase() : d, "numeric" === (a.parsers[p].type || "").toLowerCase() && (a.cache[e].colMax[p] = Math.max(Math.abs(d) || 0, a.cache[e].colMax[p] || 0)), J(c, l, g));
        }).bind("addRows" + a.namespace, function (e, d, l, g) {
          e.stopPropagation();b.isUpdating = !0;if (m(a.cache)) H(b), I(b, l, g);else {
            d = h(d).attr("role", "row");var k,
                f,
                p,
                u,
                B,
                r = d.filter("tr").length,
                s = c.find("tbody").index(d.parents("tbody").filter(":first"));a.parsers && a.parsers.length || q(b);for (e = 0; e < r; e++) {
              f = d[e].cells.length;B = [];u = { child: [], $row: d.eq(e), order: a.cache[s].normalized.length };for (k = 0; k < f; k++) {
                p = "undefined" === typeof a.extractors[k].id ? t(b, d[e].cells[k], k) : a.extractors[k].format(t(b, d[e].cells[k], k), b, d[e].cells[k], k), p = "no-parser" === a.parsers[k].id ? "" : a.parsers[k].format(p, b, d[e].cells[k], k), B[k] = a.ignoreCase && "string" === typeof p ? p.toLowerCase() : p, "numeric" === (a.parsers[k].type || "").toLowerCase() && (a.cache[s].colMax[k] = Math.max(Math.abs(B[k]) || 0, a.cache[s].colMax[k] || 0));
              }B.push(u);a.cache[s].normalized.push(B);
            }J(c, l, g);
          }
        }).bind("updateComplete" + a.namespace, function () {
          b.isUpdating = !1;
        }).bind("sorton" + a.namespace, function (a, d, l, f) {
          var k = b.config;a.stopPropagation();c.trigger("sortStart", this);R(b, d);G(b);k.delayInit && m(k.cache) && z(b);c.trigger("sortBegin", this);K(b);A(b, f);c.trigger("sortEnd", this);g.applyWidget(b);h.isFunction(l) && l(b);
        }).bind("appendCache" + a.namespace, function (a, c, g) {
          a.stopPropagation();A(b, g);h.isFunction(c) && c(b);
        }).bind("updateCache" + a.namespace, function (c, d) {
          a.parsers && a.parsers.length || q(b);z(b);h.isFunction(d) && d(b);
        }).bind("applyWidgetId" + a.namespace, function (c, d) {
          c.stopPropagation();g.getWidgetById(d).format(b, a, a.widgetOptions);
        }).bind("applyWidgets" + a.namespace, function (a, c) {
          a.stopPropagation();g.applyWidget(b, c);
        }).bind("refreshWidgets" + a.namespace, function (a, c, l) {
          a.stopPropagation();g.refreshWidgets(b, c, l);
        }).bind("destroy" + a.namespace, function (a, c, l) {
          a.stopPropagation();g.destroy(b, c, l);
        }).bind("resetToLoadState" + a.namespace, function () {
          g.refreshWidgets(b, !0, !0);a = h.extend(!0, g.defaults, a.originalSettings);b.hasInitialized = !1;g.setup(b, a);
        });
      }var g = this;g.version = "2.18.3";g.parsers = [];g.widgets = [];g.defaults = { theme: "default", widthFixed: !1, showProcessing: !1, headerTemplate: "{content}", onRenderTemplate: null, onRenderHeader: null, cancelSelection: !0, tabIndex: !0, dateFormat: "mmddyyyy", sortMultiSortKey: "shiftKey", sortResetKey: "ctrlKey", usNumberFormat: !0, delayInit: !1, serverSideSorting: !1, headers: {}, ignoreCase: !0, sortForce: null, sortList: [], sortAppend: null, sortStable: !1, sortInitialOrder: "asc", sortLocaleCompare: !1, sortReset: !1, sortRestart: !1, emptyTo: "bottom", stringTo: "max", textExtraction: "basic", textAttribute: "data-text", textSorter: null, numberSorter: null, widgets: [], widgetOptions: { zebra: ["even", "odd"] }, initWidgets: !0, widgetClass: "widget-{name}", initialized: null, tableClass: "", cssAsc: "", cssDesc: "", cssNone: "", cssHeader: "", cssHeaderRow: "", cssProcessing: "", cssChildRow: "tablesorter-childRow", cssIcon: "tablesorter-icon", cssIconNone: "", cssIconAsc: "", cssIconDesc: "", cssInfoBlock: "tablesorter-infoOnly", cssAllowClicks: "tablesorter-allowClicks", selectorHeaders: "> thead th, > thead td", selectorSort: "th, td", selectorRemove: ".remove-me", debug: !1, headerList: [], empties: {}, strings: {}, parsers: [] };g.css = { table: "tablesorter", cssHasChild: "tablesorter-hasChildRow", childRow: "tablesorter-childRow", header: "tablesorter-header", headerRow: "tablesorter-headerRow", headerIn: "tablesorter-header-inner", icon: "tablesorter-icon", info: "tablesorter-infoOnly", processing: "tablesorter-processing", sortAsc: "tablesorter-headerAsc", sortDesc: "tablesorter-headerDesc", sortNone: "tablesorter-headerUnSorted" };g.language = { sortAsc: "Ascending sort applied, ", sortDesc: "Descending sort applied, ", sortNone: "No sort applied, ", nextAsc: "activate to apply an ascending sort", nextDesc: "activate to apply a descending sort", nextNone: "activate to remove the sort" };g.log = f;g.benchmark = u;g.construct = function (b) {
        return this.each(function () {
          var a = h.extend(!0, {}, g.defaults, b);a.originalSettings = b;!this.hasInitialized && g.buildTable && "TABLE" !== this.tagName ? g.buildTable(this, a) : g.setup(this, a);
        });
      };g.setup = function (b, a) {
        if (!b || !b.tHead || 0 === b.tBodies.length || !0 === b.hasInitialized) return a.debug ? f("ERROR: stopping initialization! No table, thead, tbody or tablesorter has already been initialized") : "";var c = "",
            e = h(b),
            d = h.metadata;b.hasInitialized = !1;b.isProcessing = !0;b.config = a;h.data(b, "tablesorter", a);a.debug && h.data(b, "startoveralltimer", new Date());a.supportsDataObject = function (a) {
          a[0] = parseInt(a[0], 10);return 1 < a[0] || 1 === a[0] && 4 <= parseInt(a[1], 10);
        }(h.fn.jquery.split("."));a.string = { max: 1, min: -1, emptymin: 1, emptymax: -1, zero: 0, none: 0, "null": 0, top: !0, bottom: !1 };a.emptyTo = a.emptyTo.toLowerCase();a.stringTo = a.stringTo.toLowerCase();/tablesorter\-/.test(e.attr("class")) || (c = "" !== a.theme ? " tablesorter-" + a.theme : "");a.table = b;a.$table = e.addClass(g.css.table + " " + a.tableClass + c).attr("role", "grid");a.$headers = e.find(a.selectorHeaders);a.namespace = a.namespace ? "." + a.namespace.replace(/\W/g, "") : ".tablesorter" + Math.random().toString(16).slice(2);a.$table.children().children("tr").attr("role", "row");a.$tbodies = e.children("tbody:not(." + a.cssInfoBlock + ")").attr({ "aria-live": "polite", "aria-relevant": "all" });a.$table.children("caption").length && (c = a.$table.children("caption")[0], c.id || (c.id = a.namespace.slice(1) + "caption"), a.$table.attr("aria-labelledby", c.id));a.widgetInit = {};a.textExtraction = a.$table.attr("data-text-extraction") || a.textExtraction || "basic";E(b);Q(b);q(b);a.totalRows = 0;a.delayInit || z(b);g.bindEvents(b, a.$headers, !0);P(b);a.supportsDataObject && "undefined" !== typeof e.data().sortlist ? a.sortList = e.data().sortlist : d && e.metadata() && e.metadata().sortlist && (a.sortList = e.metadata().sortlist);g.applyWidget(b, !0);0 < a.sortList.length ? e.trigger("sorton", [a.sortList, {}, !a.initWidgets, !0]) : (G(b), a.initWidgets && g.applyWidget(b, !1));a.showProcessing && e.unbind("sortBegin" + a.namespace + " sortEnd" + a.namespace).bind("sortBegin" + a.namespace + " sortEnd" + a.namespace, function (c) {
          clearTimeout(a.processTimer);g.isProcessing(b);"sortBegin" === c.type && (a.processTimer = setTimeout(function () {
            g.isProcessing(b, !0);
          }, 500));
        });b.hasInitialized = !0;b.isProcessing = !1;a.debug && g.benchmark("Overall initialization time", h.data(b, "startoveralltimer"));e.trigger("tablesorter-initialized", b);"function" === typeof a.initialized && a.initialized(b);
      };g.getColumnData = function (b, a, c, e) {
        if ("undefined" !== typeof a && null !== a) {
          b = h(b)[0];var d;b = b.config;if (a[c]) return e ? a[c] : a[b.$headers.index(b.$headers.filter('[data-column="' + c + '"]:last'))];for (d in a) {
            if ("string" === typeof d && (e = b.$headers.filter('[data-column="' + c + '"]:last').filter(d).add(b.$headers.filter('[data-column="' + c + '"]:last').find(d)), e.length)) return a[d];
          }
        }
      };g.computeColumnIndex = function (b) {
        var a = [],
            c = 0,
            e,
            d,
            g,
            f,
            k,
            n,
            p,
            m,
            u,
            r;for (e = 0; e < b.length; e++) {
          for (k = b[e].cells, d = 0; d < k.length; d++) {
            g = k[d];f = h(g);n = g.parentNode.rowIndex;f.index();p = g.rowSpan || 1;m = g.colSpan || 1;"undefined" === typeof a[n] && (a[n] = []);for (g = 0; g < a[n].length + 1; g++) {
              if ("undefined" === typeof a[n][g]) {
                u = g;break;
              }
            }c = Math.max(u, c);f.attr({ "data-column": u });for (g = n; g < n + p; g++) {
              for ("undefined" === typeof a[g] && (a[g] = []), r = a[g], f = u; f < u + m; f++) {
                r[f] = "x";
              }
            }
          }
        }return c + 1;
      };g.isProcessing = function (b, a, c) {
        b = h(b);var e = b[0].config,
            d = c || b.find("." + g.css.header);a ? ("undefined" !== typeof c && 0 < e.sortList.length && (d = d.filter(function () {
          return this.sortDisabled ? !1 : 0 <= g.isValueInArray(parseFloat(h(this).attr("data-column")), e.sortList);
        })), b.add(d).addClass(g.css.processing + " " + e.cssProcessing)) : b.add(d).removeClass(g.css.processing + " " + e.cssProcessing);
      };g.processTbody = function (b, a, c) {
        b = h(b)[0];if (c) return b.isProcessing = !0, a.before('<span class="tablesorter-savemyplace"/>'), c = h.fn.detach ? a.detach() : a.remove();c = h(b).find("span.tablesorter-savemyplace");a.insertAfter(c);c.remove();b.isProcessing = !1;
      };g.clearTableBody = function (b) {
        h(b)[0].config.$tbodies.children().detach();
      };g.bindEvents = function (b, a, c) {
        b = h(b)[0];var e,
            d = b.config;!0 !== c && (d.$extraHeaders = d.$extraHeaders ? d.$extraHeaders.add(a) : a);a.find(d.selectorSort).add(a.filter(d.selectorSort)).unbind(["mousedown", "mouseup", "sort", "keyup", ""].join(d.namespace + " ")).bind(["mousedown", "mouseup", "sort", "keyup", ""].join(d.namespace + " "), function (c, g) {
          var f;f = c.type;if (!(1 !== (c.which || c.button) && !/sort|keyup/.test(f) || "keyup" === f && 13 !== c.which || "mouseup" === f && !0 !== g && 250 < new Date().getTime() - e)) {
            if ("mousedown" === f) return e = new Date().getTime(), /(input|select|button|textarea)/i.test(c.target.tagName) || h(c.target).closest("td,th").hasClass(d.cssAllowClicks) ? "" : !d.cancelSelection;d.delayInit && m(d.cache) && z(b);f = h.fn.closest ? h(this).closest("th, td")[0] : /TH|TD/.test(this.tagName) ? this : h(this).parents("th, td")[0];f = d.$headers[a.index(f)];f.sortDisabled || N(b, f, c);
          }
        });d.cancelSelection && a.attr("unselectable", "on").bind("selectstart", !1).css({ "user-select": "none", MozUserSelect: "none" });
      };g.restoreHeaders = function (b) {
        var a = h(b)[0].config;a.$table.find(a.selectorHeaders).each(function (b) {
          h(this).find("." + g.css.headerIn).length && h(this).html(a.headerContent[b]);
        });
      };g.destroy = function (b, a, c) {
        b = h(b)[0];if (b.hasInitialized) {
          g.refreshWidgets(b, !0, !0);var e = h(b),
              d = b.config,
              f = e.find("thead:first"),
              m = f.find("tr." + g.css.headerRow).removeClass(g.css.headerRow + " " + d.cssHeaderRow),
              k = e.find("tfoot:first > tr").children("th, td");!1 === a && 0 <= h.inArray("uitheme", d.widgets) && (e.trigger("applyWidgetId", ["uitheme"]), e.trigger("applyWidgetId", ["zebra"]));f.find("tr").not(m).remove();e.removeData("tablesorter").unbind("sortReset update updateAll updateRows updateCell addRows updateComplete sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave keypress sortBegin sortEnd resetToLoadState ".split(" ").join(d.namespace + " "));d.$headers.add(k).removeClass([g.css.header, d.cssHeader, d.cssAsc, d.cssDesc, g.css.sortAsc, g.css.sortDesc, g.css.sortNone].join(" ")).removeAttr("data-column").removeAttr("aria-label").attr("aria-disabled", "true");m.find(d.selectorSort).unbind(["mousedown", "mouseup", "keypress", ""].join(d.namespace + " "));g.restoreHeaders(b);e.toggleClass(g.css.table + " " + d.tableClass + " tablesorter-" + d.theme, !1 === a);b.hasInitialized = !1;delete b.config.cache;"function" === typeof c && c(b);
        }
      };g.regex = { chunk: /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, chunks: /(^\\0|\\0$)/, hex: /^0x[0-9a-f]+$/i };g.sortNatural = function (b, a) {
        if (b === a) return 0;var c, e, d, f, h, k;e = g.regex;if (e.hex.test(a)) {
          c = parseInt(b.match(e.hex), 16);d = parseInt(a.match(e.hex), 16);if (c < d) return -1;if (c > d) return 1;
        }c = b.replace(e.chunk, "\\0$1\\0").replace(e.chunks, "").split("\\0");e = a.replace(e.chunk, "\\0$1\\0").replace(e.chunks, "").split("\\0");k = Math.max(c.length, e.length);for (h = 0; h < k; h++) {
          d = isNaN(c[h]) ? c[h] || 0 : parseFloat(c[h]) || 0;f = isNaN(e[h]) ? e[h] || 0 : parseFloat(e[h]) || 0;if (isNaN(d) !== isNaN(f)) return isNaN(d) ? 1 : -1;(typeof d === "undefined" ? "undefined" : _typeof(d)) !== (typeof f === "undefined" ? "undefined" : _typeof(f)) && (d += "", f += "");if (d < f) return -1;if (d > f) return 1;
        }return 0;
      };g.sortNaturalAsc = function (b, a, c, e, d) {
        if (b === a) return 0;c = d.string[d.empties[c] || d.emptyTo];return "" === b && 0 !== c ? "boolean" === typeof c ? c ? -1 : 1 : -c || -1 : "" === a && 0 !== c ? "boolean" === typeof c ? c ? 1 : -1 : c || 1 : g.sortNatural(b, a);
      };g.sortNaturalDesc = function (b, a, c, e, d) {
        if (b === a) return 0;c = d.string[d.empties[c] || d.emptyTo];return "" === b && 0 !== c ? "boolean" === typeof c ? c ? -1 : 1 : c || 1 : "" === a && 0 !== c ? "boolean" === typeof c ? c ? 1 : -1 : -c || -1 : g.sortNatural(a, b);
      };g.sortText = function (b, a) {
        return b > a ? 1 : b < a ? -1 : 0;
      };g.getTextValue = function (b, a, c) {
        if (c) {
          var e = b ? b.length : 0,
              d = c + a;for (c = 0; c < e; c++) {
            d += b.charCodeAt(c);
          }return a * d;
        }return 0;
      };g.sortNumericAsc = function (b, a, c, e, d, f) {
        if (b === a) return 0;f = f.config;d = f.string[f.empties[d] || f.emptyTo];if ("" === b && 0 !== d) return "boolean" === typeof d ? d ? -1 : 1 : -d || -1;if ("" === a && 0 !== d) return "boolean" === typeof d ? d ? 1 : -1 : d || 1;isNaN(b) && (b = g.getTextValue(b, c, e));isNaN(a) && (a = g.getTextValue(a, c, e));return b - a;
      };g.sortNumericDesc = function (b, a, c, e, d, f) {
        if (b === a) return 0;f = f.config;d = f.string[f.empties[d] || f.emptyTo];if ("" === b && 0 !== d) return "boolean" === typeof d ? d ? -1 : 1 : d || 1;if ("" === a && 0 !== d) return "boolean" === typeof d ? d ? 1 : -1 : -d || -1;isNaN(b) && (b = g.getTextValue(b, c, e));isNaN(a) && (a = g.getTextValue(a, c, e));return a - b;
      };g.sortNumeric = function (b, a) {
        return b - a;
      };g.characterEquivalents = { a: "\xE1\xE0\xE2\xE3\xE4\u0105\xE5", A: "\xC1\xC0\xC2\xC3\xC4\u0104\xC5", c: "\xE7\u0107\u010D", C: "\xC7\u0106\u010C", e: "\xE9\xE8\xEA\xEB\u011B\u0119", E: "\xC9\xC8\xCA\xCB\u011A\u0118", i: "\xED\xEC\u0130\xEE\xEF\u0131", I: "\xCD\xCC\u0130\xCE\xCF", o: "\xF3\xF2\xF4\xF5\xF6", O: "\xD3\xD2\xD4\xD5\xD6", ss: "\xDF", SS: "\u1E9E", u: "\xFA\xF9\xFB\xFC\u016F", U: "\xDA\xD9\xDB\xDC\u016E" };g.replaceAccents = function (b) {
        var a,
            c = "[",
            e = g.characterEquivalents;if (!g.characterRegex) {
          g.characterRegexArray = {};for (a in e) {
            "string" === typeof a && (c += e[a], g.characterRegexArray[a] = new RegExp("[" + e[a] + "]", "g"));
          }g.characterRegex = new RegExp(c + "]");
        }if (g.characterRegex.test(b)) for (a in e) {
          "string" === typeof a && (b = b.replace(g.characterRegexArray[a], a));
        }return b;
      };g.isValueInArray = function (b, a) {
        var c,
            e = a.length;for (c = 0; c < e; c++) {
          if (a[c][0] === b) return c;
        }return -1;
      };g.addParser = function (b) {
        var a,
            c = g.parsers.length,
            e = !0;for (a = 0; a < c; a++) {
          g.parsers[a].id.toLowerCase() === b.id.toLowerCase() && (e = !1);
        }e && g.parsers.push(b);
      };g.getParserById = function (b) {
        if ("false" == b) return !1;var a,
            c = g.parsers.length;for (a = 0; a < c; a++) {
          if (g.parsers[a].id.toLowerCase() === b.toString().toLowerCase()) return g.parsers[a];
        }return !1;
      };g.addWidget = function (b) {
        g.widgets.push(b);
      };g.hasWidget = function (b, a) {
        b = h(b);return b.length && b[0].config && b[0].config.widgetInit[a] || !1;
      };g.getWidgetById = function (b) {
        var a,
            c,
            e = g.widgets.length;for (a = 0; a < e; a++) {
          if ((c = g.widgets[a]) && c.hasOwnProperty("id") && c.id.toLowerCase() === b.toLowerCase()) return c;
        }
      };g.applyWidget = function (b, a) {
        b = h(b)[0];var c = b.config,
            e = c.widgetOptions,
            d = " " + c.table.className + " ",
            f = [],
            m,
            k,
            n;!1 !== a && b.hasInitialized && (b.isApplyingWidgets || b.isUpdating) || (c.debug && (m = new Date()), n = new RegExp("\\s" + c.widgetClass.replace(/\{name\}/i, "([\\w-]+)") + "\\s", "g"), d.match(n) && (d = d.match(n)) && h.each(d, function (a, b) {
          c.widgets.push(b.replace(n, "$1"));
        }), c.widgets.length && (b.isApplyingWidgets = !0, c.widgets = h.grep(c.widgets, function (a, b) {
          return h.inArray(a, c.widgets) === b;
        }), h.each(c.widgets || [], function (a, b) {
          (n = g.getWidgetById(b)) && n.id && (n.priority || (n.priority = 10), f[a] = n);
        }), f.sort(function (a, b) {
          return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;
        }), h.each(f, function (d, f) {
          if (f) {
            if (a || !c.widgetInit[f.id]) c.widgetInit[f.id] = !0, f.hasOwnProperty("options") && (e = b.config.widgetOptions = h.extend(!0, {}, f.options, e)), f.hasOwnProperty("init") && (c.debug && (k = new Date()), f.init(b, f, c, e), c.debug && g.benchmark("Initializing " + f.id + " widget", k));!a && f.hasOwnProperty("format") && (c.debug && (k = new Date()), f.format(b, c, e, !1), c.debug && g.benchmark((a ? "Initializing " : "Applying ") + f.id + " widget", k));
          }
        })), setTimeout(function () {
          b.isApplyingWidgets = !1;h.data(b, "lastWidgetApplication", new Date());
        }, 0), c.debug && (d = c.widgets.length, u("Completed " + (!0 === a ? "initializing " : "applying ") + d + " widget" + (1 !== d ? "s" : ""), m)));
      };g.refreshWidgets = function (b, a, c) {
        b = h(b)[0];var e,
            d = b.config,
            l = d.widgets,
            m = g.widgets,
            k = m.length;for (e = 0; e < k; e++) {
          m[e] && m[e].id && (a || 0 > h.inArray(m[e].id, l)) && (d.debug && f('Refeshing widgets: Removing "' + m[e].id + '"'), m[e].hasOwnProperty("remove") && d.widgetInit[m[e].id] && (m[e].remove(b, d, d.widgetOptions), d.widgetInit[m[e].id] = !1));
        }!0 !== c && g.applyWidget(b, a);
      };g.getData = function (b, a, c) {
        var e = "";b = h(b);var d, f;if (!b.length) return "";d = h.metadata ? b.metadata() : !1;f = " " + (b.attr("class") || "");"undefined" !== typeof b.data(c) || "undefined" !== typeof b.data(c.toLowerCase()) ? e += b.data(c) || b.data(c.toLowerCase()) : d && "undefined" !== typeof d[c] ? e += d[c] : a && "undefined" !== typeof a[c] ? e += a[c] : " " !== f && f.match(" " + c + "-") && (e = f.match(new RegExp("\\s" + c + "-([\\w-]+)"))[1] || "");return h.trim(e);
      };g.formatFloat = function (b, a) {
        if ("string" !== typeof b || "" === b) return b;var c;b = (a && a.config ? !1 !== a.config.usNumberFormat : "undefined" !== typeof a ? a : 1) ? b.replace(/,/g, "") : b.replace(/[\s|\.]/g, "").replace(/,/g, ".");/^\s*\([.\d]+\)/.test(b) && (b = b.replace(/^\s*\(([.\d]+)\)/, "-$1"));c = parseFloat(b);return isNaN(c) ? h.trim(b) : c;
      };g.isDigit = function (b) {
        return isNaN(b) ? /^[\-+(]?\d+[)]?$/.test(b.toString().replace(/[,.'"\s]/g, "")) : !0;
      };
    }() });var q = h.tablesorter;h.fn.extend({ tablesorter: q.construct });q.addParser({ id: "no-parser", is: function is() {
      return !1;
    }, format: function format() {
      return "";
    }, type: "text" });q.addParser({ id: "text", is: function is() {
      return !0;
    }, format: function format(f, u) {
      var m = u.config;f && (f = h.trim(m.ignoreCase ? f.toLocaleLowerCase() : f), f = m.sortLocaleCompare ? q.replaceAccents(f) : f);return f;
    }, type: "text" });q.addParser({ id: "digit", is: function is(f) {
      return q.isDigit(f);
    }, format: function format(f, u) {
      var m = q.formatFloat((f || "").replace(/[^\w,. \-()]/g, ""), u);return f && "number" === typeof m ? m : f ? h.trim(f && u.config.ignoreCase ? f.toLocaleLowerCase() : f) : f;
    }, type: "numeric" });q.addParser({ id: "currency", is: function is(f) {
      return (/^\(?\d+[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]|[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]\d+\)?$/.test((f || "").replace(/[+\-,. ]/g, ""))
      );
    }, format: function format(f, u) {
      var m = q.formatFloat((f || "").replace(/[^\w,. \-()]/g, ""), u);return f && "number" === typeof m ? m : f ? h.trim(f && u.config.ignoreCase ? f.toLocaleLowerCase() : f) : f;
    }, type: "numeric" });q.addParser({ id: "url", is: function is(f) {
      return (/^(https?|ftp|file):\/\//.test(f)
      );
    }, format: function format(f) {
      return f ? h.trim(f.replace(/(https?|ftp|file):\/\//, "")) : f;
    }, parsed: !0, type: "text" });q.addParser({ id: "isoDate", is: function is(f) {
      return (/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}/.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date(f.replace(/-/g, "/")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "percent", is: function is(f) {
      return (/(\d\s*?%|%\s*?\d)/.test(f) && 15 > f.length
      );
    }, format: function format(f, h) {
      return f ? q.formatFloat(f.replace(/%/g, ""), h) : f;
    }, type: "numeric" });q.addParser({ id: "image", is: function is(f, h, m, q) {
      return 0 < q.find("img").length;
    }, format: function format(f, u, m) {
      return h(m).find("img").attr(u.config.imgAttr || "alt") || f;
    }, parsed: !0, type: "text" });q.addParser({ id: "usLongDate", is: function is(f) {
      return (/^[A-Z]{3,10}\.?\s+\d{1,2},?\s+(\d{4})(\s+\d{1,2}:\d{2}(:\d{2})?(\s+[AP]M)?)?$/i.test(f) || /^\d{1,2}\s+[A-Z]{3,10}\s+\d{4}/i.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date(f.replace(/(\S)([AP]M)$/i, "$1 $2")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "shortDate", is: function is(f) {
      return (/(^\d{1,2}[\/\s]\d{1,2}[\/\s]\d{4})|(^\d{4}[\/\s]\d{1,2}[\/\s]\d{1,2})/.test((f || "").replace(/\s+/g, " ").replace(/[\-.,]/g, "/"))
      );
    }, format: function format(f, h, m, t) {
      if (f) {
        m = h.config;var x = m.$headers.filter("[data-column=" + t + "]:last");t = x.length && x[0].dateFormat || q.getData(x, q.getColumnData(h, m.headers, t), "dateFormat") || m.dateFormat;h = f.replace(/\s+/g, " ").replace(/[\-.,]/g, "/");"mmddyyyy" === t ? h = h.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$1/$2") : "ddmmyyyy" === t ? h = h.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$2/$1") : "yyyymmdd" === t && (h = h.replace(/(\d{4})[\/\s](\d{1,2})[\/\s](\d{1,2})/, "$1/$2/$3"));h = new Date(h);return h instanceof Date && isFinite(h) ? h.getTime() : f;
      }return f;
    }, type: "numeric" });q.addParser({ id: "time", is: function is(f) {
      return (/^(([0-2]?\d:[0-5]\d)|([0-1]?\d:[0-5]\d\s?([AP]M)))$/i.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date("2000/01/01 " + f.replace(/(\S)([AP]M)$/i, "$1 $2")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "metadata", is: function is() {
      return !1;
    }, format: function format(f, q, m) {
      f = q.config;f = f.parserMetadataName ? f.parserMetadataName : "sortValue";return h(m).metadata()[f];
    }, type: "numeric" });q.addWidget({ id: "zebra", priority: 90, format: function format(f, q, m) {
      var t,
          x,
          z,
          A,
          F = new RegExp(q.cssChildRow, "i"),
          E = q.$tbodies;for (f = 0; f < E.length; f++) {
        z = 0, t = E.eq(f), t = t.children("tr:visible").not(q.selectorRemove), t.each(function () {
          x = h(this);F.test(this.className) || z++;A = 0 === z % 2;x.removeClass(m.zebra[A ? 1 : 0]).addClass(m.zebra[A ? 0 : 1]);
        });
      }
    }, remove: function remove(f, h, m) {
      var t;h = h.$tbodies;var x = (m.zebra || ["even", "odd"]).join(" ");for (m = 0; m < h.length; m++) {
        t = q.processTbody(f, h.eq(m), !0), t.children().removeClass(x), q.processTbody(f, t, !1);
      }
    } });
}(jQuery);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! tableSorter (FORK) 2.16+ widgets - updated 11/7/2014 (v2.18.3)
 *
 * Column Styles
 * Column Filters
 * Column Resizing
 * Sticky Header
 * UI Theme (generalized)
 * Save Sort
 * [ "columns", "filter", "resizable", "stickyHeaders", "uitheme", "saveSort" ]
 */
/*jshint browser:true, jquery:true, unused:false, loopfunc:true */
/*global jQuery: false, localStorage: false */
;(function ($, window) {
	"use strict";

	var ts = $.tablesorter = $.tablesorter || {};

	ts.themes = {
		"bootstrap": {
			table: 'table table-bordered table-striped',
			caption: 'caption',
			header: 'bootstrap-header', // give the header a gradient background
			footerRow: '',
			footerCells: '',
			icons: '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
			sortNone: 'bootstrap-icon-unsorted',
			sortAsc: 'icon-chevron-up glyphicon glyphicon-chevron-up',
			sortDesc: 'icon-chevron-down glyphicon glyphicon-chevron-down',
			active: '', // applied when column is sorted
			hover: '', // use custom css here - bootstrap class may not override it
			filterRow: '', // filter row class
			even: '', // even row zebra striping
			odd: '' // odd row zebra striping
		},
		"jui": {
			table: 'ui-widget ui-widget-content ui-corner-all', // table classes
			caption: 'ui-widget-content',
			header: 'ui-widget-header ui-corner-all ui-state-default', // header classes
			footerRow: '',
			footerCells: '',
			icons: 'ui-icon', // icon class added to the <i> in the header
			sortNone: 'ui-icon-carat-2-n-s',
			sortAsc: 'ui-icon-carat-1-n',
			sortDesc: 'ui-icon-carat-1-s',
			active: 'ui-state-active', // applied when column is sorted
			hover: 'ui-state-hover', // hover class
			filterRow: '',
			even: 'ui-widget-content', // even row zebra striping
			odd: 'ui-state-default' // odd row zebra striping
		}
	};

	$.extend(ts.css, {
		filterRow: 'tablesorter-filter-row', // filter
		filter: 'tablesorter-filter',
		wrapper: 'tablesorter-wrapper', // ui theme & resizable
		resizer: 'tablesorter-resizer', // resizable
		sticky: 'tablesorter-stickyHeader', // stickyHeader
		stickyVis: 'tablesorter-sticky-visible',
		stickyWrap: 'tablesorter-sticky-wrapper'
	});

	// *** Store data in local storage, with a cookie fallback ***
	/* IE7 needs JSON library for JSON.stringify - (http://caniuse.com/#search=json)
    if you need it, then include https://github.com/douglascrockford/JSON-js
 
    $.parseJSON is not available is jQuery versions older than 1.4.1, using older
    versions will only allow storing information for one page at a time
 
    // *** Save data (JSON format only) ***
    // val must be valid JSON... use http://jsonlint.com/ to ensure it is valid
    var val = { "mywidget" : "data1" }; // valid JSON uses double quotes
    // $.tablesorter.storage(table, key, val);
    $.tablesorter.storage(table, 'tablesorter-mywidget', val);
 
    // *** Get data: $.tablesorter.storage(table, key); ***
    v = $.tablesorter.storage(table, 'tablesorter-mywidget');
    // val may be empty, so also check for your data
    val = (v && v.hasOwnProperty('mywidget')) ? v.mywidget : '';
    alert(val); // "data1" if saved, or "" if not
 */
	ts.storage = function (table, key, value, options) {
		table = $(table)[0];
		var cookieIndex,
		    cookies,
		    date,
		    hasLocalStorage = false,
		    values = {},
		    c = table.config,
		    $table = $(table),
		    id = options && options.id || $table.attr(options && options.group || 'data-table-group') || table.id || $('.tablesorter').index($table),
		    url = options && options.url || $table.attr(options && options.page || 'data-table-page') || c && c.fixedUrl || window.location.pathname;
		// https://gist.github.com/paulirish/5558557
		if ("localStorage" in window) {
			try {
				window.localStorage.setItem('_tmptest', 'temp');
				hasLocalStorage = true;
				window.localStorage.removeItem('_tmptest');
			} catch (error) {}
		}
		// *** get value ***
		if ($.parseJSON) {
			if (hasLocalStorage) {
				values = $.parseJSON(localStorage[key] || '{}');
			} else {
				// old browser, using cookies
				cookies = document.cookie.split(/[;\s|=]/);
				// add one to get from the key to the value
				cookieIndex = $.inArray(key, cookies) + 1;
				values = cookieIndex !== 0 ? $.parseJSON(cookies[cookieIndex] || '{}') : {};
			}
		}
		// allow value to be an empty string too
		if ((value || value === '') && window.JSON && JSON.hasOwnProperty('stringify')) {
			// add unique identifiers = url pathname > table ID/index on page > data
			if (!values[url]) {
				values[url] = {};
			}
			values[url][id] = value;
			// *** set value ***
			if (hasLocalStorage) {
				localStorage[key] = JSON.stringify(values);
			} else {
				date = new Date();
				date.setTime(date.getTime() + 31536e+6); // 365 days
				document.cookie = key + '=' + JSON.stringify(values).replace(/\"/g, '\"') + '; expires=' + date.toGMTString() + '; path=/';
			}
		} else {
			return values && values[url] ? values[url][id] : '';
		}
	};

	// Add a resize event to table headers
	// **************************
	ts.addHeaderResizeEvent = function (table, disable, settings) {
		table = $(table)[0]; // make sure we're usig a dom element
		var headers,
		    defaults = {
			timer: 250
		},
		    options = $.extend({}, defaults, settings),
		    c = table.config,
		    wo = c.widgetOptions,
		    checkSizes = function checkSizes(triggerEvent) {
			wo.resize_flag = true;
			headers = [];
			c.$headers.each(function () {
				var $header = $(this),
				    sizes = $header.data('savedSizes') || [0, 0],
				    // fixes #394
				width = this.offsetWidth,
				    height = this.offsetHeight;
				if (width !== sizes[0] || height !== sizes[1]) {
					$header.data('savedSizes', [width, height]);
					headers.push(this);
				}
			});
			if (headers.length && triggerEvent !== false) {
				c.$table.trigger('resize', [headers]);
			}
			wo.resize_flag = false;
		};
		checkSizes(false);
		clearInterval(wo.resize_timer);
		if (disable) {
			wo.resize_flag = false;
			return false;
		}
		wo.resize_timer = setInterval(function () {
			if (wo.resize_flag) {
				return;
			}
			checkSizes();
		}, options.timer);
	};

	// Widget: General UI theme
	// "uitheme" option in "widgetOptions"
	// **************************
	ts.addWidget({
		id: "uitheme",
		priority: 10,
		format: function format(table, c, wo) {
			var i,
			    time,
			    classes,
			    $header,
			    $icon,
			    $tfoot,
			    $h,
			    oldtheme,
			    oldremove,
			    themesAll = ts.themes,
			    $table = c.$table,
			    $headers = c.$headers,
			    theme = c.theme || 'jui',
			    themes = themesAll[theme] || themesAll.jui,
			    remove = [themes.sortNone, themes.sortDesc, themes.sortAsc, themes.active].join(' ');
			if (c.debug) {
				time = new Date();
			}
			// initialization code - run once
			if (!$table.hasClass('tablesorter-' + theme) || c.theme !== c.appliedTheme || !table.hasInitialized) {
				oldtheme = themes[c.appliedTheme] || {};
				oldremove = oldtheme ? [oldtheme.sortNone, oldtheme.sortDesc, oldtheme.sortAsc, oldtheme.active].join(' ') : '';
				if (oldtheme) {
					wo.zebra[0] = wo.zebra[0].replace(' ' + oldtheme.even, '');
					wo.zebra[1] = wo.zebra[1].replace(' ' + oldtheme.odd, '');
				}
				// update zebra stripes
				if (themes.even !== '') {
					wo.zebra[0] += ' ' + themes.even;
				}
				if (themes.odd !== '') {
					wo.zebra[1] += ' ' + themes.odd;
				}
				// add caption style
				$table.children('caption').removeClass(oldtheme.caption).addClass(themes.caption);
				// add table/footer class names
				$tfoot = $table
				// remove other selected themes
				.removeClass(c.appliedTheme ? 'tablesorter-' + (c.appliedTheme || '') : '').addClass('tablesorter-' + theme + ' ' + themes.table) // add theme widget class name
				.children('tfoot');
				if ($tfoot.length) {
					$tfoot
					// if oldtheme.footerRow or oldtheme.footerCells are undefined, all class names are removed
					.children('tr').removeClass(oldtheme.footerRow || '').addClass(themes.footerRow).children('th, td').removeClass(oldtheme.footerCells || '').addClass(themes.footerCells);
				}
				// update header classes
				$headers.add(c.$extraHeaders).removeClass(oldtheme.header + ' ' + oldtheme.hover + ' ' + oldremove).addClass(themes.header).not('.sorter-false').bind('mouseenter.tsuitheme mouseleave.tsuitheme', function (event) {
					// toggleClass with switch added in jQuery 1.3
					$(this)[event.type === 'mouseenter' ? 'addClass' : 'removeClass'](themes.hover);
				});
				if (!$headers.find('.' + ts.css.wrapper).length) {
					// Firefox needs this inner div to position the resizer correctly
					$headers.wrapInner('<div class="' + ts.css.wrapper + '" style="position:relative;height:100%;width:100%"></div>');
				}
				if (c.cssIcon) {
					// if c.cssIcon is '', then no <i> is added to the header
					$headers.find('.' + ts.css.icon).removeClass(oldtheme.icons + ' ' + oldremove).addClass(themes.icons);
				}
				if ($table.hasClass('hasFilters')) {
					$table.children('thead').children('.' + ts.css.filterRow).removeClass(oldtheme.filterRow).addClass(themes.filterRow);
				}
				c.appliedTheme = c.theme;
			}
			for (i = 0; i < c.columns; i++) {
				$header = c.$headers.add(c.$extraHeaders).not('.sorter-false').filter('[data-column="' + i + '"]');
				$icon = ts.css.icon ? $header.find('.' + ts.css.icon) : $header;
				$h = $headers.not('.sorter-false').filter('[data-column="' + i + '"]:last');
				if ($h.length) {
					if ($h[0].sortDisabled) {
						// no sort arrows for disabled columns!
						$header.removeClass(remove);
						$icon.removeClass(remove + ' ' + themes.icons);
					} else {
						classes = $header.hasClass(ts.css.sortAsc) ? themes.sortAsc : $header.hasClass(ts.css.sortDesc) ? themes.sortDesc : $header.hasClass(ts.css.header) ? themes.sortNone : '';
						$header[classes === themes.sortNone ? 'removeClass' : 'addClass'](themes.active);
						$icon.removeClass(remove).addClass(classes);
					}
				}
			}
			if (c.debug) {
				ts.benchmark("Applying " + theme + " theme", time);
			}
		},
		remove: function remove(table, c) {
			var $table = c.$table,
			    theme = c.theme || 'jui',
			    themes = ts.themes[theme] || ts.themes.jui,
			    $headers = $table.children('thead').children(),
			    remove = themes.sortNone + ' ' + themes.sortDesc + ' ' + themes.sortAsc;
			$table.removeClass('tablesorter-' + theme + ' ' + themes.table).find(ts.css.header).removeClass(themes.header);
			$headers.unbind('mouseenter.tsuitheme mouseleave.tsuitheme') // remove hover
			.removeClass(themes.hover + ' ' + remove + ' ' + themes.active).find('.' + ts.css.filterRow).removeClass(themes.filterRow);
			$headers.find('.' + ts.css.icon).removeClass(themes.icons);
		}
	});

	// Widget: Column styles
	// "columns", "columns_thead" (true) and
	// "columns_tfoot" (true) options in "widgetOptions"
	// **************************
	ts.addWidget({
		id: "columns",
		priority: 30,
		options: {
			columns: ["primary", "secondary", "tertiary"]
		},
		format: function format(table, c, wo) {
			var $tbody,
			    tbodyIndex,
			    $rows,
			    rows,
			    $row,
			    $cells,
			    remove,
			    indx,
			    $table = c.$table,
			    $tbodies = c.$tbodies,
			    sortList = c.sortList,
			    len = sortList.length,

			// removed c.widgetColumns support
			css = wo && wo.columns || ["primary", "secondary", "tertiary"],
			    last = css.length - 1;
			remove = css.join(' ');
			// check if there is a sort (on initialization there may not be one)
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // detach tbody
				$rows = $tbody.children('tr');
				// loop through the visible rows
				$rows.each(function () {
					$row = $(this);
					if (this.style.display !== 'none') {
						// remove all columns class names
						$cells = $row.children().removeClass(remove);
						// add appropriate column class names
						if (sortList && sortList[0]) {
							// primary sort column class
							$cells.eq(sortList[0][0]).addClass(css[0]);
							if (len > 1) {
								for (indx = 1; indx < len; indx++) {
									// secondary, tertiary, etc sort column classes
									$cells.eq(sortList[indx][0]).addClass(css[indx] || css[last]);
								}
							}
						}
					}
				});
				ts.processTbody(table, $tbody, false);
			}
			// add classes to thead and tfoot
			rows = wo.columns_thead !== false ? ['thead tr'] : [];
			if (wo.columns_tfoot !== false) {
				rows.push('tfoot tr');
			}
			if (rows.length) {
				$rows = $table.find(rows.join(',')).children().removeClass(remove);
				if (len) {
					for (indx = 0; indx < len; indx++) {
						// add primary. secondary, tertiary, etc sort column classes
						$rows.filter('[data-column="' + sortList[indx][0] + '"]').addClass(css[indx] || css[last]);
					}
				}
			}
		},
		remove: function remove(table, c, wo) {
			var tbodyIndex,
			    $tbody,
			    $tbodies = c.$tbodies,
			    remove = (wo.columns || ["primary", "secondary", "tertiary"]).join(' ');
			c.$headers.removeClass(remove);
			c.$table.children('tfoot').children('tr').children('th, td').removeClass(remove);
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody
				$tbody.children('tr').each(function () {
					$(this).children().removeClass(remove);
				});
				ts.processTbody(table, $tbody, false); // restore tbody
			}
		}
	});

	// Widget: filter
	// **************************
	ts.addWidget({
		id: "filter",
		priority: 50,
		options: {
			filter_childRows: false, // if true, filter includes child row content in the search
			filter_columnFilters: true, // if true, a filter will be added to the top of each table column
			filter_cellFilter: '', // css class name added to the filter cell (string or array)
			filter_cssFilter: '', // css class name added to the filter row & each input in the row (tablesorter-filter is ALWAYS added)
			filter_defaultFilter: {}, // add a default column filter type "~{query}" to make fuzzy searches default; "{q1} AND {q2}" to make all searches use a logical AND.
			filter_excludeFilter: {}, // filters to exclude, per column
			filter_external: '', // jQuery selector string (or jQuery object) of external filters
			filter_filteredRow: 'filtered', // class added to filtered rows; needed by pager plugin
			filter_formatter: null, // add custom filter elements to the filter row
			filter_functions: null, // add custom filter functions using this option
			filter_hideEmpty: true, // hide filter row when table is empty
			filter_hideFilters: false, // collapse filter row when mouse leaves the area
			filter_ignoreCase: true, // if true, make all searches case-insensitive
			filter_liveSearch: true, // if true, search column content while the user types (with a delay)
			filter_onlyAvail: 'filter-onlyAvail', // a header with a select dropdown & this class name will only show available (visible) options within the drop down
			filter_placeholder: { search: '', select: '' }, // default placeholder text (overridden by any header "data-placeholder" setting)
			filter_reset: null, // jQuery selector string of an element used to reset the filters
			filter_saveFilters: false, // Use the $.tablesorter.storage utility to save the most recent filters
			filter_searchDelay: 300, // typing delay in milliseconds before starting a search
			filter_searchFiltered: true, // allow searching through already filtered rows in special circumstances; will speed up searching in large tables if true
			filter_selectSource: null, // include a function to return an array of values to be added to the column filter select
			filter_startsWith: false, // if true, filter start from the beginning of the cell contents
			filter_useParsedData: false, // filter all data using parsed content
			filter_serversideFiltering: false, // if true, server-side filtering should be performed because client-side filtering will be disabled, but the ui and events will still be used.
			filter_defaultAttrib: 'data-value', // data attribute in the header cell that contains the default filter value
			filter_selectSourceSeparator: '|' // filter_selectSource array text left of the separator is added to the option value, right into the option text
		},
		format: function format(table, c, wo) {
			if (!c.$table.hasClass('hasFilters')) {
				ts.filter.init(table, c, wo);
			}
		},
		remove: function remove(table, c, wo) {
			var tbodyIndex,
			    $tbody,
			    $table = c.$table,
			    $tbodies = c.$tbodies;
			$table.removeClass('hasFilters')
			// add .tsfilter namespace to all BUT search
			.unbind('addRows updateCell update updateRows updateComplete appendCache filterReset filterEnd search '.split(' ').join(c.namespace + 'filter ')).find('.' + ts.css.filterRow).remove();
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody
				$tbody.children().removeClass(wo.filter_filteredRow).show();
				ts.processTbody(table, $tbody, false); // restore tbody
			}
			if (wo.filter_reset) {
				$(document).undelegate(wo.filter_reset, 'click.tsfilter');
			}
		}
	});

	ts.filter = {

		// regex used in filter "check" functions - not for general use and not documented
		regex: {
			regex: /^\/((?:\\\/|[^\/])+)\/([mig]{0,3})?$/, // regex to test for regex
			child: /tablesorter-childRow/, // child row class name; this gets updated in the script
			filtered: /filtered/, // filtered (hidden) row class name; updated in the script
			type: /undefined|number/, // check type
			exact: /(^[\"\'=]+)|([\"\'=]+$)/g, // exact match (allow '==')
			nondigit: /[^\w,. \-()]/g, // replace non-digits (from digit & currency parser)
			operators: /[<>=]/g, // replace operators
			query: '(q|query)' // replace filter queries
		},
		// function( c, data ) { }
		// c = table.config
		// data.filter = array of filter input values;
		// data.iFilter = same array, except lowercase (if wo.filter_ignoreCase is true)
		// data.exact = table cell text (or parsed data if column parser enabled)
		// data.iExact = same as data.exact, except lowercase (if wo.filter_ignoreCase is true)
		// data.cache = table cell text from cache, so it has been parsed (& in all lower case if config.ignoreCase is true)
		// data.index = column index; table = table element (DOM)
		// data.parsed = array (by column) of boolean values (from filter_useParsedData or "filter-parsed" class)
		types: {
			// Look for regex
			regex: function regex(c, data) {
				if (ts.filter.regex.regex.test(data.iFilter)) {
					var matches,
					    regex = ts.filter.regex.regex.exec(data.iFilter);
					try {
						matches = new RegExp(regex[1], regex[2]).test(data.iExact);
					} catch (error) {
						matches = false;
					}
					return matches;
				}
				return null;
			},
			// Look for operators >, >=, < or <=
			operators: function operators(c, data) {
				if (/^[<>]=?/.test(data.iFilter)) {
					var cachedValue,
					    result,
					    table = c.table,
					    index = data.index,
					    parsed = data.parsed[index],
					    query = ts.formatFloat(data.iFilter.replace(ts.filter.regex.operators, ''), table),
					    parser = c.parsers[index],
					    savedSearch = query;
					// parse filter value in case we're comparing numbers (dates)
					if (parsed || parser.type === 'numeric') {
						result = ts.filter.parseFilter(c, $.trim('' + data.iFilter.replace(ts.filter.regex.operators, '')), index, parsed, true);
						query = typeof result === "number" && result !== '' && !isNaN(result) ? result : query;
					}

					// iExact may be numeric - see issue #149;
					// check if cached is defined, because sometimes j goes out of range? (numeric columns)
					cachedValue = (parsed || parser.type === 'numeric') && !isNaN(query) && typeof data.cache !== 'undefined' ? data.cache : isNaN(data.iExact) ? ts.formatFloat(data.iExact.replace(ts.filter.regex.nondigit, ''), table) : ts.formatFloat(data.iExact, table);

					if (/>/.test(data.iFilter)) {
						result = />=/.test(data.iFilter) ? cachedValue >= query : cachedValue > query;
					}
					if (/</.test(data.iFilter)) {
						result = /<=/.test(data.iFilter) ? cachedValue <= query : cachedValue < query;
					}
					// keep showing all rows if nothing follows the operator
					if (!result && savedSearch === '') {
						result = true;
					}
					return result;
				}
				return null;
			},
			// Look for a not match
			notMatch: function notMatch(c, data) {
				if (/^\!/.test(data.iFilter)) {
					var indx,
					    filter = ts.filter.parseFilter(c, data.iFilter.replace('!', ''), data.index, data.parsed[data.index]);
					if (ts.filter.regex.exact.test(filter)) {
						// look for exact not matches - see #628
						filter = filter.replace(ts.filter.regex.exact, '');
						return filter === '' ? true : $.trim(filter) !== data.iExact;
					} else {
						indx = data.iExact.search($.trim(filter));
						return filter === '' ? true : !(c.widgetOptions.filter_startsWith ? indx === 0 : indx >= 0);
					}
				}
				return null;
			},
			// Look for quotes or equals to get an exact match; ignore type since iExact could be numeric
			exact: function exact(c, data) {
				/*jshint eqeqeq:false */
				if (ts.filter.regex.exact.test(data.iFilter)) {
					var filter = ts.filter.parseFilter(c, data.iFilter.replace(ts.filter.regex.exact, ''), data.index, data.parsed[data.index]);
					return data.anyMatch ? $.inArray(filter, data.rowArray) >= 0 : filter == data.iExact;
				}
				return null;
			},
			// Look for an AND or && operator (logical and)
			and: function and(c, data) {
				if (ts.filter.regex.andTest.test(data.filter)) {
					var index = data.index,
					    parsed = data.parsed[index],
					    query = data.iFilter.split(ts.filter.regex.andSplit),
					    result = data.iExact.search($.trim(ts.filter.parseFilter(c, query[0], index, parsed))) >= 0,
					    indx = query.length - 1;
					while (result && indx) {
						result = result && data.iExact.search($.trim(ts.filter.parseFilter(c, query[indx], index, parsed))) >= 0;
						indx--;
					}
					return result;
				}
				return null;
			},
			// Look for a range (using " to " or " - ") - see issue #166; thanks matzhu!
			range: function range(c, data) {
				if (ts.filter.regex.toTest.test(data.iFilter)) {
					var result,
					    tmp,
					    table = c.table,
					    index = data.index,
					    parsed = data.parsed[index],

					// make sure the dash is for a range and not indicating a negative number
					query = data.iFilter.split(ts.filter.regex.toSplit),
					    range1 = ts.formatFloat(ts.filter.parseFilter(c, query[0].replace(ts.filter.regex.nondigit, ''), index, parsed), table),
					    range2 = ts.formatFloat(ts.filter.parseFilter(c, query[1].replace(ts.filter.regex.nondigit, ''), index, parsed), table);
					// parse filter value in case we're comparing numbers (dates)
					if (parsed || c.parsers[index].type === 'numeric') {
						result = c.parsers[index].format('' + query[0], table, c.$headers.eq(index), index);
						range1 = result !== '' && !isNaN(result) ? result : range1;
						result = c.parsers[index].format('' + query[1], table, c.$headers.eq(index), index);
						range2 = result !== '' && !isNaN(result) ? result : range2;
					}
					result = (parsed || c.parsers[index].type === 'numeric') && !isNaN(range1) && !isNaN(range2) ? data.cache : isNaN(data.iExact) ? ts.formatFloat(data.iExact.replace(ts.filter.regex.nondigit, ''), table) : ts.formatFloat(data.iExact, table);
					if (range1 > range2) {
						tmp = range1;range1 = range2;range2 = tmp;
					} // swap
					return result >= range1 && result <= range2 || range1 === '' || range2 === '';
				}
				return null;
			},
			// Look for wild card: ? = single, * = multiple, or | = logical OR
			wild: function wild(c, data) {
				if (/[\?\*\|]/.test(data.iFilter) || ts.filter.regex.orReplace.test(data.filter)) {
					var index = data.index,
					    parsed = data.parsed[index],
					    query = ts.filter.parseFilter(c, data.iFilter.replace(ts.filter.regex.orReplace, "|"), index, parsed);
					// look for an exact match with the "or" unless the "filter-match" class is found
					if (!c.$headers.filter('[data-column="' + index + '"]:last').hasClass('filter-match') && /\|/.test(query)) {
						// show all results while using filter match. Fixes #727
						if (query[query.length - 1] === '|') {
							query += '*';
						}
						query = data.anyMatch && $.isArray(data.rowArray) ? '(' + query + ')' : '^(' + query + ')$';
					}
					// parsing the filter may not work properly when using wildcards =/
					return new RegExp(query.replace(/\?/g, '\\S{1}').replace(/\*/g, '\\S*')).test(data.iExact);
				}
				return null;
			},
			// fuzzy text search; modified from https://github.com/mattyork/fuzzy (MIT license)
			fuzzy: function fuzzy(c, data) {
				if (/^~/.test(data.iFilter)) {
					var indx,
					    patternIndx = 0,
					    len = data.iExact.length,
					    pattern = ts.filter.parseFilter(c, data.iFilter.slice(1), data.index, data.parsed[data.index]);
					for (indx = 0; indx < len; indx++) {
						if (data.iExact[indx] === pattern[patternIndx]) {
							patternIndx += 1;
						}
					}
					if (patternIndx === pattern.length) {
						return true;
					}
					return false;
				}
				return null;
			}
		},
		init: function init(table, c, wo) {
			// filter language options
			ts.language = $.extend(true, {}, {
				to: 'to',
				or: 'or',
				and: 'and'
			}, ts.language);

			var options,
			    string,
			    txt,
			    $header,
			    column,
			    filters,
			    val,
			    fxn,
			    noSelect,
			    regex = ts.filter.regex;
			c.$table.addClass('hasFilters');

			// define timers so using clearTimeout won't cause an undefined error
			wo.searchTimer = null;
			wo.filter_initTimer = null;
			wo.filter_formatterCount = 0;
			wo.filter_formatterInit = [];
			wo.filter_anyColumnSelector = '[data-column="all"],[data-column="any"]';
			wo.filter_multipleColumnSelector = '[data-column*="-"],[data-column*=","]';

			txt = '\\{' + ts.filter.regex.query + '\\}';
			$.extend(regex, {
				child: new RegExp(c.cssChildRow),
				filtered: new RegExp(wo.filter_filteredRow),
				alreadyFiltered: new RegExp('(\\s+(' + ts.language.or + '|-|' + ts.language.to + ')\\s+)', 'i'),
				toTest: new RegExp('\\s+(-|' + ts.language.to + ')\\s+', 'i'),
				toSplit: new RegExp('(?:\\s+(?:-|' + ts.language.to + ')\\s+)', 'gi'),
				andTest: new RegExp('\\s+(' + ts.language.and + '|&&)\\s+', 'i'),
				andSplit: new RegExp('(?:\\s+(?:' + ts.language.and + '|&&)\\s+)', 'gi'),
				orReplace: new RegExp('\\s+(' + ts.language.or + ')\\s+', 'gi'),
				iQuery: new RegExp(txt, 'i'),
				igQuery: new RegExp(txt, 'ig')
			});

			// don't build filter row if columnFilters is false or all columns are set to "filter-false" - issue #156
			if (wo.filter_columnFilters !== false && c.$headers.filter('.filter-false, .parser-false').length !== c.$headers.length) {
				// build filter row
				ts.filter.buildRow(table, c, wo);
			}

			c.$table.bind('addRows updateCell update updateRows updateComplete appendCache filterReset filterEnd search '.split(' ').join(c.namespace + 'filter '), function (event, filter) {
				c.$table.find('.' + ts.css.filterRow).toggle(!(wo.filter_hideEmpty && $.isEmptyObject(c.cache) && !(c.delayInit && event.type === 'appendCache'))); // fixes #450
				if (!/(search|filter)/.test(event.type)) {
					event.stopPropagation();
					ts.filter.buildDefault(table, true);
				}
				if (event.type === 'filterReset') {
					c.$table.find('.' + ts.css.filter).add(wo.filter_$externalFilters).val('');
					ts.filter.searching(table, []);
				} else if (event.type === 'filterEnd') {
					ts.filter.buildDefault(table, true);
				} else {
					// send false argument to force a new search; otherwise if the filter hasn't changed, it will return
					filter = event.type === 'search' ? filter : event.type === 'updateComplete' ? c.$table.data('lastSearch') : '';
					if (/(update|add)/.test(event.type) && event.type !== "updateComplete") {
						// force a new search since content has changed
						c.lastCombinedFilter = null;
						c.lastSearch = [];
					}
					// pass true (skipFirst) to prevent the tablesorter.setFilters function from skipping the first input
					// ensures all inputs are updated when a search is triggered on the table $('table').trigger('search', [...]);
					ts.filter.searching(table, filter, true);
				}
				return false;
			});

			// reset button/link
			if (wo.filter_reset) {
				if (wo.filter_reset instanceof $) {
					// reset contains a jQuery object, bind to it
					wo.filter_reset.click(function () {
						c.$table.trigger('filterReset');
					});
				} else if ($(wo.filter_reset).length) {
					// reset is a jQuery selector, use event delegation
					$(document).undelegate(wo.filter_reset, 'click.tsfilter').delegate(wo.filter_reset, 'click.tsfilter', function () {
						// trigger a reset event, so other functions (filter_formatter) know when to reset
						c.$table.trigger('filterReset');
					});
				}
			}
			if (wo.filter_functions) {
				for (column = 0; column < c.columns; column++) {
					fxn = ts.getColumnData(table, wo.filter_functions, column);
					if (fxn) {
						// remove "filter-select" from header otherwise the options added here are replaced with all options
						$header = c.$headers.filter('[data-column="' + column + '"]:last').removeClass('filter-select');
						// don't build select if "filter-false" or "parser-false" set
						noSelect = !($header.hasClass('filter-false') || $header.hasClass('parser-false'));
						options = '';
						if (fxn === true && noSelect) {
							ts.filter.buildSelect(table, column);
						} else if ((typeof fxn === "undefined" ? "undefined" : _typeof(fxn)) === 'object' && noSelect) {
							// add custom drop down list
							for (string in fxn) {
								if (typeof string === 'string') {
									options += options === '' ? '<option value="">' + ($header.data('placeholder') || $header.attr('data-placeholder') || wo.filter_placeholder.select || '') + '</option>' : '';
									val = string;
									txt = string;
									if (string.indexOf(wo.filter_selectSourceSeparator) >= 0) {
										val = string.split(wo.filter_selectSourceSeparator);
										txt = val[1];
										val = val[0];
									}
									options += '<option ' + (txt === val ? '' : 'data-function-name="' + string + '" ') + 'value="' + val + '">' + txt + '</option>';
								}
							}
							c.$table.find('thead').find('select.' + ts.css.filter + '[data-column="' + column + '"]').append(options);
						}
					}
				}
			}
			// not really updating, but if the column has both the "filter-select" class & filter_functions set to true,
			// it would append the same options twice.
			ts.filter.buildDefault(table, true);

			ts.filter.bindSearch(table, c.$table.find('.' + ts.css.filter), true);
			if (wo.filter_external) {
				ts.filter.bindSearch(table, wo.filter_external);
			}

			if (wo.filter_hideFilters) {
				ts.filter.hideFilters(table, c);
			}

			// show processing icon
			if (c.showProcessing) {
				c.$table.bind('filterStart' + c.namespace + 'filter filterEnd' + c.namespace + 'filter', function (event, columns) {
					// only add processing to certain columns to all columns
					$header = columns ? c.$table.find('.' + ts.css.header).filter('[data-column]').filter(function () {
						return columns[$(this).data('column')] !== '';
					}) : '';
					ts.isProcessing(table, event.type === 'filterStart', columns ? $header : '');
				});
			}

			// set filtered rows count (intially unfiltered)
			c.filteredRows = c.totalRows;

			// add default values
			c.$table.bind('tablesorter-initialized pagerBeforeInitialized', function () {
				// redefine "wo" as it does not update properly inside this callback
				var wo = this.config.widgetOptions;
				filters = ts.filter.setDefaults(table, c, wo) || [];
				if (filters.length) {
					// prevent delayInit from triggering a cache build if filters are empty
					if (!(c.delayInit && filters.join('') === '')) {
						ts.setFilters(table, filters, true);
					}
				}
				c.$table.trigger('filterFomatterUpdate');
				// trigger init after setTimeout to prevent multiple filterStart/End/Init triggers
				setTimeout(function () {
					if (!wo.filter_initialized) {
						ts.filter.filterInitComplete(c);
					}
				}, 100);
			});
			// if filter widget is added after pager has initialized; then set filter init flag
			if (c.pager && c.pager.initialized && !wo.filter_initialized) {
				c.$table.trigger('filterFomatterUpdate');
				setTimeout(function () {
					ts.filter.filterInitComplete(c);
				}, 100);
			}
		},
		// $cell parameter, but not the config, is passed to the
		// filter_formatters, so we have to work with it instead
		formatterUpdated: function formatterUpdated($cell, column) {
			var wo = $cell.closest('table')[0].config.widgetOptions;
			if (!wo.filter_initialized) {
				// add updates by column since this function
				// may be called numerous times before initialization
				wo.filter_formatterInit[column] = 1;
			}
		},
		filterInitComplete: function filterInitComplete(c) {
			var wo = c.widgetOptions,
			    count = 0,
			    completed = function completed() {
				wo.filter_initialized = true;
				c.$table.trigger('filterInit', c);
				ts.filter.findRows(c.table, c.$table.data('lastSearch') || []);
			};
			if ($.isEmptyObject(wo.filter_formatter)) {
				completed();
			} else {
				$.each(wo.filter_formatterInit, function (i, val) {
					if (val === 1) {
						count++;
					}
				});
				clearTimeout(wo.filter_initTimer);
				if (!wo.filter_initialized && count === wo.filter_formatterCount) {
					// filter widget initialized
					completed();
				} else if (!wo.filter_initialized) {
					// fall back in case a filter_formatter doesn't call
					// $.tablesorter.filter.formatterUpdated($cell, column), and the count is off
					wo.filter_initTimer = setTimeout(function () {
						completed();
					}, 500);
				}
			}
		},

		setDefaults: function setDefaults(table, c, wo) {
			var isArray,
			    saved,
			    indx,

			// get current (default) filters
			filters = ts.getFilters(table) || [];
			if (wo.filter_saveFilters && ts.storage) {
				saved = ts.storage(table, 'tablesorter-filters') || [];
				isArray = $.isArray(saved);
				// make sure we're not just getting an empty array
				if (!(isArray && saved.join('') === '' || !isArray)) {
					filters = saved;
				}
			}
			// if no filters saved, then check default settings
			if (filters.join('') === '') {
				for (indx = 0; indx < c.columns; indx++) {
					filters[indx] = c.$headers.filter('[data-column="' + indx + '"]:last').attr(wo.filter_defaultAttrib) || filters[indx];
				}
			}
			c.$table.data('lastSearch', filters);
			return filters;
		},
		parseFilter: function parseFilter(c, filter, column, parsed, forceParse) {
			return forceParse || parsed ? c.parsers[column].format(filter, c.table, [], column) : filter;
		},
		buildRow: function buildRow(table, c, wo) {
			var col,
			    column,
			    $header,
			    buildSelect,
			    disabled,
			    name,
			    ffxn,

			// c.columns defined in computeThIndexes()
			columns = c.columns,
			    arry = $.isArray(wo.filter_cellFilter),
			    buildFilter = '<tr role="row" class="' + ts.css.filterRow + '">';
			for (column = 0; column < columns; column++) {
				if (arry) {
					buildFilter += '<td' + (wo.filter_cellFilter[column] ? ' class="' + wo.filter_cellFilter[column] + '"' : '') + '></td>';
				} else {
					buildFilter += '<td' + (wo.filter_cellFilter !== '' ? ' class="' + wo.filter_cellFilter + '"' : '') + '></td>';
				}
			}
			c.$filters = $(buildFilter += '</tr>').appendTo(c.$table.children('thead').eq(0)).find('td');
			// build each filter input
			for (column = 0; column < columns; column++) {
				disabled = false;
				// assuming last cell of a column is the main column
				$header = c.$headers.filter('[data-column="' + column + '"]:last');
				ffxn = ts.getColumnData(table, wo.filter_functions, column);
				buildSelect = wo.filter_functions && ffxn && typeof ffxn !== "function" || $header.hasClass('filter-select');
				// get data from jQuery data, metadata, headers option or header class name
				col = ts.getColumnData(table, c.headers, column);
				disabled = ts.getData($header[0], col, 'filter') === 'false' || ts.getData($header[0], col, 'parser') === 'false';

				if (buildSelect) {
					buildFilter = $('<select>').appendTo(c.$filters.eq(column));
				} else {
					ffxn = ts.getColumnData(table, wo.filter_formatter, column);
					if (ffxn) {
						wo.filter_formatterCount++;
						buildFilter = ffxn(c.$filters.eq(column), column);
						// no element returned, so lets go find it
						if (buildFilter && buildFilter.length === 0) {
							buildFilter = c.$filters.eq(column).children('input');
						}
						// element not in DOM, so lets attach it
						if (buildFilter && (buildFilter.parent().length === 0 || buildFilter.parent().length && buildFilter.parent()[0] !== c.$filters[column])) {
							c.$filters.eq(column).append(buildFilter);
						}
					} else {
						buildFilter = $('<input type="search">').appendTo(c.$filters.eq(column));
					}
					if (buildFilter) {
						buildFilter.attr('placeholder', $header.data('placeholder') || $header.attr('data-placeholder') || wo.filter_placeholder.search || '');
					}
				}
				if (buildFilter) {
					// add filter class name
					name = ($.isArray(wo.filter_cssFilter) ? typeof wo.filter_cssFilter[column] !== 'undefined' ? wo.filter_cssFilter[column] || '' : '' : wo.filter_cssFilter) || '';
					buildFilter.addClass(ts.css.filter + ' ' + name).attr('data-column', column);
					if (disabled) {
						buildFilter.attr('placeholder', '').addClass('disabled')[0].disabled = true; // disabled!
					}
				}
			}
		},
		bindSearch: function bindSearch(table, $el, internal) {
			table = $(table)[0];
			$el = $($el); // allow passing a selector string
			if (!$el.length) {
				return;
			}
			var c = table.config,
			    wo = c.widgetOptions,
			    $ext = wo.filter_$externalFilters;
			if (internal !== true) {
				// save anyMatch element
				wo.filter_$anyMatch = $el.filter(wo.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector);
				if ($ext && $ext.length) {
					wo.filter_$externalFilters = wo.filter_$externalFilters.add($el);
				} else {
					wo.filter_$externalFilters = $el;
				}
				// update values (external filters added after table initialization)
				ts.setFilters(table, c.$table.data('lastSearch') || [], internal === false);
			}
			$el
			// use data attribute instead of jQuery data since the head is cloned without including the data/binding
			.attr('data-lastSearchTime', new Date().getTime()).unbind('keypress keyup search change '.split(' ').join(c.namespace + 'filter '))
			// include change for select - fixes #473
			.bind('keyup' + c.namespace + 'filter', function (event) {
				$(this).attr('data-lastSearchTime', new Date().getTime());
				// emulate what webkit does.... escape clears the filter
				if (event.which === 27) {
					this.value = '';
					// live search
				} else if (wo.filter_liveSearch === false) {
					return;
					// don't return if the search value is empty (all rows need to be revealed)
				} else if (this.value !== '' && (
				// liveSearch can contain a min value length; ignore arrow and meta keys, but allow backspace
				typeof wo.filter_liveSearch === 'number' && this.value.length < wo.filter_liveSearch ||
				// let return & backspace continue on, but ignore arrows & non-valid characters
				event.which !== 13 && event.which !== 8 && (event.which < 32 || event.which >= 37 && event.which <= 40))) {
					return;
				}
				// change event = no delay; last true flag tells getFilters to skip newest timed input
				ts.filter.searching(table, true, true);
			}).bind('search change keypress '.split(' ').join(c.namespace + 'filter '), function (event) {
				var column = $(this).data('column');
				// don't allow "change" event to process if the input value is the same - fixes #685
				if (event.which === 13 || event.type === 'search' || event.type === 'change' && this.value !== c.lastSearch[column]) {
					event.preventDefault();
					// init search with no delay
					$(this).attr('data-lastSearchTime', new Date().getTime());
					ts.filter.searching(table, false, true);
				}
			});
		},
		searching: function searching(table, filter, skipFirst) {
			var wo = table.config.widgetOptions;
			clearTimeout(wo.searchTimer);
			if (typeof filter === 'undefined' || filter === true) {
				// delay filtering
				wo.searchTimer = setTimeout(function () {
					ts.filter.checkFilters(table, filter, skipFirst);
				}, wo.filter_liveSearch ? wo.filter_searchDelay : 10);
			} else {
				// skip delay
				ts.filter.checkFilters(table, filter, skipFirst);
			}
		},
		checkFilters: function checkFilters(table, filter, skipFirst) {
			var c = table.config,
			    wo = c.widgetOptions,
			    filterArray = $.isArray(filter),
			    filters = filterArray ? filter : ts.getFilters(table, true),
			    combinedFilters = (filters || []).join(''); // combined filter values
			// prevent errors if delay init is set
			if ($.isEmptyObject(c.cache)) {
				// update cache if delayInit set & pager has initialized (after user initiates a search)
				if (c.delayInit && c.pager && c.pager.initialized) {
					c.$table.trigger('updateCache', [function () {
						ts.filter.checkFilters(table, false, skipFirst);
					}]);
				}
				return;
			}
			// add filter array back into inputs
			if (filterArray) {
				ts.setFilters(table, filters, false, skipFirst !== true);
				if (!wo.filter_initialized) {
					c.lastCombinedFilter = '';
				}
			}
			if (wo.filter_hideFilters) {
				// show/hide filter row as needed
				c.$table.find('.' + ts.css.filterRow).trigger(combinedFilters === '' ? 'mouseleave' : 'mouseenter');
			}
			// return if the last search is the same; but filter === false when updating the search
			// see example-widget-filter.html filter toggle buttons
			if (c.lastCombinedFilter === combinedFilters && filter !== false) {
				return;
			} else if (filter === false) {
				// force filter refresh
				c.lastCombinedFilter = null;
				c.lastSearch = [];
			}
			if (wo.filter_initialized) {
				c.$table.trigger('filterStart', [filters]);
			}
			if (c.showProcessing) {
				// give it time for the processing icon to kick in
				setTimeout(function () {
					ts.filter.findRows(table, filters, combinedFilters);
					return false;
				}, 30);
			} else {
				ts.filter.findRows(table, filters, combinedFilters);
				return false;
			}
		},
		hideFilters: function hideFilters(table, c) {
			var $filterRow, $filterRow2, timer;
			$(table).find('.' + ts.css.filterRow).addClass('hideme').bind('mouseenter mouseleave', function (e) {
				// save event object - http://bugs.jquery.com/ticket/12140
				var event = e;
				$filterRow = $(this);
				clearTimeout(timer);
				timer = setTimeout(function () {
					if (/enter|over/.test(event.type)) {
						$filterRow.removeClass('hideme');
					} else {
						// don't hide if input has focus
						// $(':focus') needs jQuery 1.6+
						if ($(document.activeElement).closest('tr')[0] !== $filterRow[0]) {
							// don't hide row if any filter has a value
							if (c.lastCombinedFilter === '') {
								$filterRow.addClass('hideme');
							}
						}
					}
				}, 200);
			}).find('input, select').bind('focus blur', function (e) {
				$filterRow2 = $(this).closest('tr');
				clearTimeout(timer);
				var event = e;
				timer = setTimeout(function () {
					// don't hide row if any filter has a value
					if (ts.getFilters(c.$table).join('') === '') {
						$filterRow2[event.type === 'focus' ? 'removeClass' : 'addClass']('hideme');
					}
				}, 200);
			});
		},
		defaultFilter: function defaultFilter(filter, mask) {
			if (filter === '') {
				return filter;
			}
			var regex = ts.filter.regex.iQuery,
			    maskLen = mask.match(ts.filter.regex.igQuery).length,
			    query = maskLen > 1 ? $.trim(filter).split(/\s/) : [$.trim(filter)],
			    len = query.length - 1,
			    indx = 0,
			    val = mask;
			if (len < 1 && maskLen > 1) {
				// only one "word" in query but mask has >1 slots
				query[1] = query[0];
			}
			// replace all {query} with query words...
			// if query = "Bob", then convert mask from "!{query}" to "!Bob"
			// if query = "Bob Joe Frank", then convert mask "{q} OR {q}" to "Bob OR Joe OR Frank"
			while (regex.test(val)) {
				val = val.replace(regex, query[indx++] || '');
				if (regex.test(val) && indx < len && (query[indx] || '') !== '') {
					val = mask.replace(regex, val);
				}
			}
			return val;
		},
		getLatestSearch: function getLatestSearch($input) {
			return $input.sort(function (a, b) {
				return $(b).attr('data-lastSearchTime') - $(a).attr('data-lastSearchTime');
			});
		},
		multipleColumns: function multipleColumns(c, $input) {
			// look for multiple columns "1-3,4-6,8" in data-column
			var ranges,
			    singles,
			    indx,
			    wo = c.widgetOptions,

			// only target "all" column inputs on initialization
			// & don't target "all" column inputs if they don't exist
			targets = wo.filter_initialized || !$input.filter(wo.filter_anyColumnSelector).length,
			    columns = [],
			    val = $.trim(ts.filter.getLatestSearch($input).attr('data-column'));
			// process column range
			if (targets && /-/.test(val)) {
				ranges = val.match(/(\d+)\s*-\s*(\d+)/g);
				$.each(ranges, function (i, v) {
					var t,
					    range = v.split(/\s*-\s*/),
					    start = parseInt(range[0], 10) || 0,
					    end = parseInt(range[1], 10) || c.columns - 1;
					if (start > end) {
						t = start;start = end;end = t;
					} // swap
					if (end >= c.columns) {
						end = c.columns - 1;
					}
					for (; start <= end; start++) {
						columns.push(start);
					}
					// remove processed range from val
					val = val.replace(v, '');
				});
			}
			// process single columns
			if (targets && /,/.test(val)) {
				singles = val.split(/\s*,\s*/);
				$.each(singles, function (i, v) {
					if (v !== '') {
						indx = parseInt(v, 10);
						if (indx < c.columns) {
							columns.push(indx);
						}
					}
				});
			}
			// return all columns
			if (!columns.length) {
				for (indx = 0; indx < c.columns; indx++) {
					columns.push(indx);
				}
			}
			return columns;
		},
		findRows: function findRows(table, filters, combinedFilters) {
			if (table.config.lastCombinedFilter === combinedFilters || !table.config.widgetOptions.filter_initialized) {
				return;
			}
			var len,
			    $rows,
			    rowIndex,
			    tbodyIndex,
			    $tbody,
			    $cells,
			    $cell,
			    columnIndex,
			    childRow,
			    lastSearch,
			    hasSelect,
			    matches,
			    result,
			    showRow,
			    time,
			    val,
			    indx,
			    notFiltered,
			    searchFiltered,
			    filterMatched,
			    excludeMatch,
			    fxn,
			    ffxn,
			    regex = ts.filter.regex,
			    c = table.config,
			    wo = c.widgetOptions,
			    $tbodies = c.$table.children('tbody'),
			    // target all tbodies #568
			// data object passed to filters; anyMatch is a flag for the filters
			data = { anyMatch: false },

			// anyMatch really screws up with these types of filters
			noAnyMatch = ['range', 'notMatch', 'operators'];

			// parse columns after formatter, in case the class is added at that point
			data.parsed = c.$headers.map(function (columnIndex) {
				return c.parsers && c.parsers[columnIndex] && c.parsers[columnIndex].parsed ||
				// getData won't return "parsed" if other "filter-" class names exist (e.g. <th class="filter-select filter-parsed">)
				ts.getData && ts.getData(c.$headers.filter('[data-column="' + columnIndex + '"]:last'), ts.getColumnData(table, c.headers, columnIndex), 'filter') === 'parsed' || $(this).hasClass('filter-parsed');
			}).get();

			if (c.debug) {
				ts.log('Starting filter widget search', filters);
				time = new Date();
			}
			// filtered rows count
			c.filteredRows = 0;
			c.totalRows = 0;
			// combindedFilters are undefined on init
			combinedFilters = (filters || []).join('');

			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				if ($tbodies.eq(tbodyIndex).hasClass(c.cssInfoBlock || ts.css.info)) {
					continue;
				} // ignore info blocks, issue #264
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true);
				// skip child rows & widget added (removable) rows - fixes #448 thanks to @hempel!
				// $rows = $tbody.children('tr').not(c.selectorRemove);
				columnIndex = c.columns;
				// convert stored rows into a jQuery object
				$rows = $($.map(c.cache[tbodyIndex].normalized, function (el) {
					return el[columnIndex].$row.get();
				}));

				if (combinedFilters === '' || wo.filter_serversideFiltering) {
					$rows.removeClass(wo.filter_filteredRow).not('.' + c.cssChildRow).show();
				} else {
					// filter out child rows
					$rows = $rows.not('.' + c.cssChildRow);
					len = $rows.length;
					// optimize searching only through already filtered rows - see #313
					searchFiltered = wo.filter_searchFiltered;
					lastSearch = c.lastSearch || c.$table.data('lastSearch') || [];
					if (searchFiltered) {
						// cycle through all filters; include last (columnIndex + 1 = match any column). Fixes #669
						for (indx = 0; indx < columnIndex + 1; indx++) {
							val = filters[indx] || '';
							// break out of loop if we've already determined not to search filtered rows
							if (!searchFiltered) {
								indx = columnIndex;
							}
							// search already filtered rows if...
							searchFiltered = searchFiltered && lastSearch.length &&
							// there are no changes from beginning of filter
							val.indexOf(lastSearch[indx] || '') === 0 &&
							// if there is NOT a logical "or", or range ("to" or "-") in the string
							!regex.alreadyFiltered.test(val) &&
							// if we are not doing exact matches, using "|" (logical or) or not "!"
							!/[=\"\|!]/.test(val) &&
							// don't search only filtered if the value is negative ('> -10' => '> -100' will ignore hidden rows)
							!(/(>=?\s*-\d)/.test(val) || /(<=?\s*\d)/.test(val)) &&
							// if filtering using a select without a "filter-match" class (exact match) - fixes #593
							!(val !== '' && c.$filters && c.$filters.eq(indx).find('select').length && !c.$headers.filter('[data-column="' + indx + '"]:last').hasClass('filter-match'));
						}
					}
					notFiltered = $rows.not('.' + wo.filter_filteredRow).length;
					// can't search when all rows are hidden - this happens when looking for exact matches
					if (searchFiltered && notFiltered === 0) {
						searchFiltered = false;
					}
					if (c.debug) {
						ts.log("Searching through " + (searchFiltered && notFiltered < len ? notFiltered : "all") + " rows");
					}
					if (wo.filter_$anyMatch && wo.filter_$anyMatch.length || filters[c.columns]) {
						data.anyMatchFlag = true;
						data.anyMatchFilter = wo.filter_$anyMatch && ts.filter.getLatestSearch(wo.filter_$anyMatch).val() || filters[c.columns] || '';
						if (c.sortLocaleCompare) {
							// replace accents
							data.anyMatchFilter = ts.replaceAccents(data.anyMatchFilter);
						}
						if (wo.filter_defaultFilter && regex.iQuery.test(ts.getColumnData(table, wo.filter_defaultFilter, c.columns, true) || '')) {
							data.anyMatchFilter = ts.filter.defaultFilter(data.anyMatchFilter, ts.getColumnData(table, wo.filter_defaultFilter, c.columns, true));
							// clear search filtered flag because default filters are not saved to the last search
							searchFiltered = false;
						}
						// make iAnyMatchFilter lowercase unless both filter widget & core ignoreCase options are true
						// when c.ignoreCase is true, the cache contains all lower case data
						data.iAnyMatchFilter = !(wo.filter_ignoreCase && c.ignoreCase) ? data.anyMatchFilter : data.anyMatchFilter.toLocaleLowerCase();
					}

					// loop through the rows
					for (rowIndex = 0; rowIndex < len; rowIndex++) {

						data.cacheArray = c.cache[tbodyIndex].normalized[rowIndex];

						childRow = $rows[rowIndex].className;
						// skip child rows & already filtered rows
						if (regex.child.test(childRow) || searchFiltered && regex.filtered.test(childRow)) {
							continue;
						}
						showRow = true;
						// *** nextAll/nextUntil not supported by Zepto! ***
						childRow = $rows.eq(rowIndex).nextUntil('tr:not(.' + c.cssChildRow + ')');
						// so, if "table.config.widgetOptions.filter_childRows" is true and there is
						// a match anywhere in the child row, then it will make the row visible
						// checked here so the option can be changed dynamically
						data.childRowText = childRow.length && wo.filter_childRows ? childRow.text() : '';
						data.childRowText = wo.filter_ignoreCase ? data.childRowText.toLocaleLowerCase() : data.childRowText;
						$cells = $rows.eq(rowIndex).children();
						if (data.anyMatchFlag) {
							// look for multiple columns "1-3,4-6,8"
							columnIndex = ts.filter.multipleColumns(c, wo.filter_$anyMatch);
							data.anyMatch = true;
							data.rowArray = $cells.map(function (i) {
								if ($.inArray(i, columnIndex) > -1) {
									var txt;
									if (data.parsed[i]) {
										txt = data.cacheArray[i];
									} else {
										txt = wo.filter_ignoreCase ? $(this).text().toLowerCase() : $(this).text();
										if (c.sortLocaleCompare) {
											txt = ts.replaceAccents(txt);
										}
									}
									return txt;
								}
							}).get();
							data.filter = data.anyMatchFilter;
							data.iFilter = data.iAnyMatchFilter;
							data.exact = data.rowArray.join(' ');
							data.iExact = wo.filter_ignoreCase ? data.exact.toLowerCase() : data.exact;
							data.cache = data.cacheArray.slice(0, -1).join(' ');
							filterMatched = null;
							$.each(ts.filter.types, function (type, typeFunction) {
								if ($.inArray(type, noAnyMatch) < 0) {
									matches = typeFunction(c, data);
									if (matches !== null) {
										filterMatched = matches;
										return false;
									}
								}
							});
							if (filterMatched !== null) {
								showRow = filterMatched;
							} else {
								if (wo.filter_startsWith) {
									showRow = false;
									columnIndex = c.columns;
									while (!showRow && columnIndex > 0) {
										columnIndex--;
										showRow = showRow || data.rowArray[columnIndex].indexOf(data.iFilter) === 0;
									}
								} else {
									showRow = (data.iExact + data.childRowText).indexOf(data.iFilter) >= 0;
								}
							}
							data.anyMatch = false;
						}

						for (columnIndex = 0; columnIndex < c.columns; columnIndex++) {
							data.filter = filters[columnIndex];
							data.index = columnIndex;

							// filter types to exclude, per column
							excludeMatch = (ts.getColumnData(table, wo.filter_excludeFilter, columnIndex, true) || '').split(/\s+/);

							// ignore if filter is empty or disabled
							if (data.filter) {
								data.cache = data.cacheArray[columnIndex];
								// check if column data should be from the cell or from parsed data
								if (wo.filter_useParsedData || data.parsed[columnIndex]) {
									data.exact = data.cache;
								} else {
									// using older or original tablesorter
									data.exact = $.trim($cells.eq(columnIndex).text());
									data.exact = c.sortLocaleCompare ? ts.replaceAccents(data.exact) : data.exact; // issue #405
								}
								data.iExact = !regex.type.test(_typeof(data.exact)) && wo.filter_ignoreCase ? data.exact.toLocaleLowerCase() : data.exact;
								result = showRow; // if showRow is true, show that row

								// in case select filter option has a different value vs text "a - z|A through Z"
								ffxn = wo.filter_columnFilters ? c.$filters.add(c.$externalFilters).filter('[data-column="' + columnIndex + '"]').find('select option:selected').attr('data-function-name') || '' : '';

								// replace accents - see #357
								data.filter = c.sortLocaleCompare ? ts.replaceAccents(data.filter) : data.filter;

								val = true;
								if (wo.filter_defaultFilter && regex.iQuery.test(ts.getColumnData(table, wo.filter_defaultFilter, columnIndex) || '')) {
									data.filter = ts.filter.defaultFilter(data.filter, ts.getColumnData(table, wo.filter_defaultFilter, columnIndex));
									// val is used to indicate that a filter select is using a default filter; so we override the exact & partial matches
									val = false;
								}
								// data.iFilter = case insensitive (if wo.filter_ignoreCase is true), data.filter = case sensitive
								data.iFilter = wo.filter_ignoreCase ? (data.filter || '').toLocaleLowerCase() : data.filter;
								fxn = ts.getColumnData(table, wo.filter_functions, columnIndex);
								$cell = c.$headers.filter('[data-column="' + columnIndex + '"]:last');
								hasSelect = $cell.hasClass('filter-select');
								if (fxn || hasSelect && val) {
									if (fxn === true || hasSelect) {
										// default selector uses exact match unless "filter-match" class is found
										result = $cell.hasClass('filter-match') ? data.iExact.search(data.iFilter) >= 0 : data.filter === data.exact;
									} else if (typeof fxn === 'function') {
										// filter callback( exact cell content, parser normalized content, filter input value, column index, jQuery row object )
										result = fxn(data.exact, data.cache, data.filter, columnIndex, $rows.eq(rowIndex));
									} else if (typeof fxn[ffxn || data.filter] === 'function') {
										// selector option function
										result = fxn[ffxn || data.filter](data.exact, data.cache, data.filter, columnIndex, $rows.eq(rowIndex));
									}
								} else {
									filterMatched = null;
									// cycle through the different filters
									// filters return a boolean or null if nothing matches
									$.each(ts.filter.types, function (type, typeFunction) {
										if ($.inArray(type, excludeMatch) < 0) {
											matches = typeFunction(c, data);
											if (matches !== null) {
												filterMatched = matches;
												return false;
											}
										}
									});
									if (filterMatched !== null) {
										result = filterMatched;
										// Look for match, and add child row data for matching
									} else {
										data.exact = (data.iExact + data.childRowText).indexOf(ts.filter.parseFilter(c, data.iFilter, columnIndex, data.parsed[columnIndex]));
										result = !wo.filter_startsWith && data.exact >= 0 || wo.filter_startsWith && data.exact === 0;
									}
								}
								showRow = result ? showRow : false;
							}
						}
						$rows.eq(rowIndex).toggle(showRow).toggleClass(wo.filter_filteredRow, !showRow);
						if (childRow.length) {
							childRow.toggleClass(wo.filter_filteredRow, !showRow);
						}
					}
				}
				c.filteredRows += $rows.not('.' + wo.filter_filteredRow).length;
				c.totalRows += $rows.length;
				ts.processTbody(table, $tbody, false);
			}
			c.lastCombinedFilter = combinedFilters; // save last search
			c.lastSearch = filters;
			c.$table.data('lastSearch', filters);
			if (wo.filter_saveFilters && ts.storage) {
				ts.storage(table, 'tablesorter-filters', filters);
			}
			if (c.debug) {
				ts.benchmark("Completed filter widget search", time);
			}
			if (wo.filter_initialized) {
				c.$table.trigger('filterEnd', c);
			}
			setTimeout(function () {
				c.$table.trigger('applyWidgets'); // make sure zebra widget is applied
			}, 0);
		},
		getOptionSource: function getOptionSource(table, column, onlyAvail) {
			var cts,
			    c = table.config,
			    wo = c.widgetOptions,
			    parsed = [],
			    arry = false,
			    source = wo.filter_selectSource,
			    last = c.$table.data('lastSearch') || [],
			    fxn = $.isFunction(source) ? true : ts.getColumnData(table, source, column);

			if (onlyAvail && last[column] !== '') {
				onlyAvail = false;
			}

			// filter select source option
			if (fxn === true) {
				// OVERALL source
				arry = source(table, column, onlyAvail);
			} else if (fxn instanceof $ || $.type(fxn) === 'string' && fxn.indexOf('</option>') >= 0) {
				// selectSource is a jQuery object or string of options
				return fxn;
			} else if ($.isArray(fxn)) {
				arry = fxn;
			} else if ($.type(source) === 'object' && fxn) {
				// custom select source function for a SPECIFIC COLUMN
				arry = fxn(table, column, onlyAvail);
			}
			if (arry === false) {
				// fall back to original method
				arry = ts.filter.getOptions(table, column, onlyAvail);
			}

			// get unique elements and sort the list
			// if $.tablesorter.sortText exists (not in the original tablesorter),
			// then natural sort the list otherwise use a basic sort
			arry = $.grep(arry, function (value, indx) {
				return $.inArray(value, arry) === indx;
			});

			if (c.$headers.filter('[data-column="' + column + '"]:last').hasClass('filter-select-nosort')) {
				// unsorted select options
				return arry;
			} else {
				// parse select option values
				$.each(arry, function (i, v) {
					// parse array data using set column parser; this DOES NOT pass the original
					// table cell to the parser format function
					parsed.push({ t: v, p: c.parsers && c.parsers[column].format(v, table, [], column) });
				});

				// sort parsed select options
				cts = c.textSorter || '';
				parsed.sort(function (a, b) {
					// sortNatural breaks if you don't pass it strings
					var x = a.p.toString(),
					    y = b.p.toString();
					if ($.isFunction(cts)) {
						// custom OVERALL text sorter
						return cts(x, y, true, column, table);
					} else if ((typeof cts === "undefined" ? "undefined" : _typeof(cts)) === 'object' && cts.hasOwnProperty(column)) {
						// custom text sorter for a SPECIFIC COLUMN
						return cts[column](x, y, true, column, table);
					} else if (ts.sortNatural) {
						// fall back to natural sort
						return ts.sortNatural(x, y);
					}
					// using an older version! do a basic sort
					return true;
				});
				// rebuild arry from sorted parsed data
				arry = [];
				$.each(parsed, function (i, v) {
					arry.push(v.t);
				});
				return arry;
			}
		},
		getOptions: function getOptions(table, column, onlyAvail) {
			var rowIndex,
			    tbodyIndex,
			    len,
			    row,
			    cache,
			    cell,
			    c = table.config,
			    wo = c.widgetOptions,
			    $tbodies = c.$table.children('tbody'),
			    arry = [];
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				if (!$tbodies.eq(tbodyIndex).hasClass(c.cssInfoBlock)) {
					cache = c.cache[tbodyIndex];
					len = c.cache[tbodyIndex].normalized.length;
					// loop through the rows
					for (rowIndex = 0; rowIndex < len; rowIndex++) {
						// get cached row from cache.row (old) or row data object (new; last item in normalized array)
						row = cache.row ? cache.row[rowIndex] : cache.normalized[rowIndex][c.columns].$row[0];
						// check if has class filtered
						if (onlyAvail && row.className.match(wo.filter_filteredRow)) {
							continue;
						}
						// get non-normalized cell content
						if (wo.filter_useParsedData || c.parsers[column].parsed || c.$headers.filter('[data-column="' + column + '"]:last').hasClass('filter-parsed')) {
							arry.push('' + cache.normalized[rowIndex][column]);
						} else {
							cell = row.cells[column];
							if (cell) {
								arry.push($.trim(cell.textContent || cell.innerText || $(cell).text()));
							}
						}
					}
				}
			}
			return arry;
		},
		buildSelect: function buildSelect(table, column, arry, updating, onlyAvail) {
			table = $(table)[0];
			column = parseInt(column, 10);
			if (!table.config.cache || $.isEmptyObject(table.config.cache)) {
				return;
			}
			var indx,
			    val,
			    txt,
			    t,
			    $filters,
			    $filter,
			    c = table.config,
			    wo = c.widgetOptions,
			    node = c.$headers.filter('[data-column="' + column + '"]:last'),

			// t.data('placeholder') won't work in jQuery older than 1.4.3
			options = '<option value="">' + (node.data('placeholder') || node.attr('data-placeholder') || wo.filter_placeholder.select || '') + '</option>',

			// Get curent filter value
			currentValue = c.$table.find('thead').find('select.' + ts.css.filter + '[data-column="' + column + '"]').val();
			// nothing included in arry (external source), so get the options from filter_selectSource or column data
			if (typeof arry === 'undefined' || arry === '') {
				arry = ts.filter.getOptionSource(table, column, onlyAvail);
			}

			if ($.isArray(arry)) {
				// build option list
				for (indx = 0; indx < arry.length; indx++) {
					txt = arry[indx] = ('' + arry[indx]).replace(/\"/g, "&quot;");
					val = txt;
					// allow including a symbol in the selectSource array
					// "a-z|A through Z" so that "a-z" becomes the option value
					// and "A through Z" becomes the option text
					if (txt.indexOf(wo.filter_selectSourceSeparator) >= 0) {
						t = txt.split(wo.filter_selectSourceSeparator);
						val = t[0];
						txt = t[1];
					}
					// replace quotes - fixes #242 & ignore empty strings - see http://stackoverflow.com/q/14990971/145346
					options += arry[indx] !== '' ? '<option ' + (val === txt ? '' : 'data-function-name="' + arry[indx] + '" ') + 'value="' + val + '">' + txt + '</option>' : '';
				}
				// clear arry so it doesn't get appended twice
				arry = [];
			}

			// update all selects in the same column (clone thead in sticky headers & any external selects) - fixes 473
			$filters = (c.$filters ? c.$filters : c.$table.children('thead')).find('.' + ts.css.filter);
			if (wo.filter_$externalFilters) {
				$filters = $filters && $filters.length ? $filters.add(wo.filter_$externalFilters) : wo.filter_$externalFilters;
			}
			$filter = $filters.filter('select[data-column="' + column + '"]');

			// make sure there is a select there!
			if ($filter.length) {
				$filter[updating ? 'html' : 'append'](options);
				if (!$.isArray(arry)) {
					// append options if arry is provided externally as a string or jQuery object
					// options (default value) was already added
					$filter.append(arry).val(currentValue);
				}
				$filter.val(currentValue);
			}
		},
		buildDefault: function buildDefault(table, updating) {
			var columnIndex,
			    $header,
			    noSelect,
			    c = table.config,
			    wo = c.widgetOptions,
			    columns = c.columns;
			// build default select dropdown
			for (columnIndex = 0; columnIndex < columns; columnIndex++) {
				$header = c.$headers.filter('[data-column="' + columnIndex + '"]:last');
				noSelect = !($header.hasClass('filter-false') || $header.hasClass('parser-false'));
				// look for the filter-select class; build/update it if found
				if (($header.hasClass('filter-select') || ts.getColumnData(table, wo.filter_functions, columnIndex) === true) && noSelect) {
					ts.filter.buildSelect(table, columnIndex, '', updating, $header.hasClass(wo.filter_onlyAvail));
				}
			}
		}
	};

	ts.getFilters = function (table, getRaw, setFilters, skipFirst) {
		var i,
		    $filters,
		    $column,
		    cols,
		    filters = false,
		    c = table ? $(table)[0].config : '',
		    wo = c ? c.widgetOptions : '';
		if (getRaw !== true && wo && !wo.filter_columnFilters) {
			return $(table).data('lastSearch');
		}
		if (c) {
			if (c.$filters) {
				$filters = c.$filters.find('.' + ts.css.filter);
			}
			if (wo.filter_$externalFilters) {
				$filters = $filters && $filters.length ? $filters.add(wo.filter_$externalFilters) : wo.filter_$externalFilters;
			}
			if ($filters && $filters.length) {
				filters = setFilters || [];
				for (i = 0; i < c.columns + 1; i++) {
					cols = i === c.columns ?
					// "all" columns can now include a range or set of columms (data-column="0-2,4,6-7")
					wo.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector : '[data-column="' + i + '"]';
					$column = $filters.filter(cols);
					if ($column.length) {
						// move the latest search to the first slot in the array
						$column = ts.filter.getLatestSearch($column);
						if ($.isArray(setFilters)) {
							// skip first (latest input) to maintain cursor position while typing
							if (skipFirst) {
								$column.slice(1);
							}
							if (i === c.columns) {
								// prevent data-column="all" from filling data-column="0,1" (etc)
								cols = $column.filter(wo.filter_anyColumnSelector);
								$column = cols.length ? cols : $column;
							}
							$column.val(setFilters[i]).trigger('change.tsfilter');
						} else {
							filters[i] = $column.val() || '';
							// don't change the first... it will move the cursor
							if (i === c.columns) {
								// don't update range columns from "all" setting
								$column.slice(1).filter('[data-column*="' + $column.attr('data-column') + '"]').val(filters[i]);
							} else {
								$column.slice(1).val(filters[i]);
							}
						}
						// save any match input dynamically
						if (i === c.columns && $column.length) {
							wo.filter_$anyMatch = $column;
						}
					}
				}
			}
		}
		if (filters.length === 0) {
			filters = false;
		}
		return filters;
	};

	ts.setFilters = function (table, filter, apply, skipFirst) {
		var c = table ? $(table)[0].config : '',
		    valid = ts.getFilters(table, true, filter, skipFirst);
		if (c && apply) {
			// ensure new set filters are applied, even if the search is the same
			c.lastCombinedFilter = null;
			c.lastSearch = [];
			ts.filter.searching(c.$table[0], filter, skipFirst);
			c.$table.trigger('filterFomatterUpdate');
		}
		return !!valid;
	};

	// Widget: Sticky headers
	// based on this awesome article:
	// http://css-tricks.com/13465-persistent-headers/
	// and https://github.com/jmosbech/StickyTableHeaders by Jonas Mosbech
	// **************************
	ts.addWidget({
		id: "stickyHeaders",
		priority: 60, // sticky widget must be initialized after the filter widget!
		options: {
			stickyHeaders: '', // extra class name added to the sticky header row
			stickyHeaders_attachTo: null, // jQuery selector or object to attach sticky header to
			stickyHeaders_xScroll: null, // jQuery selector or object to monitor horizontal scroll position (defaults: xScroll > attachTo > window)
			stickyHeaders_yScroll: null, // jQuery selector or object to monitor vertical scroll position (defaults: yScroll > attachTo > window)
			stickyHeaders_offset: 0, // number or jquery selector targeting the position:fixed element
			stickyHeaders_filteredToTop: true, // scroll table top into view after filtering
			stickyHeaders_cloneId: '-sticky', // added to table ID, if it exists
			stickyHeaders_addResizeEvent: true, // trigger "resize" event on headers
			stickyHeaders_includeCaption: true, // if false and a caption exist, it won't be included in the sticky header
			stickyHeaders_zIndex: 2 // The zIndex of the stickyHeaders, allows the user to adjust this to their needs
		},
		format: function format(table, c, wo) {
			// filter widget doesn't initialize on an empty table. Fixes #449
			if (c.$table.hasClass('hasStickyHeaders') || $.inArray('filter', c.widgets) >= 0 && !c.$table.hasClass('hasFilters')) {
				return;
			}
			var $table = c.$table,
			    $attach = $(wo.stickyHeaders_attachTo),
			    namespace = c.namespace + 'stickyheaders ',

			// element to watch for the scroll event
			$yScroll = $(wo.stickyHeaders_yScroll || wo.stickyHeaders_attachTo || window),
			    $xScroll = $(wo.stickyHeaders_xScroll || wo.stickyHeaders_attachTo || window),
			    $thead = $table.children('thead:first'),
			    $header = $thead.children('tr').not('.sticky-false').children(),
			    $tfoot = $table.children('tfoot'),
			    $stickyOffset = isNaN(wo.stickyHeaders_offset) ? $(wo.stickyHeaders_offset) : '',
			    stickyOffset = $attach.length ? 0 : $stickyOffset.length ? $stickyOffset.height() || 0 : parseInt(wo.stickyHeaders_offset, 10) || 0,

			// is this table nested? If so, find parent sticky header wrapper (div, not table)
			$nestedSticky = $table.parent().closest('.' + ts.css.table).hasClass('hasStickyHeaders') ? $table.parent().closest('table.tablesorter')[0].config.widgetOptions.$sticky.parent() : [],
			    nestedStickyTop = $nestedSticky.length ? $nestedSticky.height() : 0,

			// clone table, then wrap to make sticky header
			$stickyTable = wo.$sticky = $table.clone().addClass('containsStickyHeaders ' + ts.css.sticky + ' ' + wo.stickyHeaders).wrap('<div class="' + ts.css.stickyWrap + '">'),
			    $stickyWrap = $stickyTable.parent().css({
				position: $attach.length ? 'absolute' : 'fixed',
				margin: 0,
				top: stickyOffset + nestedStickyTop,
				left: 0,
				visibility: 'hidden',
				zIndex: wo.stickyHeaders_zIndex || 2
			}),
			    $stickyThead = $stickyTable.children('thead:first'),
			    $stickyCells,
			    laststate = '',
			    spacing = 0,
			    setWidth = function setWidth($orig, $clone) {
				$orig.filter(':visible').each(function (i) {
					var width,
					    border,
					    $cell = $clone.filter(':visible').eq(i),
					    $this = $(this);
					// code from https://github.com/jmosbech/StickyTableHeaders
					if ($this.css('box-sizing') === 'border-box') {
						width = $this.outerWidth();
					} else {
						if ($cell.css('border-collapse') === 'collapse') {
							if (window.getComputedStyle) {
								width = parseFloat(window.getComputedStyle(this, null).width);
							} else {
								// ie8 only
								border = parseFloat($this.css('border-width'));
								width = $this.outerWidth() - parseFloat($this.css('padding-left')) - parseFloat($this.css('padding-right')) - border;
							}
						} else {
							width = $this.width();
						}
					}
					$cell.css({
						'min-width': width,
						'max-width': width
					});
				});
			},
			    resizeHeader = function resizeHeader() {
				stickyOffset = $stickyOffset.length ? $stickyOffset.height() || 0 : parseInt(wo.stickyHeaders_offset, 10) || 0;
				spacing = 0;
				$stickyWrap.css({
					left: $attach.length ? parseInt($attach.css('padding-left'), 10) || 0 : $table.offset().left - parseInt($table.css('margin-left'), 10) - $xScroll.scrollLeft() - spacing,
					width: $table.outerWidth()
				});
				setWidth($table, $stickyTable);
				setWidth($header, $stickyCells);
			};
			// fix clone ID, if it exists - fixes #271
			if ($stickyTable.attr('id')) {
				$stickyTable[0].id += wo.stickyHeaders_cloneId;
			}
			// clear out cloned table, except for sticky header
			// include caption & filter row (fixes #126 & #249) - don't remove cells to get correct cell indexing
			$stickyTable.find('thead:gt(0), tr.sticky-false').hide();
			$stickyTable.find('tbody, tfoot').remove();
			if (!wo.stickyHeaders_includeCaption) {
				$stickyTable.find('caption').remove();
			}
			// issue #172 - find td/th in sticky header
			$stickyCells = $stickyThead.children().children();
			$stickyTable.css({ height: 0, width: 0, margin: 0 });
			// remove resizable block
			$stickyCells.find('.' + ts.css.resizer).remove();
			// update sticky header class names to match real header after sorting
			$table.addClass('hasStickyHeaders').bind('pagerComplete' + namespace, function () {
				resizeHeader();
			});

			ts.bindEvents(table, $stickyThead.children().children('.tablesorter-header'));

			// add stickyheaders AFTER the table. If the table is selected by ID, the original one (first) will be returned.
			$table.after($stickyWrap);

			// onRenderHeader is defined, we need to do something about it (fixes #641)
			if (c.onRenderHeader) {
				$stickyThead.children('tr').children().each(function (index) {
					// send second parameter
					c.onRenderHeader.apply($(this), [index, c, $stickyTable]);
				});
			}

			// make it sticky!
			$xScroll.add($yScroll).unbind('scroll resize '.split(' ').join(namespace)).bind('scroll resize '.split(' ').join(namespace), function (event) {
				if (!$table.is(':visible')) {
					return;
				} // fixes #278
				// Detect nested tables - fixes #724
				nestedStickyTop = $nestedSticky.length ? $nestedSticky.offset().top - $yScroll.scrollTop() + $nestedSticky.height() : 0;
				var prefix = 'tablesorter-sticky-',
				    offset = $table.offset(),
				    yWindow = $.isWindow($yScroll[0]),
				    xWindow = $.isWindow($xScroll[0]),

				// scrollTop = ( $attach.length ? $attach.offset().top : $yScroll.scrollTop() ) + stickyOffset + nestedStickyTop,
				scrollTop = ($attach.length ? yWindow ? $yScroll.scrollTop() : $yScroll.offset().top : $yScroll.scrollTop()) + stickyOffset + nestedStickyTop,
				    tableHeight = $table.height() - ($stickyWrap.height() + ($tfoot.height() || 0)),
				    isVisible = scrollTop > offset.top && scrollTop < offset.top + tableHeight ? 'visible' : 'hidden',
				    cssSettings = { visibility: isVisible };

				if ($attach.length) {
					cssSettings.top = yWindow ? scrollTop : $attach.scrollTop();
				}
				if (xWindow) {
					// adjust when scrolling horizontally - fixes issue #143
					cssSettings.left = $table.offset().left - parseInt($table.css('margin-left'), 10) - $xScroll.scrollLeft() - spacing;
				}
				if ($nestedSticky.length) {
					cssSettings.top = (cssSettings.top || 0) + stickyOffset + nestedStickyTop;
				}
				$stickyWrap.removeClass(prefix + 'visible ' + prefix + 'hidden').addClass(prefix + isVisible).css(cssSettings);
				if (isVisible !== laststate || event.type === 'resize') {
					// make sure the column widths match
					resizeHeader();
					laststate = isVisible;
				}
			});
			if (wo.stickyHeaders_addResizeEvent) {
				ts.addHeaderResizeEvent(table);
			}

			// look for filter widget
			if ($table.hasClass('hasFilters') && wo.filter_columnFilters) {
				// scroll table into view after filtering, if sticky header is active - #482
				$table.bind('filterEnd' + namespace, function () {
					// $(':focus') needs jQuery 1.6+
					var $td = $(document.activeElement).closest('td'),
					    column = $td.parent().children().index($td);
					// only scroll if sticky header is active
					if ($stickyWrap.hasClass(ts.css.stickyVis) && wo.stickyHeaders_filteredToTop) {
						// scroll to original table (not sticky clone)
						window.scrollTo(0, $table.position().top);
						// give same input/select focus; check if c.$filters exists; fixes #594
						if (column >= 0 && c.$filters) {
							c.$filters.eq(column).find('a, select, input').filter(':visible').focus();
						}
					}
				});
				ts.filter.bindSearch($table, $stickyCells.find('.' + ts.css.filter));
				// support hideFilters
				if (wo.filter_hideFilters) {
					ts.filter.hideFilters($stickyTable, c);
				}
			}

			$table.trigger('stickyHeadersInit');
		},
		remove: function remove(table, c, wo) {
			var namespace = c.namespace + 'stickyheaders ';
			c.$table.removeClass('hasStickyHeaders').unbind('pagerComplete filterEnd '.split(' ').join(namespace)).next('.' + ts.css.stickyWrap).remove();
			if (wo.$sticky && wo.$sticky.length) {
				wo.$sticky.remove();
			} // remove cloned table
			// don't unbind if any table on the page still has stickyheaders applied
			if (!$('.hasStickyHeaders').length) {
				$(window).add(wo.stickyHeaders_xScroll).add(wo.stickyHeaders_yScroll).add(wo.stickyHeaders_attachTo).unbind('scroll resize '.split(' ').join(namespace));
			}
			ts.addHeaderResizeEvent(table, false);
		}
	});

	// Add Column resizing widget
	// this widget saves the column widths if
	// $.tablesorter.storage function is included
	// **************************
	ts.addWidget({
		id: "resizable",
		priority: 40,
		options: {
			resizable: true,
			resizable_addLastColumn: false,
			resizable_widths: [],
			resizable_throttle: false // set to true (5ms) or any number 0-10 range
		},
		format: function format(table, c, wo) {
			if (c.$table.hasClass('hasResizable')) {
				return;
			}
			c.$table.addClass('hasResizable');
			ts.resizableReset(table, true); // set default widths
			var $rows,
			    $columns,
			    $column,
			    column,
			    timer,
			    storedSizes = {},
			    $table = c.$table,
			    $wrap = $table.parent(),
			    overflow = $table.parent().css('overflow') === 'auto',
			    mouseXPosition = 0,
			    $target = null,
			    $next = null,
			    fullWidth = Math.abs($table.parent().width() - $table.width()) < 20,
			    mouseMove = function mouseMove(event) {
				if (mouseXPosition === 0 || !$target) {
					return;
				}
				// resize columns
				var leftEdge = event.pageX - mouseXPosition,
				    targetWidth = $target.width();
				$target.width(targetWidth + leftEdge);
				if ($target.width() !== targetWidth && fullWidth) {
					$next.width($next.width() - leftEdge);
				} else if (overflow) {
					$table.width(function (i, w) {
						return w + leftEdge;
					});
					if (!$next.length) {
						// if expanding right-most column, scroll the wrapper
						$wrap[0].scrollLeft = $table.width();
					}
				}
				mouseXPosition = event.pageX;
			},
			    stopResize = function stopResize() {
				if (ts.storage && $target && $next) {
					storedSizes = {};
					storedSizes[$target.index()] = $target.width();
					storedSizes[$next.index()] = $next.width();
					$target.width(storedSizes[$target.index()]);
					$next.width(storedSizes[$next.index()]);
					if (wo.resizable !== false) {
						// save all column widths
						ts.storage(table, 'tablesorter-resizable', c.$headers.map(function () {
							return $(this).width();
						}).get());
					}
				}
				mouseXPosition = 0;
				$target = $next = null;
				$(window).trigger('resize'); // will update stickyHeaders, just in case
			};
			storedSizes = ts.storage && wo.resizable !== false ? ts.storage(table, 'tablesorter-resizable') : {};
			// process only if table ID or url match
			if (storedSizes) {
				for (column in storedSizes) {
					if (!isNaN(column) && column < c.$headers.length) {
						c.$headers.eq(column).width(storedSizes[column]); // set saved resizable widths
					}
				}
			}
			$rows = $table.children('thead:first').children('tr');
			// add resizable-false class name to headers (across rows as needed)
			$rows.children().each(function () {
				var canResize,
				    $column = $(this);
				column = $column.attr('data-column');
				canResize = ts.getData($column, ts.getColumnData(table, c.headers, column), 'resizable') === "false";
				$rows.children().filter('[data-column="' + column + '"]')[canResize ? 'addClass' : 'removeClass']('resizable-false');
			});
			// add wrapper inside each cell to allow for positioning of the resizable target block
			$rows.each(function () {
				$column = $(this).children().not('.resizable-false');
				if (!$(this).find('.' + ts.css.wrapper).length) {
					// Firefox needs this inner div to position the resizer correctly
					$column.wrapInner('<div class="' + ts.css.wrapper + '" style="position:relative;height:100%;width:100%"></div>');
				}
				// don't include the last column of the row
				if (!wo.resizable_addLastColumn) {
					$column = $column.slice(0, -1);
				}
				$columns = $columns ? $columns.add($column) : $column;
			});
			$columns.each(function () {
				var $column = $(this),
				    padding = parseInt($column.css('padding-right'), 10) + 10; // 10 is 1/2 of the 20px wide resizer
				$column.find('.' + ts.css.wrapper).append('<div class="' + ts.css.resizer + '" style="cursor:w-resize;position:absolute;z-index:1;right:-' + padding + 'px;top:0;height:100%;width:20px;"></div>');
			}).find('.' + ts.css.resizer).bind('mousedown', function (event) {
				// save header cell and mouse position
				$target = $(event.target).closest('th');
				var $header = c.$headers.filter('[data-column="' + $target.attr('data-column') + '"]');
				if ($header.length > 1) {
					$target = $target.add($header);
				}
				// if table is not as wide as it's parent, then resize the table
				$next = event.shiftKey ? $target.parent().find('th').not('.resizable-false').filter(':last') : $target.nextAll(':not(.resizable-false)').eq(0);
				mouseXPosition = event.pageX;
			});
			$(document).bind('mousemove.tsresize', function (event) {
				// ignore mousemove if no mousedown
				if (mouseXPosition === 0 || !$target) {
					return;
				}
				if (wo.resizable_throttle) {
					clearTimeout(timer);
					timer = setTimeout(function () {
						mouseMove(event);
					}, isNaN(wo.resizable_throttle) ? 5 : wo.resizable_throttle);
				} else {
					mouseMove(event);
				}
			}).bind('mouseup.tsresize', function () {
				stopResize();
			});

			// right click to reset columns to default widths
			$table.find('thead:first').bind('contextmenu.tsresize', function () {
				ts.resizableReset(table);
				// $.isEmptyObject() needs jQuery 1.4+; allow right click if already reset
				var allowClick = $.isEmptyObject ? $.isEmptyObject(storedSizes) : true;
				storedSizes = {};
				return allowClick;
			});
		},
		remove: function remove(table, c) {
			c.$table.removeClass('hasResizable').children('thead').unbind('mouseup.tsresize mouseleave.tsresize contextmenu.tsresize').children('tr').children().unbind('mousemove.tsresize mouseup.tsresize')
			// don't remove "tablesorter-wrapper" as uitheme uses it too
			.find('.' + ts.css.resizer).remove();
			ts.resizableReset(table);
		}
	});
	ts.resizableReset = function (table, nosave) {
		$(table).each(function () {
			var $t,
			    c = this.config,
			    wo = c && c.widgetOptions;
			if (table && c) {
				c.$headers.each(function (i) {
					$t = $(this);
					if (wo.resizable_widths[i]) {
						$t.css('width', wo.resizable_widths[i]);
					} else if (!$t.hasClass('resizable-false')) {
						// don't clear the width of any column that is not resizable
						$t.css('width', '');
					}
				});
				if (ts.storage && !nosave) {
					ts.storage(this, 'tablesorter-resizable', {});
				}
			}
		});
	};

	// Save table sort widget
	// this widget saves the last sort only if the
	// saveSort widget option is true AND the
	// $.tablesorter.storage function is included
	// **************************
	ts.addWidget({
		id: 'saveSort',
		priority: 20,
		options: {
			saveSort: true
		},
		init: function init(table, thisWidget, c, wo) {
			// run widget format before all other widgets are applied to the table
			thisWidget.format(table, c, wo, true);
		},
		format: function format(table, c, wo, init) {
			var stored,
			    time,
			    $table = c.$table,
			    saveSort = wo.saveSort !== false,
			    // make saveSort active/inactive; default to true
			sortList = { "sortList": c.sortList };
			if (c.debug) {
				time = new Date();
			}
			if ($table.hasClass('hasSaveSort')) {
				if (saveSort && table.hasInitialized && ts.storage) {
					ts.storage(table, 'tablesorter-savesort', sortList);
					if (c.debug) {
						ts.benchmark('saveSort widget: Saving last sort: ' + c.sortList, time);
					}
				}
			} else {
				// set table sort on initial run of the widget
				$table.addClass('hasSaveSort');
				sortList = '';
				// get data
				if (ts.storage) {
					stored = ts.storage(table, 'tablesorter-savesort');
					sortList = stored && stored.hasOwnProperty('sortList') && $.isArray(stored.sortList) ? stored.sortList : '';
					if (c.debug) {
						ts.benchmark('saveSort: Last sort loaded: "' + sortList + '"', time);
					}
					$table.bind('saveSortReset', function (event) {
						event.stopPropagation();
						ts.storage(table, 'tablesorter-savesort', '');
					});
				}
				// init is true when widget init is run, this will run this widget before all other widgets have initialized
				// this method allows using this widget in the original tablesorter plugin; but then it will run all widgets twice.
				if (init && sortList && sortList.length > 0) {
					c.sortList = sortList;
				} else if (table.hasInitialized && sortList && sortList.length > 0) {
					// update sort change
					$table.trigger('sorton', [sortList]);
				}
			}
		},
		remove: function remove(table) {
			// clear storage
			if (ts.storage) {
				ts.storage(table, 'tablesorter-savesort', '');
			}
		}
	});
})(jQuery, window);
'use strict';

(function ($) {

    $(window).load(function () {
        var input = $('#edit-field-valghalla-mail-attachments-und-0-upload');
        input.addClass('hidden');

        $('#edit-field-valghalla-mail-attachments-und-0-upload-button').addClass('hidden');
        $(":file").filestyle({ buttonText: "Vælg fil" });

        $(":file").filestyle({ placeholder: "Ingen fil" });
    });
})(jQuery);

(function ($) {
    Drupal.behaviors.insertButton = {
        attach: function attach(context, settings) {
            var endpoint = '/valghalla/report';
            var $wrapper = $('.front .breadcrumb__wrapper');
            var $breadcrumb = $('.breadcrumb');

            // If we don't have a wrapper, stop what we are doing!
            if ($wrapper.length === 0) return;

            // Don't proceed if a breadcrumb is present. This will break styling.
            if ($breadcrumb.length > 0) return;

            // Generate PDF download link.
            var $button = $('<a/>').attr('href', endpoint).attr('target', '_blank').addClass('btn btn-secondary').html(Drupal.t('Generér PDF rapport'));

            // Inserts a button into the wrapper.
            $wrapper.html($button);
        }
    };
})(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * bootstrap-filestyle
 * doc: http://markusslima.github.io/bootstrap-filestyle/
 * github: https://github.com/markusslima/bootstrap-filestyle
 *
 * Copyright (c) 2014 Markus Vinicius da Silva Lima
 * Version 1.2.1
 * Licensed under the MIT license.
 */
(function ($) {
	"use strict";

	var nextId = 0;

	var Filestyle = function Filestyle(element, options) {
		this.options = options;
		this.$elementFilestyle = [];
		this.$element = $(element);
	};

	Filestyle.prototype = {
		clear: function clear() {
			this.$element.val('');
			this.$elementFilestyle.find(':text').val('');
			this.$elementFilestyle.find('.badge').remove();
		},

		destroy: function destroy() {
			this.$element.removeAttr('style').removeData('filestyle');
			this.$elementFilestyle.remove();
		},

		disabled: function disabled(value) {
			if (value === true) {
				if (!this.options.disabled) {
					this.$element.attr('disabled', 'true');
					this.$elementFilestyle.find('label').attr('disabled', 'true');
					this.options.disabled = true;
				}
			} else if (value === false) {
				if (this.options.disabled) {
					this.$element.removeAttr('disabled');
					this.$elementFilestyle.find('label').removeAttr('disabled');
					this.options.disabled = false;
				}
			} else {
				return this.options.disabled;
			}
		},

		buttonBefore: function buttonBefore(value) {
			if (value === true) {
				if (!this.options.buttonBefore) {
					this.options.buttonBefore = true;
					if (this.options.input) {
						this.$elementFilestyle.remove();
						this.constructor();
						this.pushNameFiles();
					}
				}
			} else if (value === false) {
				if (this.options.buttonBefore) {
					this.options.buttonBefore = false;
					if (this.options.input) {
						this.$elementFilestyle.remove();
						this.constructor();
						this.pushNameFiles();
					}
				}
			} else {
				return this.options.buttonBefore;
			}
		},

		icon: function icon(value) {
			if (value === true) {
				if (!this.options.icon) {
					this.options.icon = true;
					this.$elementFilestyle.find('label').prepend(this.htmlIcon());
				}
			} else if (value === false) {
				if (this.options.icon) {
					this.options.icon = false;
					this.$elementFilestyle.find('.icon-span-filestyle').remove();
				}
			} else {
				return this.options.icon;
			}
		},

		input: function input(value) {
			if (value === true) {
				if (!this.options.input) {
					this.options.input = true;

					if (this.options.buttonBefore) {
						this.$elementFilestyle.append(this.htmlInput());
					} else {
						this.$elementFilestyle.prepend(this.htmlInput());
					}

					this.$elementFilestyle.find('.badge').remove();

					this.pushNameFiles();

					this.$elementFilestyle.find('.group-span-filestyle').addClass('input-group-btn');
				}
			} else if (value === false) {
				if (this.options.input) {
					this.options.input = false;
					this.$elementFilestyle.find(':text').remove();
					var files = this.pushNameFiles();
					if (files.length > 0 && this.options.badge) {
						this.$elementFilestyle.find('label').append(' <span class="badge">' + files.length + '</span>');
					}
					this.$elementFilestyle.find('.group-span-filestyle').removeClass('input-group-btn');
				}
			} else {
				return this.options.input;
			}
		},

		size: function size(value) {
			if (value !== undefined) {
				var btn = this.$elementFilestyle.find('label'),
				    input = this.$elementFilestyle.find('input');

				btn.removeClass('btn-lg btn-sm');
				input.removeClass('input-lg input-sm');
				if (value != 'nr') {
					btn.addClass('btn-' + value);
					input.addClass('input-' + value);
				}
			} else {
				return this.options.size;
			}
		},

		placeholder: function placeholder(value) {
			if (value !== undefined) {
				this.options.placeholder = value;
				this.$elementFilestyle.find('input').attr('placeholder', value);
			} else {
				return this.options.placeholder;
			}
		},

		buttonText: function buttonText(value) {
			if (value !== undefined) {
				this.options.buttonText = value;
				this.$elementFilestyle.find('label .buttonText').html(this.options.buttonText);
			} else {
				return this.options.buttonText;
			}
		},

		buttonName: function buttonName(value) {
			if (value !== undefined) {
				this.options.buttonName = value;
				this.$elementFilestyle.find('label').attr({
					'class': 'btn ' + this.options.buttonName
				});
			} else {
				return this.options.buttonName;
			}
		},

		iconName: function iconName(value) {
			if (value !== undefined) {
				this.$elementFilestyle.find('.icon-span-filestyle').attr({
					'class': 'icon-span-filestyle ' + this.options.iconName
				});
			} else {
				return this.options.iconName;
			}
		},

		htmlIcon: function htmlIcon() {
			if (this.options.icon) {
				return '<span class="icon-span-filestyle ' + this.options.iconName + '"></span> ';
			} else {
				return '';
			}
		},

		htmlInput: function htmlInput() {
			if (this.options.input) {
				return '<input type="text" class="form-control ' + (this.options.size == 'nr' ? '' : 'input-' + this.options.size) + '" placeholder="' + this.options.placeholder + '" disabled> ';
			} else {
				return '';
			}
		},

		// puts the name of the input files
		// return files
		pushNameFiles: function pushNameFiles() {
			var content = '',
			    files = [];
			if (this.$element[0].files === undefined) {
				files[0] = {
					'name': this.$element[0] && this.$element[0].value
				};
			} else {
				files = this.$element[0].files;
			}

			for (var i = 0; i < files.length; i++) {
				content += files[i].name.split("\\").pop() + ', ';
			}

			if (content !== '') {
				this.$elementFilestyle.find(':text').val(content.replace(/\, $/g, ''));
			} else {
				this.$elementFilestyle.find(':text').val('');
			}

			return files;
		},

		constructor: function constructor() {
			var _self = this,
			    html = '',
			    id = _self.$element.attr('id'),
			    files = [],
			    btn = '',
			    $label;

			if (id === '' || !id) {
				id = 'filestyle-' + nextId;
				_self.$element.attr({
					'id': id
				});
				nextId++;
			}

			btn = '<span class="group-span-filestyle ' + (_self.options.input ? 'input-group-btn' : '') + '">' + '<label for="' + id + '" class="btn ' + _self.options.buttonName + ' ' + (_self.options.size == 'nr' ? '' : 'btn-' + _self.options.size) + '" ' + (_self.options.disabled ? 'disabled="true"' : '') + '>' + _self.htmlIcon() + '<span class="buttonText">' + _self.options.buttonText + '</span>' + '</label>' + '</span>';

			html = _self.options.buttonBefore ? btn + _self.htmlInput() : _self.htmlInput() + btn;

			_self.$elementFilestyle = $('<div class="bootstrap-filestyle input-group">' + html + '</div>');
			_self.$elementFilestyle.find('.group-span-filestyle').attr('tabindex', "0").keypress(function (e) {
				if (e.keyCode === 13 || e.charCode === 32) {
					_self.$elementFilestyle.find('label').click();
					return false;
				}
			});

			// hidding input file and add filestyle
			_self.$element.css({
				'position': 'absolute',
				'clip': 'rect(0px 0px 0px 0px)' // using 0px for work in IE8
			}).attr('tabindex', "-1").after(_self.$elementFilestyle);

			if (_self.options.disabled) {
				_self.$element.attr('disabled', 'true');
			}

			// Getting input file value
			_self.$element.change(function () {
				var files = _self.pushNameFiles();

				if (_self.options.input == false && _self.options.badge) {
					if (_self.$elementFilestyle.find('.badge').length == 0) {
						_self.$elementFilestyle.find('label').append(' <span class="badge">' + files.length + '</span>');
					} else if (files.length == 0) {
						_self.$elementFilestyle.find('.badge').remove();
					} else {
						_self.$elementFilestyle.find('.badge').html(files.length);
					}
				} else {
					_self.$elementFilestyle.find('.badge').remove();
				}
			});

			// Check if browser is Firefox
			if (window.navigator.userAgent.search(/firefox/i) > -1) {
				// Simulating choose file for firefox
				_self.$elementFilestyle.find('label').click(function () {
					_self.$element.click();
					return false;
				});
			}
		}
	};

	var old = $.fn.filestyle;

	$.fn.filestyle = function (option, value) {
		var get = '',
		    element = this.each(function () {
			if ($(this).attr('type') === 'file') {
				var $this = $(this),
				    data = $this.data('filestyle'),
				    options = $.extend({}, $.fn.filestyle.defaults, option, (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option);

				if (!data) {
					$this.data('filestyle', data = new Filestyle(this, options));
					data.constructor();
				}

				if (typeof option === 'string') {
					get = data[option](value);
				}
			}
		});

		if ((typeof get === 'undefined' ? 'undefined' : _typeof(get)) !== undefined) {
			return get;
		} else {
			return element;
		}
	};

	$.fn.filestyle.defaults = {
		'buttonText': 'Choose file',
		'iconName': 'glyphicon glyphicon-folder-open',
		'buttonName': 'btn-default',
		'size': 'nr',
		'input': true,
		'badge': true,
		'icon': true,
		'buttonBefore': false,
		'disabled': false,
		'placeholder': ''
	};

	$.fn.filestyle.noConflict = function () {
		$.fn.filestyle = old;
		return this;
	};

	$(function () {
		$('.filestyle').each(function () {
			var $this = $(this),
			    options = {

				'input': $this.attr('data-input') === 'false' ? false : true,
				'icon': $this.attr('data-icon') === 'false' ? false : true,
				'buttonBefore': $this.attr('data-buttonBefore') === 'true' ? true : false,
				'disabled': $this.attr('data-disabled') === 'true' ? true : false,
				'size': $this.attr('data-size'),
				'buttonText': $this.attr('data-buttonText'),
				'buttonName': $this.attr('data-buttonName'),
				'iconName': $this.attr('data-iconName'),
				'badge': $this.attr('data-badge') === 'false' ? false : true,
				'placeholder': $this.attr('data-placeholder')
			};

			$this.filestyle(options);
		});
	});
})(window.jQuery);
'use strict';

/*
 * Slinky
 * A light-weight, responsive, mobile-like navigation menu plugin for jQuery
 * Built by Ali Zahid <ali.zahid@live.com>
 * Published under the MIT license
 */

;(function ($) {
  var lastClick;

  $.fn.slinky = function (options) {
    var settings = $.extend({
      label: 'Back',
      title: false,
      speed: 300,
      resize: true,
      activeClass: 'active',
      headerClass: 'header',
      headingTag: '<h2>',
      backFirst: false
    }, options);

    var menu = $(this),
        root = menu.children().first();

    menu.addClass('slinky-menu');

    var move = function move(depth, callback) {
      var left = Math.round(parseInt(root.get(0).style.left)) || 0;

      root.css('left', left - depth * 100 + '%');

      if (typeof callback === 'function') {
        setTimeout(callback, settings.speed);
      }
    };

    var resize = function resize(content) {
      menu.height(content.outerHeight());
    };

    var transition = function transition(speed) {
      menu.css('transition-duration', speed + 'ms');
      root.css('transition-duration', speed + 'ms');
    };

    transition(settings.speed);

    $('a + ul', menu).prev().addClass('next');

    $('li > ul', menu).prepend('<li class="' + settings.headerClass + '">');

    if (settings.title === true) {
      $('li > ul', menu).each(function () {
        var $link = $(this).parent().find('a').first(),
            label = $link.text(),
            title = $('<a>').addClass('title').text(label).attr('href', $link.attr('href'));

        $('> .' + settings.headerClass, this).append(title);
      });
    }

    if (!settings.title && settings.label === true) {
      $('li > ul', menu).each(function () {
        var label = $(this).parent().find('a').first().text(),
            backLink = $('<a>').text(label).prop('href', '#').addClass('back');

        if (settings.backFirst) {
          $('> .' + settings.headerClass, this).prepend(backLink);
        } else {
          $('> .' + settings.headerClass, this).append(backLink);
        }
      });
    } else {
      var backLink = $('<a>').text(settings.label).prop('href', '#').addClass('back');

      if (settings.backFirst) {
        $('.' + settings.headerClass, menu).prepend(backLink);
      } else {
        $('.' + settings.headerClass, menu).append(backLink);
      }
    }

    $('a', menu).on('click', function (e) {
      if (lastClick + settings.speed > Date.now()) {
        return false;
      }

      lastClick = Date.now();

      var a = $(this);

      if (a.hasClass('next') || a.hasClass('back')) {
        e.preventDefault();
      }

      if (a.hasClass('next')) {
        menu.find('.' + settings.activeClass).removeClass(settings.activeClass);

        a.next().show().addClass(settings.activeClass);

        move(1);

        if (settings.resize) {
          resize(a.next());
        }
      } else if (a.hasClass('back')) {
        move(-1, function () {
          menu.find('.' + settings.activeClass).removeClass(settings.activeClass);

          a.parent().parent().hide().parentsUntil(menu, 'ul').first().addClass(settings.activeClass);
        });

        if (settings.resize) {
          resize(a.parent().parent().parentsUntil(menu, 'ul'));
        }
      }
    });

    this.jump = function (to, animate) {
      to = $(to);

      var active = menu.find('.' + settings.activeClass);

      if (active.length > 0) {
        active = active.parentsUntil(menu, 'ul').length;
      } else {
        active = 0;
      }

      menu.find('ul').removeClass(settings.activeClass).hide();

      var menus = to.parentsUntil(menu, 'ul');

      menus.show();
      to.show().addClass(settings.activeClass);

      if (animate === false) {
        transition(0);
      }

      move(menus.length - active);

      if (settings.resize) {
        resize(to);
      }

      if (animate === false) {
        transition(settings.speed);
      }
    };

    this.home = function (animate) {
      if (animate === false) {
        transition(0);
      }

      var active = menu.find('.' + settings.activeClass),
          count = active.parentsUntil(menu, 'li').length;

      if (count > 0) {
        move(-count, function () {
          active.removeClass(settings.activeClass);
        });

        if (settings.resize) {
          resize($(active.parentsUntil(menu, 'li').get(count - 1)).parent());
        }
      }

      if (animate === false) {
        transition(settings.speed);
      }
    };

    this.destroy = function () {
      $('.' + settings.headerClass, menu).remove();
      $('a', menu).removeClass('next').off('click');

      menu.removeClass('slinky-menu').css('transition-duration', '');
      root.css('transition-duration', '');
    };

    var active = menu.find('.' + settings.activeClass);

    if (active.length > 0) {
      active.removeClass(settings.activeClass);

      this.jump(active, false);
    }

    return this;
  };
})(jQuery);
'use strict';

jQuery(function ($) {
  'use strict';

  // Flexy header

  flexy_header.init();

  // Sidr
  $('.slinky-menu').find('ul, li, a').removeClass();

  $('.sidr-toggle--right').sidr({
    name: 'sidr-main',
    side: 'right',
    renaming: false,
    body: '.layout__wrapper',
    source: '.sidr-source-provider'
  });

  // Slinky
  $('.sidr .slinky-menu').slinky({
    title: true,
    label: ''
  });

  // Enable / disable Bootstrap tooltips, based upon touch events
  if (Modernizr.touchevents) {
    $('[data-toggle="tooltip"]').tooltip('hide');
  } else {
    $('[data-toggle="tooltip"]').tooltip();
  }

  // Scroll to.
  $('[data-scroll-to]').click(function (event) {
    event.preventDefault();

    var $element = $(this);
    var target = $element.attr('data-scroll-to');
    var $target = $(target);

    // Scroll to target.
    $([document.documentElement, document.body]).animate({
      scrollTop: $target.offset().top
    }, 400, function () {

      // Add to URL.
      window.location.hash = target;
    });
  });

  // Sticky table.
  $('.sticky').stickySidebar({
    topSpacing: 50,
    bottomSpacing: 50
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}

+function ($) {
  'use strict';

  var version = $.fn.jquery.split(' ')[0].split('.');
  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap');

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }

    return false; // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });
    var callback = function callback() {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function () {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function handle(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]';
  var Alert = function Alert(el) {
    $(el).on('click', dismiss, this.close);
  };

  Alert.VERSION = '3.3.7';

  Alert.TRANSITION_DURATION = 150;

  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector);

    if (e) e.preventDefault();

    if (!$parent.length) {
      $parent = $this.closest('.alert');
    }

    $parent.trigger(e = $.Event('close.bs.alert'));

    if (e.isDefaultPrevented()) return;

    $parent.removeClass('in');

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove();
    }

    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
  };

  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');

      if (!data) $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.alert;

  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;

  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };

  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function Button(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };

  Button.VERSION = '3.3.7';

  Button.DEFAULTS = {
    loadingText: 'loading...'
  };

  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();

    state += 'Text';

    if (data.resetText == null) $el.data('resetText', $el[val]());

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state]);

      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d).prop(d, true);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d).prop(d, false);
      }
    }, this), 0);
  };

  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');

    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false;
        $parent.find('.active').removeClass('active');
        this.$element.addClass('active');
      } else if ($input.prop('type') == 'checkbox') {
        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
        this.$element.toggleClass('active');
      }
      $input.prop('checked', this.$element.hasClass('active'));
      if (changed) $input.trigger('change');
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
      this.$element.toggleClass('active');
    }
  };

  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.button', data = new Button(this, options));

      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
    });
  }

  var old = $.fn.button;

  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;

  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };

  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target).closest('.btn');
    Plugin.call($btn, 'toggle');
    if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
      // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
      e.preventDefault();
      // The target component still receive the focus
      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');
    }
  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function Carousel(element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = null;
    this.sliding = null;
    this.interval = null;
    this.$active = null;
    this.$items = null;

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };

  Carousel.VERSION = '3.3.7';

  Carousel.TRANSITION_DURATION = 600;

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  };

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return;
    switch (e.which) {
      case 37:
        this.prev();break;
      case 39:
        this.next();break;
      default:
        return;
    }

    e.preventDefault();
  };

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);

    this.interval && clearInterval(this.interval);

    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

    return this;
  };

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active);
    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
    if (willWrap && !this.options.wrap) return active;
    var delta = direction == 'prev' ? -1 : 1;
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };

  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

    if (pos > this.$items.length - 1 || pos < 0) return;

    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
      that.to(pos);
    }); // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle();

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
  };

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }

    this.interval = clearInterval(this.interval);

    return this;
  };

  Carousel.prototype.next = function () {
    if (this.sliding) return;
    return this.slide('next');
  };

  Carousel.prototype.prev = function () {
    if (this.sliding) return;
    return this.slide('prev');
  };

  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var that = this;

    if ($next.hasClass('active')) return this.sliding = false;

    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented()) return;

    this.sliding = true;

    isCycling && this.pause();

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth; // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([type, direction].join(' ')).addClass('active');
        $active.removeClass(['active', direction].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }

    isCycling && this.cycle();

    return this;
  };

  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;

      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
    });
  }

  var old = $.fn.carousel;

  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;

  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };

  // CAROUSEL DATA-API
  // =================

  var clickHandler = function clickHandler(e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    if (!$target.hasClass('carousel')) return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex) options.interval = false;

    Plugin.call($target, options);

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }

    e.preventDefault();
  };

  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function Collapse(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
    this.transitioning = null;

    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }

    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = '3.3.7';

  Collapse.TRANSITION_DURATION = 350;

  Collapse.DEFAULTS = {
    toggle: true
  };

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return;

    var activesData;
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse');
      if (activesData && activesData.transitioning) return;
    }

    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    if (actives && actives.length) {
      Plugin.call(actives, 'hide');
      activesData || actives.data('bs.collapse', null);
    }

    var dimension = this.dimension();

    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);

    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);

    this.transitioning = 1;

    var complete = function complete() {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return;

    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);

    this.$trigger.addClass('collapsed').attr('aria-expanded', false);

    this.transitioning = 1;

    var complete = function complete() {
      this.transitioning = 0;
      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };

  Collapse.prototype.getParent = function () {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
      var $element = $(element);
      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
    }, this)).end();
  };

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in');

    $element.attr('aria-expanded', isOpen);
    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
  };

  function getTargetFromTrigger($trigger) {
    var href;
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

    return $(target);
  }

  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;

  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };

  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this);

    if (!$this.attr('data-target')) e.preventDefault();

    var $target = getTargetFromTrigger($this);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();

    Plugin.call($target, option);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function Dropdown(element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };

  Dropdown.VERSION = '3.3.7';

  function getParent($this) {
    var selector = $this.attr('data-target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    var $parent = selector && $(selector);

    return $parent && $parent.length ? $parent : $this.parent();
  }

  function clearMenus(e) {
    if (e && e.which === 3) return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };

      if (!$parent.hasClass('open')) return;

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.attr('aria-expanded', 'false');
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));
    });
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    clearMenus();

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
      }

      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

      if (e.isDefaultPrevented()) return;

      $this.trigger('focus').attr('aria-expanded', 'true');

      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));
    }

    return false;
  };

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

    var $this = $(this);

    e.preventDefault();
    e.stopPropagation();

    if ($this.is('.disabled, :disabled')) return;

    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }

    var desc = ' li:not(.disabled):visible a';
    var $items = $parent.find('.dropdown-menu' + desc);

    if (!$items.length) return;

    var index = $items.index(e.target);

    if (e.which == 38 && index > 0) index--; // up
    if (e.which == 40 && index < $items.length - 1) index++; // down
    if (!~index) index = 0;

    $items.eq(index).trigger('focus');
  };

  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');

      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string') data[option].call($this);
    });
  }

  var old = $.fn.dropdown;

  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;

  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };

  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function Modal(element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$dialog = this.$element.find('.modal-dialog');
    this.$backdrop = null;
    this.isShown = null;
    this.originalBodyPad = null;
    this.scrollbarWidth = 0;
    this.ignoreBackdropClick = false;

    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };

  Modal.VERSION = '3.3.7';

  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };

  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

    this.$element.trigger(e);

    if (this.isShown || e.isDefaultPrevented()) return;

    this.isShown = true;

    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');

    this.escape();
    this.resize();

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
      });
    });

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body); // don't move modals dom position
      }

      that.$element.show().scrollTop(0);

      that.adjustDialog();

      if (transition) {
        that.$element[0].offsetWidth; // force reflow
      }

      that.$element.addClass('in');

      that.enforceFocus();

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

      transition ? that.$dialog // wait for modal to slide in
      .one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault();

    e = $.Event('hide.bs.modal');

    this.$element.trigger(e);

    if (!this.isShown || e.isDefaultPrevented()) return;

    this.isShown = false;

    this.escape();
    this.resize();

    $(document).off('focusin.bs.modal');

    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

    this.$dialog.off('mousedown.dismiss.bs.modal');

    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };

  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal') // guard against infinite focus loop
    .on('focusin.bs.modal', $.proxy(function (e) {
      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };

  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };

  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;

      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false;
          return;
        }
        if (e.target !== e.currentTarget) return;
        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
      }, this));

      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

      this.$backdrop.addClass('in');

      if (!callback) return;

      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');

      var callbackRemove = function callbackRemove() {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog();
  };

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth;
    if (!fullWindowWidth) {
      // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect();
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
    this.scrollbarWidth = this.measureScrollbar();
  };

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || '';
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad);
  };

  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };

  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);

      if (!data) $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
    });
  }

  var old = $.fn.modal;

  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;

  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };

  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

    if ($this.is('a')) e.preventDefault();

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function Tooltip(element, options) {
    this.type = null;
    this.options = null;
    this.enabled = null;
    this.timeout = null;
    this.hoverState = null;
    this.$element = null;
    this.inState = null;

    this.init('tooltip', element, options);
  };

  Tooltip.VERSION = '3.3.7';

  Tooltip.TRANSITION_DURATION = 150;

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
    this.inState = { click: false, hover: false, focus: false };

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
    }

    var triggers = this.options.trigger.split(' ');

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }

    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
  };

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }

    return options;
  };

  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value;
    });

    return options;
  };

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in';
      return;
    }

    clearTimeout(self.timeout);

    self.hoverState = 'in';

    if (!self.options.delay || !self.options.delay.show) return self.show();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show();
    }, self.options.delay.show);
  };

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true;
    }

    return false;
  };

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
    }

    if (self.isInStateTrue()) return;

    clearTimeout(self.timeout);

    self.hoverState = 'out';

    if (!self.options.delay || !self.options.delay.hide) return self.hide();

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide();
    }, self.options.delay.hide);
  };

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom) return;
      var that = this;

      var $tip = this.tip();

      var tipId = this.getUID(this.type);

      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);

      if (this.options.animation) $tip.addClass('fade');

      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      this.$element.trigger('inserted.bs.' + this.type);

      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;

      if (autoPlace) {
        var orgPlacement = placement;
        var viewportDim = this.getPosition(this.$viewport);

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;

        $tip.removeClass(orgPlacement).addClass(placement);
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

      this.applyPlacement(calculatedOffset, placement);

      var complete = function complete() {
        var prevHoverState = that.hoverState;
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;

        if (prevHoverState == 'out') that.leave(that);
      };

      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    }
  };

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop)) marginTop = 0;
    if (isNaN(marginLeft)) marginLeft = 0;

    offset.top += marginTop;
    offset.left += marginLeft;

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function using(props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);

    $tip.addClass('in');

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
  };

  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };

  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = $(this.$tip);
    var e = $.Event('hide.bs.' + this.type);

    function complete() {
      if (that.hoverState != 'in') $tip.detach();
      if (that.$element) {
        // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
      }
      callback && callback();
    }

    this.$element.trigger(e);

    if (e.isDefaultPrevented()) return;

    $tip.removeClass('in');

    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();

    this.hoverState = null;

    return this;
  };

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };

  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };

  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;

    var el = $element[0];
    var isBody = el.tagName == 'BODY';

    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement;
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
  };

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 };
    if (!this.$viewport) return delta;

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);

    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.right) {
        // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }

    return delta;
  };

  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;

    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

    return title;
  };

  Tooltip.prototype.getUID = function (prefix) {
    do {
      prefix += ~~(Math.random() * 1000000);
    } while (document.getElementById(prefix));
    return prefix;
  };

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template);
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
      }
    }
    return this.$tip;
  };

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };

  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };

  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };

  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }

    if (e) {
      self.inState.click = !self.inState.click;
      if (self.isInStateTrue()) self.enter(self);else self.leave(self);
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
    }
  };

  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type);
      if (that.$tip) {
        that.$tip.detach();
      }
      that.$tip = null;
      that.$arrow = null;
      that.$viewport = null;
      that.$element = null;
    });
  };

  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tooltip;

  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;

  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function Popover(element, options) {
    this.init('popover', element, options);
  };

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

  Popover.VERSION = '3.3.7';

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });

  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

  Popover.prototype.constructor = Popover;

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };

  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events
    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

    $tip.removeClass('fade top bottom left right in');

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
  };

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };

  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;

    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };

  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data && /destroy|hide/.test(option)) return;
      if (!data) $this.data('bs.popover', data = new Popover(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.popover;

  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;

  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body = $(document.body);
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
    this.refresh();
    this.process();
  }

  ScrollSpy.VERSION = '3.3.7';

  ScrollSpy.DEFAULTS = {
    offset: 10
  };

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };

  ScrollSpy.prototype.refresh = function () {
    var that = this;
    var offsetMethod = 'offset';
    var offsetBase = 0;

    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }

    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);

      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      that.offsets.push(this[0]);
      that.targets.push(this[1]);
    });
  };

  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;

    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
    }
  };

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;

    this.clear();

    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

    var active = $(selector).parents('li').addClass('active');

    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }

    active.trigger('activate.bs.scrollspy');
  };

  ScrollSpy.prototype.clear = function () {
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
  };

  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.scrollspy;

  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;

  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };

  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function Tab(element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element);
    // jscs:enable requireDollarBeforejQueryAssignment
  };

  Tab.VERSION = '3.3.7';

  Tab.TRANSITION_DURATION = 150;

  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');

    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return;

    var $previous = $ul.find('.active:last a');
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    });
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    });

    $previous.trigger(hideEvent);
    $this.trigger(showEvent);

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;

    var $target = $(selector);

    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      });
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      });
    });
  };

  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);

      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

      if (transition) {
        element[0].offsetWidth; // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }

      if (element.parent('.dropdown-menu').length) {
        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
      }

      callback && callback();
    }

    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();

    $active.removeClass('in');
  };

  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');

      if (!data) $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.tab;

  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;

  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };

  // TAB DATA-API
  // ============

  var clickHandler = function clickHandler(e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  };

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function Affix(element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);

    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

    this.$element = $(element);
    this.affixed = null;
    this.unpin = null;
    this.pinnedOffset = null;

    this.checkPosition();
  };

  Affix.VERSION = '3.3.7';

  Affix.RESET = 'affix affix-top affix-bottom';

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }

    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;

    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

    return false;
  };

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return;

    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = Math.max($(document).height(), $(document.body).height());

    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '');

      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');

      this.$element.trigger(e);

      if (e.isDefaultPrevented()) return;

      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      });
    }
  };

  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;

      if (!data) $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string') data[option]();
    });
  }

  var old = $.fn.affix;

  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;

  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };

  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();

      data.offset = data.offset || {};

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null) data.offset.top = data.offsetTop;

      Plugin.call($spy, data);
    });
  });
}(jQuery);
'use strict';

// |--------------------------------------------------------------------------
// | Flexy header
// |--------------------------------------------------------------------------
// |
// | This jQuery script is written by
// |
// | Morten Nissen
// | hjemmesidekongen.dk
// |

var flexy_header = function ($) {
    'use strict';

    var pub = {},
        $header_static = $('.flexy-header--static'),
        $header_sticky = $('.flexy-header--sticky'),
        options = {
        update_interval: 100,
        tolerance: {
            upward: 20,
            downward: 10
        },
        offset: _get_offset_from_elements_bottom($header_static),
        classes: {
            pinned: "flexy-header--pinned",
            unpinned: "flexy-header--unpinned"
        }
    },
        was_scrolled = false,
        last_distance_from_top = 0;

    /**
     * Instantiate
     */
    pub.init = function (options) {
        registerEventHandlers();
        registerBootEventHandlers();
    };

    /**
     * Register boot event handlers
     */
    function registerBootEventHandlers() {
        $header_sticky.addClass(options.classes.unpinned);

        setInterval(function () {

            if (was_scrolled) {
                document_was_scrolled();

                was_scrolled = false;
            }
        }, options.update_interval);
    }

    /**
     * Register event handlers
     */
    function registerEventHandlers() {
        $(window).scroll(function (event) {
            was_scrolled = true;
        });
    }

    /**
     * Get offset from element bottom
     */
    function _get_offset_from_elements_bottom($element) {
        var element_height = $element.outerHeight(true),
            element_offset = $element.offset().top;

        return element_height + element_offset;
    }

    /**
     * Document was scrolled
     */
    function document_was_scrolled() {
        var current_distance_from_top = $(window).scrollTop();

        // If past offset
        if (current_distance_from_top >= options.offset) {

            // Downwards scroll
            if (current_distance_from_top > last_distance_from_top) {

                // Obey the downward tolerance
                if (Math.abs(current_distance_from_top - last_distance_from_top) <= options.tolerance.downward) {
                    return;
                }

                $header_sticky.removeClass(options.classes.pinned).addClass(options.classes.unpinned);
            }

            // Upwards scroll
            else {

                    // Obey the upward tolerance
                    if (Math.abs(current_distance_from_top - last_distance_from_top) <= options.tolerance.upward) {
                        return;
                    }

                    // We are not scrolled past the document which is possible on the Mac
                    if (current_distance_from_top + $(window).height() < $(document).height()) {
                        $header_sticky.removeClass(options.classes.unpinned).addClass(options.classes.pinned);
                    }
                }
        }

        // Not past offset
        else {
                $header_sticky.removeClass(options.classes.pinned).addClass(options.classes.unpinned);
            }

        last_distance_from_top = current_distance_from_top;
    }

    return pub;
}(jQuery);
'use strict';

// |--------------------------------------------------------------------------
// | Flexy navigation
// |--------------------------------------------------------------------------
// |
// | This jQuery script is written by
// |
// | Morten Nissen
// | hjemmesidekongen.dk
// |

var flexy_navigation = function ($) {
    'use strict';

    var pub = {},
        layout_classes = {
        'navigation': '.flexy-navigation',
        'obfuscator': '.flexy-navigation__obfuscator',
        'dropdown': '.flexy-navigation__item--dropdown',
        'dropdown_megamenu': '.flexy-navigation__item__dropdown-megamenu',

        'is_upgraded': 'is-upgraded',
        'navigation_has_megamenu': 'has-megamenu',
        'dropdown_has_megamenu': 'flexy-navigation__item--dropdown-with-megamenu'
    };

    /**
     * Instantiate
     */
    pub.init = function (options) {
        registerEventHandlers();
        registerBootEventHandlers();
    };

    /**
     * Register boot event handlers
     */
    function registerBootEventHandlers() {

        // Upgrade
        upgrade();
    }

    /**
     * Register event handlers
     */
    function registerEventHandlers() {}

    /**
     * Upgrade elements.
     * Add classes to elements, based upon attached classes.
     */
    function upgrade() {
        var $navigations = $(layout_classes.navigation);

        // Navigations
        if ($navigations.length > 0) {
            $navigations.each(function (index, element) {
                var $navigation = $(this),
                    $megamenus = $navigation.find(layout_classes.dropdown_megamenu),
                    $dropdown_megamenu = $navigation.find(layout_classes.dropdown_has_megamenu);

                // Has already been upgraded
                if ($navigation.hasClass(layout_classes.is_upgraded)) {
                    return;
                }

                // Has megamenu
                if ($megamenus.length > 0) {
                    $navigation.addClass(layout_classes.navigation_has_megamenu);

                    // Run through all megamenus
                    $megamenus.each(function (index, element) {
                        var $megamenu = $(this),
                            has_obfuscator = $('html').hasClass('has-obfuscator') ? true : false;

                        $megamenu.parents(layout_classes.dropdown).addClass(layout_classes.dropdown_has_megamenu).hover(function () {

                            if (has_obfuscator) {
                                obfuscator.show();
                            }
                        }, function () {

                            if (has_obfuscator) {
                                obfuscator.hide();
                            }
                        });
                    });
                }

                // Is upgraded
                $navigation.addClass(layout_classes.is_upgraded);
            });
        }
    }

    return pub;
}(jQuery);
"use strict";

/*! sidr - v2.2.1 - 2016-02-17
 * http://www.berriart.com/sidr/
 * Copyright (c) 2013-2016 Alberto Varela; Licensed MIT */

(function () {
  'use strict';

  var babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers;

  var sidrStatus = {
    moving: false,
    opened: false
  };

  var helper = {
    // Check for valids urls
    // From : http://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-an-url

    isUrl: function isUrl(str) {
      var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
      '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' + // domain name
      '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
      '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
      '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
      '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

      if (pattern.test(str)) {
        return true;
      } else {
        return false;
      }
    },

    // Add sidr prefixes
    addPrefixes: function addPrefixes($element) {
      this.addPrefix($element, 'id');
      this.addPrefix($element, 'class');
      $element.removeAttr('style');
    },
    addPrefix: function addPrefix($element, attribute) {
      var toReplace = $element.attr(attribute);

      if (typeof toReplace === 'string' && toReplace !== '' && toReplace !== 'sidr-inner') {
        $element.attr(attribute, toReplace.replace(/([A-Za-z0-9_.\-]+)/g, 'sidr-' + attribute + '-$1'));
      }
    },

    // Check if transitions is supported
    transitions: function () {
      var body = document.body || document.documentElement,
          style = body.style,
          supported = false,
          property = 'transition';

      if (property in style) {
        supported = true;
      } else {
        (function () {
          var prefixes = ['moz', 'webkit', 'o', 'ms'],
              prefix = undefined,
              i = undefined;

          property = property.charAt(0).toUpperCase() + property.substr(1);
          supported = function () {
            for (i = 0; i < prefixes.length; i++) {
              prefix = prefixes[i];
              if (prefix + property in style) {
                return true;
              }
            }

            return false;
          }();
          property = supported ? '-' + prefix.toLowerCase() + '-' + property.toLowerCase() : null;
        })();
      }

      return {
        supported: supported,
        property: property
      };
    }()
  };

  var $$2 = jQuery;

  var bodyAnimationClass = 'sidr-animating';
  var openAction = 'open';
  var closeAction = 'close';
  var transitionEndEvent = 'webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend';
  var Menu = function () {
    function Menu(name) {
      babelHelpers.classCallCheck(this, Menu);

      this.name = name;
      this.item = $$2('#' + name);
      this.openClass = name === 'sidr' ? 'sidr-open' : 'sidr-open ' + name + '-open';
      this.menuWidth = this.item.outerWidth(true);
      this.speed = this.item.data('speed');
      this.side = this.item.data('side');
      this.displace = this.item.data('displace');
      this.timing = this.item.data('timing');
      this.method = this.item.data('method');
      this.onOpenCallback = this.item.data('onOpen');
      this.onCloseCallback = this.item.data('onClose');
      this.onOpenEndCallback = this.item.data('onOpenEnd');
      this.onCloseEndCallback = this.item.data('onCloseEnd');
      this.body = $$2(this.item.data('body'));
    }

    babelHelpers.createClass(Menu, [{
      key: 'getAnimation',
      value: function getAnimation(action, element) {
        var animation = {},
            prop = this.side;

        if (action === 'open' && element === 'body') {
          animation[prop] = this.menuWidth + 'px';
        } else if (action === 'close' && element === 'menu') {
          animation[prop] = '-' + this.menuWidth + 'px';
        } else {
          animation[prop] = 0;
        }

        return animation;
      }
    }, {
      key: 'prepareBody',
      value: function prepareBody(action) {
        var prop = action === 'open' ? 'hidden' : '';

        // Prepare page if container is body
        if (this.body.is('body')) {
          var $html = $$2('html'),
              scrollTop = $html.scrollTop();

          $html.css('overflow-x', prop).scrollTop(scrollTop);
        }
      }
    }, {
      key: 'openBody',
      value: function openBody() {
        if (this.displace) {
          var transitions = helper.transitions,
              $body = this.body;

          if (transitions.supported) {
            $body.css(transitions.property, this.side + ' ' + this.speed / 1000 + 's ' + this.timing).css(this.side, 0).css({
              width: $body.width(),
              position: 'absolute'
            });
            $body.css(this.side, this.menuWidth + 'px');
          } else {
            var bodyAnimation = this.getAnimation(openAction, 'body');

            $body.css({
              width: $body.width(),
              position: 'absolute'
            }).animate(bodyAnimation, {
              queue: false,
              duration: this.speed
            });
          }
        }
      }
    }, {
      key: 'onCloseBody',
      value: function onCloseBody() {
        var transitions = helper.transitions,
            resetStyles = {
          width: '',
          position: '',
          right: '',
          left: ''
        };

        if (transitions.supported) {
          resetStyles[transitions.property] = '';
        }

        this.body.css(resetStyles).unbind(transitionEndEvent);
      }
    }, {
      key: 'closeBody',
      value: function closeBody() {
        var _this = this;

        if (this.displace) {
          if (helper.transitions.supported) {
            this.body.css(this.side, 0).one(transitionEndEvent, function () {
              _this.onCloseBody();
            });
          } else {
            var bodyAnimation = this.getAnimation(closeAction, 'body');

            this.body.animate(bodyAnimation, {
              queue: false,
              duration: this.speed,
              complete: function complete() {
                _this.onCloseBody();
              }
            });
          }
        }
      }
    }, {
      key: 'moveBody',
      value: function moveBody(action) {
        if (action === openAction) {
          this.openBody();
        } else {
          this.closeBody();
        }
      }
    }, {
      key: 'onOpenMenu',
      value: function onOpenMenu(callback) {
        var name = this.name;

        sidrStatus.moving = false;
        sidrStatus.opened = name;

        this.item.unbind(transitionEndEvent);

        this.body.removeClass(bodyAnimationClass).addClass(this.openClass);

        this.onOpenEndCallback();

        if (typeof callback === 'function') {
          callback(name);
        }
      }
    }, {
      key: 'openMenu',
      value: function openMenu(callback) {
        var _this2 = this;

        var $item = this.item;

        if (helper.transitions.supported) {
          $item.css(this.side, 0).one(transitionEndEvent, function () {
            _this2.onOpenMenu(callback);
          });
        } else {
          var menuAnimation = this.getAnimation(openAction, 'menu');

          $item.css('display', 'block').animate(menuAnimation, {
            queue: false,
            duration: this.speed,
            complete: function complete() {
              _this2.onOpenMenu(callback);
            }
          });
        }
      }
    }, {
      key: 'onCloseMenu',
      value: function onCloseMenu(callback) {
        this.item.css({
          left: '',
          right: ''
        }).unbind(transitionEndEvent);
        $$2('html').css('overflow-x', '');

        sidrStatus.moving = false;
        sidrStatus.opened = false;

        this.body.removeClass(bodyAnimationClass).removeClass(this.openClass);

        this.onCloseEndCallback();

        // Callback
        if (typeof callback === 'function') {
          callback(name);
        }
      }
    }, {
      key: 'closeMenu',
      value: function closeMenu(callback) {
        var _this3 = this;

        var item = this.item;

        if (helper.transitions.supported) {
          item.css(this.side, '').one(transitionEndEvent, function () {
            _this3.onCloseMenu(callback);
          });
        } else {
          var menuAnimation = this.getAnimation(closeAction, 'menu');

          item.animate(menuAnimation, {
            queue: false,
            duration: this.speed,
            complete: function complete() {
              _this3.onCloseMenu();
            }
          });
        }
      }
    }, {
      key: 'moveMenu',
      value: function moveMenu(action, callback) {
        this.body.addClass(bodyAnimationClass);

        if (action === openAction) {
          this.openMenu(callback);
        } else {
          this.closeMenu(callback);
        }
      }
    }, {
      key: 'move',
      value: function move(action, callback) {
        // Lock sidr
        sidrStatus.moving = true;

        this.prepareBody(action);
        this.moveBody(action);
        this.moveMenu(action, callback);
      }
    }, {
      key: 'open',
      value: function open(callback) {
        var _this4 = this;

        // Check if is already opened or moving
        if (sidrStatus.opened === this.name || sidrStatus.moving) {
          return;
        }

        // If another menu opened close first
        if (sidrStatus.opened !== false) {
          var alreadyOpenedMenu = new Menu(sidrStatus.opened);

          alreadyOpenedMenu.close(function () {
            _this4.open(callback);
          });

          return;
        }

        this.move('open', callback);

        // onOpen callback
        this.onOpenCallback();
      }
    }, {
      key: 'close',
      value: function close(callback) {
        // Check if is already closed or moving
        if (sidrStatus.opened !== this.name || sidrStatus.moving) {
          return;
        }

        this.move('close', callback);

        // onClose callback
        this.onCloseCallback();
      }
    }, {
      key: 'toggle',
      value: function toggle(callback) {
        if (sidrStatus.opened === this.name) {
          this.close(callback);
        } else {
          this.open(callback);
        }
      }
    }]);
    return Menu;
  }();

  var $$1 = jQuery;

  function execute(action, name, callback) {
    var sidr = new Menu(name);

    switch (action) {
      case 'open':
        sidr.open(callback);
        break;
      case 'close':
        sidr.close(callback);
        break;
      case 'toggle':
        sidr.toggle(callback);
        break;
      default:
        $$1.error('Method ' + action + ' does not exist on jQuery.sidr');
        break;
    }
  }

  var i;
  var $ = jQuery;
  var publicMethods = ['open', 'close', 'toggle'];
  var methodName;
  var methods = {};
  var getMethod = function getMethod(methodName) {
    return function (name, callback) {
      // Check arguments
      if (typeof name === 'function') {
        callback = name;
        name = 'sidr';
      } else if (!name) {
        name = 'sidr';
      }

      execute(methodName, name, callback);
    };
  };
  for (i = 0; i < publicMethods.length; i++) {
    methodName = publicMethods[i];
    methods[methodName] = getMethod(methodName);
  }

  function sidr(method) {
    if (method === 'status') {
      return sidrStatus;
    } else if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'function' || typeof method === 'string' || !method) {
      return methods.toggle.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.sidr');
    }
  }

  var $$3 = jQuery;

  function fillContent($sideMenu, settings) {
    // The menu content
    if (typeof settings.source === 'function') {
      var newContent = settings.source(name);

      $sideMenu.html(newContent);
    } else if (typeof settings.source === 'string' && helper.isUrl(settings.source)) {
      $$3.get(settings.source, function (data) {
        $sideMenu.html(data);
      });
    } else if (typeof settings.source === 'string') {
      var htmlContent = '',
          selectors = settings.source.split(',');

      $$3.each(selectors, function (index, element) {
        htmlContent += '<div class="sidr-inner">' + $$3(element).html() + '</div>';
      });

      // Renaming ids and classes
      if (settings.renaming) {
        var $htmlContent = $$3('<div />').html(htmlContent);

        $htmlContent.find('*').each(function (index, element) {
          var $element = $$3(element);

          helper.addPrefixes($element);
        });
        htmlContent = $htmlContent.html();
      }

      $sideMenu.html(htmlContent);
    } else if (settings.source !== null) {
      $$3.error('Invalid Sidr Source');
    }

    return $sideMenu;
  }

  function fnSidr(options) {
    var transitions = helper.transitions,
        settings = $$3.extend({
      name: 'sidr', // Name for the 'sidr'
      speed: 200, // Accepts standard jQuery effects speeds (i.e. fast, normal or milliseconds)
      side: 'left', // Accepts 'left' or 'right'
      source: null, // Override the source of the content.
      renaming: true, // The ids and classes will be prepended with a prefix when loading existent content
      body: 'body', // Page container selector,
      displace: true, // Displace the body content or not
      timing: 'ease', // Timing function for CSS transitions
      method: 'toggle', // The method to call when element is clicked
      bind: 'touchstart click', // The event(s) to trigger the menu
      onOpen: function onOpen() {},
      // Callback when sidr start opening
      onClose: function onClose() {},
      // Callback when sidr start closing
      onOpenEnd: function onOpenEnd() {},
      // Callback when sidr end opening
      onCloseEnd: function onCloseEnd() {} // Callback when sidr end closing

    }, options),
        name = settings.name,
        $sideMenu = $$3('#' + name);

    // If the side menu do not exist create it
    if ($sideMenu.length === 0) {
      $sideMenu = $$3('<div />').attr('id', name).appendTo($$3('body'));
    }

    // Add transition to menu if are supported
    if (transitions.supported) {
      $sideMenu.css(transitions.property, settings.side + ' ' + settings.speed / 1000 + 's ' + settings.timing);
    }

    // Adding styles and options
    $sideMenu.addClass('sidr').addClass(settings.side).data({
      speed: settings.speed,
      side: settings.side,
      body: settings.body,
      displace: settings.displace,
      timing: settings.timing,
      method: settings.method,
      onOpen: settings.onOpen,
      onClose: settings.onClose,
      onOpenEnd: settings.onOpenEnd,
      onCloseEnd: settings.onCloseEnd
    });

    $sideMenu = fillContent($sideMenu, settings);

    return this.each(function () {
      var $this = $$3(this),
          data = $this.data('sidr'),
          flag = false;

      // If the plugin hasn't been initialized yet
      if (!data) {
        sidrStatus.moving = false;
        sidrStatus.opened = false;

        $this.data('sidr', name);

        $this.bind(settings.bind, function (event) {
          event.preventDefault();

          if (!flag) {
            flag = true;
            sidr(settings.method, name);

            setTimeout(function () {
              flag = false;
            }, 100);
          }
        });
      }
    });
  }

  jQuery.sidr = sidr;
  jQuery.fn.sidr = fnSidr;
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
  var AjaxMonitor,
      Bar,
      DocumentMonitor,
      ElementMonitor,
      ElementTracker,
      EventLagMonitor,
      Evented,
      Events,
      NoTargetError,
      Pace,
      RequestIntercept,
      SOURCE_KEYS,
      Scaler,
      SocketRequestTracker,
      XHRRequestTracker,
      animation,
      avgAmplitude,
      bar,
      cancelAnimation,
      cancelAnimationFrame,
      defaultOptions,
      _extend,
      extendNative,
      getFromDOM,
      getIntercept,
      handlePushState,
      ignoreStack,
      init,
      now,
      options,
      requestAnimationFrame,
      result,
      runAnimation,
      scalers,
      shouldIgnoreURL,
      shouldTrack,
      source,
      sources,
      uniScaler,
      _WebSocket,
      _XDomainRequest,
      _XMLHttpRequest,
      _i,
      _intercept,
      _len,
      _pushState,
      _ref,
      _ref1,
      _replaceState,
      __slice = [].slice,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      __indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  defaultOptions = {
    catchupTime: 100,
    initialRate: .03,
    minTime: 250,
    ghostTime: 100,
    maxProgressPerFrame: 20,
    easeFactor: 1.25,
    startOnPageLoad: true,
    restartOnPushState: true,
    restartOnRequestAfter: 500,
    target: 'body',
    elements: {
      checkInterval: 100,
      selectors: ['body']
    },
    eventLag: {
      minSamples: 10,
      sampleCount: 3,
      lagThreshold: 3
    },
    ajax: {
      trackMethods: ['GET'],
      trackWebSockets: true,
      ignoreURLs: []
    }
  };

  now = function now() {
    var _ref;
    return (_ref = typeof performance !== "undefined" && performance !== null ? typeof performance.now === "function" ? performance.now() : void 0 : void 0) != null ? _ref : +new Date();
  };

  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame;

  if (requestAnimationFrame == null) {
    requestAnimationFrame = function requestAnimationFrame(fn) {
      return setTimeout(fn, 50);
    };
    cancelAnimationFrame = function cancelAnimationFrame(id) {
      return clearTimeout(id);
    };
  }

  runAnimation = function runAnimation(fn) {
    var last, _tick;
    last = now();
    _tick = function tick() {
      var diff;
      diff = now() - last;
      if (diff >= 33) {
        last = now();
        return fn(diff, function () {
          return requestAnimationFrame(_tick);
        });
      } else {
        return setTimeout(_tick, 33 - diff);
      }
    };
    return _tick();
  };

  result = function result() {
    var args, key, obj;
    obj = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if (typeof obj[key] === 'function') {
      return obj[key].apply(obj, args);
    } else {
      return obj[key];
    }
  };

  _extend = function extend() {
    var key, out, source, sources, val, _i, _len;
    out = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      if (source) {
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          val = source[key];
          if (out[key] != null && _typeof(out[key]) === 'object' && val != null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
            _extend(out[key], val);
          } else {
            out[key] = val;
          }
        }
      }
    }
    return out;
  };

  avgAmplitude = function avgAmplitude(arr) {
    var count, sum, v, _i, _len;
    sum = count = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      sum += Math.abs(v);
      count++;
    }
    return sum / count;
  };

  getFromDOM = function getFromDOM(key, json) {
    var data, e, el;
    if (key == null) {
      key = 'options';
    }
    if (json == null) {
      json = true;
    }
    el = document.querySelector("[data-pace-" + key + "]");
    if (!el) {
      return;
    }
    data = el.getAttribute("data-pace-" + key);
    if (!json) {
      return data;
    }
    try {
      return JSON.parse(data);
    } catch (_error) {
      e = _error;
      return typeof console !== "undefined" && console !== null ? console.error("Error parsing inline pace options", e) : void 0;
    }
  };

  Evented = function () {
    function Evented() {}

    Evented.prototype.on = function (event, handler, ctx, once) {
      var _base;
      if (once == null) {
        once = false;
      }
      if (this.bindings == null) {
        this.bindings = {};
      }
      if ((_base = this.bindings)[event] == null) {
        _base[event] = [];
      }
      return this.bindings[event].push({
        handler: handler,
        ctx: ctx,
        once: once
      });
    };

    Evented.prototype.once = function (event, handler, ctx) {
      return this.on(event, handler, ctx, true);
    };

    Evented.prototype.off = function (event, handler) {
      var i, _ref, _results;
      if (((_ref = this.bindings) != null ? _ref[event] : void 0) == null) {
        return;
      }
      if (handler == null) {
        return delete this.bindings[event];
      } else {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          if (this.bindings[event][i].handler === handler) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    Evented.prototype.trigger = function () {
      var args, ctx, event, handler, i, once, _ref, _ref1, _results;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((_ref = this.bindings) != null ? _ref[event] : void 0) {
        i = 0;
        _results = [];
        while (i < this.bindings[event].length) {
          _ref1 = this.bindings[event][i], handler = _ref1.handler, ctx = _ref1.ctx, once = _ref1.once;
          handler.apply(ctx != null ? ctx : this, args);
          if (once) {
            _results.push(this.bindings[event].splice(i, 1));
          } else {
            _results.push(i++);
          }
        }
        return _results;
      }
    };

    return Evented;
  }();

  Pace = window.Pace || {};

  window.Pace = Pace;

  _extend(Pace, Evented.prototype);

  options = Pace.options = _extend({}, defaultOptions, window.paceOptions, getFromDOM());

  _ref = ['ajax', 'document', 'eventLag', 'elements'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    source = _ref[_i];
    if (options[source] === true) {
      options[source] = defaultOptions[source];
    }
  }

  NoTargetError = function (_super) {
    __extends(NoTargetError, _super);

    function NoTargetError() {
      _ref1 = NoTargetError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return NoTargetError;
  }(Error);

  Bar = function () {
    function Bar() {
      this.progress = 0;
    }

    Bar.prototype.getElement = function () {
      var targetElement;
      if (this.el == null) {
        targetElement = document.querySelector(options.target);
        if (!targetElement) {
          throw new NoTargetError();
        }
        this.el = document.createElement('div');
        this.el.className = "pace pace-active";
        document.body.className = document.body.className.replace(/pace-done/g, '');
        document.body.className += ' pace-running';
        this.el.innerHTML = '<div class="pace-progress">\n  <div class="pace-progress-inner"></div>\n</div>\n<div class="pace-activity"></div>';
        if (targetElement.firstChild != null) {
          targetElement.insertBefore(this.el, targetElement.firstChild);
        } else {
          targetElement.appendChild(this.el);
        }
      }
      return this.el;
    };

    Bar.prototype.finish = function () {
      var el;
      el = this.getElement();
      el.className = el.className.replace('pace-active', '');
      el.className += ' pace-inactive';
      document.body.className = document.body.className.replace('pace-running', '');
      return document.body.className += ' pace-done';
    };

    Bar.prototype.update = function (prog) {
      this.progress = prog;
      return this.render();
    };

    Bar.prototype.destroy = function () {
      try {
        this.getElement().parentNode.removeChild(this.getElement());
      } catch (_error) {
        NoTargetError = _error;
      }
      return this.el = void 0;
    };

    Bar.prototype.render = function () {
      var el, key, progressStr, transform, _j, _len1, _ref2;
      if (document.querySelector(options.target) == null) {
        return false;
      }
      el = this.getElement();
      transform = "translate3d(" + this.progress + "%, 0, 0)";
      _ref2 = ['webkitTransform', 'msTransform', 'transform'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        key = _ref2[_j];
        el.children[0].style[key] = transform;
      }
      if (!this.lastRenderedProgress || this.lastRenderedProgress | 0 !== this.progress | 0) {
        el.children[0].setAttribute('data-progress-text', "" + (this.progress | 0) + "%");
        if (this.progress >= 100) {
          progressStr = '99';
        } else {
          progressStr = this.progress < 10 ? "0" : "";
          progressStr += this.progress | 0;
        }
        el.children[0].setAttribute('data-progress', "" + progressStr);
      }
      return this.lastRenderedProgress = this.progress;
    };

    Bar.prototype.done = function () {
      return this.progress >= 100;
    };

    return Bar;
  }();

  Events = function () {
    function Events() {
      this.bindings = {};
    }

    Events.prototype.trigger = function (name, val) {
      var binding, _j, _len1, _ref2, _results;
      if (this.bindings[name] != null) {
        _ref2 = this.bindings[name];
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          binding = _ref2[_j];
          _results.push(binding.call(this, val));
        }
        return _results;
      }
    };

    Events.prototype.on = function (name, fn) {
      var _base;
      if ((_base = this.bindings)[name] == null) {
        _base[name] = [];
      }
      return this.bindings[name].push(fn);
    };

    return Events;
  }();

  _XMLHttpRequest = window.XMLHttpRequest;

  _XDomainRequest = window.XDomainRequest;

  _WebSocket = window.WebSocket;

  extendNative = function extendNative(to, from) {
    var e, key, _results;
    _results = [];
    for (key in from.prototype) {
      try {
        if (to[key] == null && typeof from[key] !== 'function') {
          if (typeof Object.defineProperty === 'function') {
            _results.push(Object.defineProperty(to, key, {
              get: function get() {
                return from.prototype[key];
              },
              configurable: true,
              enumerable: true
            }));
          } else {
            _results.push(to[key] = from.prototype[key]);
          }
        } else {
          _results.push(void 0);
        }
      } catch (_error) {
        e = _error;
      }
    }
    return _results;
  };

  ignoreStack = [];

  Pace.ignore = function () {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('ignore');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  Pace.track = function () {
    var args, fn, ret;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    ignoreStack.unshift('track');
    ret = fn.apply(null, args);
    ignoreStack.shift();
    return ret;
  };

  shouldTrack = function shouldTrack(method) {
    var _ref2;
    if (method == null) {
      method = 'GET';
    }
    if (ignoreStack[0] === 'track') {
      return 'force';
    }
    if (!ignoreStack.length && options.ajax) {
      if (method === 'socket' && options.ajax.trackWebSockets) {
        return true;
      } else if (_ref2 = method.toUpperCase(), __indexOf.call(options.ajax.trackMethods, _ref2) >= 0) {
        return true;
      }
    }
    return false;
  };

  RequestIntercept = function (_super) {
    __extends(RequestIntercept, _super);

    function RequestIntercept() {
      var monitorXHR,
          _this = this;
      RequestIntercept.__super__.constructor.apply(this, arguments);
      monitorXHR = function monitorXHR(req) {
        var _open;
        _open = req.open;
        return req.open = function (type, url, async) {
          if (shouldTrack(type)) {
            _this.trigger('request', {
              type: type,
              url: url,
              request: req
            });
          }
          return _open.apply(req, arguments);
        };
      };
      window.XMLHttpRequest = function (flags) {
        var req;
        req = new _XMLHttpRequest(flags);
        monitorXHR(req);
        return req;
      };
      try {
        extendNative(window.XMLHttpRequest, _XMLHttpRequest);
      } catch (_error) {}
      if (_XDomainRequest != null) {
        window.XDomainRequest = function () {
          var req;
          req = new _XDomainRequest();
          monitorXHR(req);
          return req;
        };
        try {
          extendNative(window.XDomainRequest, _XDomainRequest);
        } catch (_error) {}
      }
      if (_WebSocket != null && options.ajax.trackWebSockets) {
        window.WebSocket = function (url, protocols) {
          var req;
          if (protocols != null) {
            req = new _WebSocket(url, protocols);
          } else {
            req = new _WebSocket(url);
          }
          if (shouldTrack('socket')) {
            _this.trigger('request', {
              type: 'socket',
              url: url,
              protocols: protocols,
              request: req
            });
          }
          return req;
        };
        try {
          extendNative(window.WebSocket, _WebSocket);
        } catch (_error) {}
      }
    }

    return RequestIntercept;
  }(Events);

  _intercept = null;

  getIntercept = function getIntercept() {
    if (_intercept == null) {
      _intercept = new RequestIntercept();
    }
    return _intercept;
  };

  shouldIgnoreURL = function shouldIgnoreURL(url) {
    var pattern, _j, _len1, _ref2;
    _ref2 = options.ajax.ignoreURLs;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      pattern = _ref2[_j];
      if (typeof pattern === 'string') {
        if (url.indexOf(pattern) !== -1) {
          return true;
        }
      } else {
        if (pattern.test(url)) {
          return true;
        }
      }
    }
    return false;
  };

  getIntercept().on('request', function (_arg) {
    var after, args, request, type, url;
    type = _arg.type, request = _arg.request, url = _arg.url;
    if (shouldIgnoreURL(url)) {
      return;
    }
    if (!Pace.running && (options.restartOnRequestAfter !== false || shouldTrack(type) === 'force')) {
      args = arguments;
      after = options.restartOnRequestAfter || 0;
      if (typeof after === 'boolean') {
        after = 0;
      }
      return setTimeout(function () {
        var stillActive, _j, _len1, _ref2, _ref3, _results;
        if (type === 'socket') {
          stillActive = request.readyState < 2;
        } else {
          stillActive = 0 < (_ref2 = request.readyState) && _ref2 < 4;
        }
        if (stillActive) {
          Pace.restart();
          _ref3 = Pace.sources;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            source = _ref3[_j];
            if (source instanceof AjaxMonitor) {
              source.watch.apply(source, args);
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      }, after);
    }
  });

  AjaxMonitor = function () {
    function AjaxMonitor() {
      var _this = this;
      this.elements = [];
      getIntercept().on('request', function () {
        return _this.watch.apply(_this, arguments);
      });
    }

    AjaxMonitor.prototype.watch = function (_arg) {
      var request, tracker, type, url;
      type = _arg.type, request = _arg.request, url = _arg.url;
      if (shouldIgnoreURL(url)) {
        return;
      }
      if (type === 'socket') {
        tracker = new SocketRequestTracker(request);
      } else {
        tracker = new XHRRequestTracker(request);
      }
      return this.elements.push(tracker);
    };

    return AjaxMonitor;
  }();

  XHRRequestTracker = function () {
    function XHRRequestTracker(request) {
      var event,
          size,
          _j,
          _len1,
          _onreadystatechange,
          _ref2,
          _this = this;
      this.progress = 0;
      if (window.ProgressEvent != null) {
        size = null;
        request.addEventListener('progress', function (evt) {
          if (evt.lengthComputable) {
            return _this.progress = 100 * evt.loaded / evt.total;
          } else {
            return _this.progress = _this.progress + (100 - _this.progress) / 2;
          }
        }, false);
        _ref2 = ['load', 'abort', 'timeout', 'error'];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          event = _ref2[_j];
          request.addEventListener(event, function () {
            return _this.progress = 100;
          }, false);
        }
      } else {
        _onreadystatechange = request.onreadystatechange;
        request.onreadystatechange = function () {
          var _ref3;
          if ((_ref3 = request.readyState) === 0 || _ref3 === 4) {
            _this.progress = 100;
          } else if (request.readyState === 3) {
            _this.progress = 50;
          }
          return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
        };
      }
    }

    return XHRRequestTracker;
  }();

  SocketRequestTracker = function () {
    function SocketRequestTracker(request) {
      var event,
          _j,
          _len1,
          _ref2,
          _this = this;
      this.progress = 0;
      _ref2 = ['error', 'open'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        event = _ref2[_j];
        request.addEventListener(event, function () {
          return _this.progress = 100;
        }, false);
      }
    }

    return SocketRequestTracker;
  }();

  ElementMonitor = function () {
    function ElementMonitor(options) {
      var selector, _j, _len1, _ref2;
      if (options == null) {
        options = {};
      }
      this.elements = [];
      if (options.selectors == null) {
        options.selectors = [];
      }
      _ref2 = options.selectors;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        selector = _ref2[_j];
        this.elements.push(new ElementTracker(selector));
      }
    }

    return ElementMonitor;
  }();

  ElementTracker = function () {
    function ElementTracker(selector) {
      this.selector = selector;
      this.progress = 0;
      this.check();
    }

    ElementTracker.prototype.check = function () {
      var _this = this;
      if (document.querySelector(this.selector)) {
        return this.done();
      } else {
        return setTimeout(function () {
          return _this.check();
        }, options.elements.checkInterval);
      }
    };

    ElementTracker.prototype.done = function () {
      return this.progress = 100;
    };

    return ElementTracker;
  }();

  DocumentMonitor = function () {
    DocumentMonitor.prototype.states = {
      loading: 0,
      interactive: 50,
      complete: 100
    };

    function DocumentMonitor() {
      var _onreadystatechange,
          _ref2,
          _this = this;
      this.progress = (_ref2 = this.states[document.readyState]) != null ? _ref2 : 100;
      _onreadystatechange = document.onreadystatechange;
      document.onreadystatechange = function () {
        if (_this.states[document.readyState] != null) {
          _this.progress = _this.states[document.readyState];
        }
        return typeof _onreadystatechange === "function" ? _onreadystatechange.apply(null, arguments) : void 0;
      };
    }

    return DocumentMonitor;
  }();

  EventLagMonitor = function () {
    function EventLagMonitor() {
      var avg,
          interval,
          last,
          points,
          samples,
          _this = this;
      this.progress = 0;
      avg = 0;
      samples = [];
      points = 0;
      last = now();
      interval = setInterval(function () {
        var diff;
        diff = now() - last - 50;
        last = now();
        samples.push(diff);
        if (samples.length > options.eventLag.sampleCount) {
          samples.shift();
        }
        avg = avgAmplitude(samples);
        if (++points >= options.eventLag.minSamples && avg < options.eventLag.lagThreshold) {
          _this.progress = 100;
          return clearInterval(interval);
        } else {
          return _this.progress = 100 * (3 / (avg + 3));
        }
      }, 50);
    }

    return EventLagMonitor;
  }();

  Scaler = function () {
    function Scaler(source) {
      this.source = source;
      this.last = this.sinceLastUpdate = 0;
      this.rate = options.initialRate;
      this.catchup = 0;
      this.progress = this.lastProgress = 0;
      if (this.source != null) {
        this.progress = result(this.source, 'progress');
      }
    }

    Scaler.prototype.tick = function (frameTime, val) {
      var scaling;
      if (val == null) {
        val = result(this.source, 'progress');
      }
      if (val >= 100) {
        this.done = true;
      }
      if (val === this.last) {
        this.sinceLastUpdate += frameTime;
      } else {
        if (this.sinceLastUpdate) {
          this.rate = (val - this.last) / this.sinceLastUpdate;
        }
        this.catchup = (val - this.progress) / options.catchupTime;
        this.sinceLastUpdate = 0;
        this.last = val;
      }
      if (val > this.progress) {
        this.progress += this.catchup * frameTime;
      }
      scaling = 1 - Math.pow(this.progress / 100, options.easeFactor);
      this.progress += scaling * this.rate * frameTime;
      this.progress = Math.min(this.lastProgress + options.maxProgressPerFrame, this.progress);
      this.progress = Math.max(0, this.progress);
      this.progress = Math.min(100, this.progress);
      this.lastProgress = this.progress;
      return this.progress;
    };

    return Scaler;
  }();

  sources = null;

  scalers = null;

  bar = null;

  uniScaler = null;

  animation = null;

  cancelAnimation = null;

  Pace.running = false;

  handlePushState = function handlePushState() {
    if (options.restartOnPushState) {
      return Pace.restart();
    }
  };

  if (window.history.pushState != null) {
    _pushState = window.history.pushState;
    window.history.pushState = function () {
      handlePushState();
      return _pushState.apply(window.history, arguments);
    };
  }

  if (window.history.replaceState != null) {
    _replaceState = window.history.replaceState;
    window.history.replaceState = function () {
      handlePushState();
      return _replaceState.apply(window.history, arguments);
    };
  }

  SOURCE_KEYS = {
    ajax: AjaxMonitor,
    elements: ElementMonitor,
    document: DocumentMonitor,
    eventLag: EventLagMonitor
  };

  (init = function init() {
    var type, _j, _k, _len1, _len2, _ref2, _ref3, _ref4;
    Pace.sources = sources = [];
    _ref2 = ['ajax', 'elements', 'document', 'eventLag'];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      type = _ref2[_j];
      if (options[type] !== false) {
        sources.push(new SOURCE_KEYS[type](options[type]));
      }
    }
    _ref4 = (_ref3 = options.extraSources) != null ? _ref3 : [];
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      source = _ref4[_k];
      sources.push(new source(options));
    }
    Pace.bar = bar = new Bar();
    scalers = [];
    return uniScaler = new Scaler();
  })();

  Pace.stop = function () {
    Pace.trigger('stop');
    Pace.running = false;
    bar.destroy();
    cancelAnimation = true;
    if (animation != null) {
      if (typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animation);
      }
      animation = null;
    }
    return init();
  };

  Pace.restart = function () {
    Pace.trigger('restart');
    Pace.stop();
    return Pace.start();
  };

  Pace.go = function () {
    var start;
    Pace.running = true;
    bar.render();
    start = now();
    cancelAnimation = false;
    return animation = runAnimation(function (frameTime, enqueueNextFrame) {
      var avg, count, done, element, elements, i, j, remaining, scaler, scalerList, sum, _j, _k, _len1, _len2, _ref2;
      remaining = 100 - bar.progress;
      count = sum = 0;
      done = true;
      for (i = _j = 0, _len1 = sources.length; _j < _len1; i = ++_j) {
        source = sources[i];
        scalerList = scalers[i] != null ? scalers[i] : scalers[i] = [];
        elements = (_ref2 = source.elements) != null ? _ref2 : [source];
        for (j = _k = 0, _len2 = elements.length; _k < _len2; j = ++_k) {
          element = elements[j];
          scaler = scalerList[j] != null ? scalerList[j] : scalerList[j] = new Scaler(element);
          done &= scaler.done;
          if (scaler.done) {
            continue;
          }
          count++;
          sum += scaler.tick(frameTime);
        }
      }
      avg = sum / count;
      bar.update(uniScaler.tick(frameTime, avg));
      if (bar.done() || done || cancelAnimation) {
        bar.update(100);
        Pace.trigger('done');
        return setTimeout(function () {
          bar.finish();
          Pace.running = false;
          return Pace.trigger('hide');
        }, Math.max(options.ghostTime, Math.max(options.minTime - (now() - start), 0)));
      } else {
        return enqueueNextFrame();
      }
    });
  };

  Pace.start = function (_options) {
    _extend(options, _options);
    Pace.running = true;
    try {
      bar.render();
    } catch (_error) {
      NoTargetError = _error;
    }
    if (!document.querySelector('.pace')) {
      return setTimeout(Pace.start, 50);
    } else {
      Pace.trigger('start');
      return Pace.go();
    }
  };

  if (typeof define === 'function' && define.amd) {
    define(['pace'], function () {
      return Pace;
    });
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    module.exports = Pace;
  } else {
    if (options.startOnPageLoad) {
      Pace.start();
    }
  }
}).call(undefined);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
* TableSorter (FORK) 2.18.3 min - Client-side table sorting with ease!
* Copyright (c) 2007 Christian Bach; fork maintained by Rob Garrison
*/
!function (h) {
  h.extend({ tablesorter: new function () {
      function f() {
        var b = arguments[0],
            a = 1 < arguments.length ? Array.prototype.slice.call(arguments) : b;if ("undefined" !== typeof console && "undefined" !== typeof console.log) console[/error/i.test(b) ? "error" : /warn/i.test(b) ? "warn" : "log"](a);else alert(a);
      }function u(b, a) {
        f(b + " (" + (new Date().getTime() - a.getTime()) + "ms)");
      }function m(b) {
        for (var a in b) {
          return !1;
        }return !0;
      }function t(b, a, c) {
        if (!a) return "";var e,
            d = b.config,
            l = d.textExtraction || "",
            f = "",
            f = "basic" === l ? h(a).attr(d.textAttribute) || a.textContent || a.innerText || h(a).text() || "" : "function" === typeof l ? l(a, b, c) : "function" === typeof (e = g.getColumnData(b, l, c)) ? e(a, b, c) : a.textContent || a.innerText || h(a).text() || "";return h.trim(f);
      }function q(b) {
        var a,
            c,
            e = b.config,
            d = e.$tbodies = e.$table.children("tbody:not(." + e.cssInfoBlock + ")"),
            l,
            v,
            k,
            n,
            p,
            w,
            m,
            r,
            s,
            D = 0,
            y = "",
            z = d.length;if (0 === z) return e.debug ? f("Warning: *Empty table!* Not building a parser cache") : "";e.debug && (s = new Date(), f("Detecting parsers for each column"));a = [];for (c = []; D < z;) {
          l = d[D].rows;if (l[D]) for (v = e.columns, k = 0; k < v; k++) {
            n = e.$headers.filter('[data-column="' + k + '"]:last');p = g.getColumnData(b, e.headers, k);r = g.getParserById(g.getData(n, p, "extractor"));m = g.getParserById(g.getData(n, p, "sorter"));w = "false" === g.getData(n, p, "parser");e.empties[k] = (g.getData(n, p, "empty") || e.emptyTo || (e.emptyToBottom ? "bottom" : "top")).toLowerCase();e.strings[k] = (g.getData(n, p, "string") || e.stringTo || "max").toLowerCase();w && (m = g.getParserById("no-parser"));r || (r = !1);if (!m) a: {
              n = b;p = l;w = -1;m = k;for (var C = void 0, L = void 0, M = g.parsers.length, x = !1, A = "", C = !0; "" === A && C;) {
                w++, p[w] ? (x = p[w].cells[m], A = t(n, x, m), L = h(x), n.config.debug && f("Checking if value was empty on row " + w + ", column: " + m + ': "' + A + '"')) : C = !1;
              }for (; 0 <= --M;) {
                if ((C = g.parsers[M]) && "text" !== C.id && C.is && C.is(A, n, x, L)) {
                  m = C;break a;
                }
              }m = g.getParserById("text");
            }e.debug && (y += "column:" + k + "; extractor:" + r.id + "; parser:" + m.id + "; string:" + e.strings[k] + "; empty: " + e.empties[k] + "\n");c[k] = m;a[k] = r;
          }D += c.length ? z : 1;
        }e.debug && (f(y ? y : "No parsers detected"), u("Completed detecting parsers", s));e.parsers = c;e.extractors = a;
      }function z(b) {
        var a,
            c,
            e,
            d,
            l,
            v,
            k,
            n,
            p,
            m,
            B,
            r = b.config,
            s = r.$table.children("tbody"),
            q = r.extractors,
            y = r.parsers;r.cache = {};r.totalRows = 0;if (!y) return r.debug ? f("Warning: *Empty table!* Not building a cache") : "";r.debug && (n = new Date());r.showProcessing && g.isProcessing(b, !0);for (l = 0; l < s.length; l++) {
          if (B = [], a = r.cache[l] = { normalized: [] }, !s.eq(l).hasClass(r.cssInfoBlock)) {
            p = s[l] && s[l].rows.length || 0;for (e = 0; e < p; ++e) {
              if (m = { child: [] }, v = h(s[l].rows[e]), k = [], v.hasClass(r.cssChildRow) && 0 !== e) c = a.normalized.length - 1, a.normalized[c][r.columns].$row = a.normalized[c][r.columns].$row.add(v), v.prev().hasClass(r.cssChildRow) || v.prev().addClass(g.css.cssHasChild), m.child[c] = h.trim(v[0].textContent || v[0].innerText || v.text() || "");else {
                m.$row = v;m.order = e;for (d = 0; d < r.columns; ++d) {
                  "undefined" === typeof y[d] ? r.debug && f("No parser found for cell:", v[0].cells[d], "does it have a header?") : (c = t(b, v[0].cells[d], d), c = "undefined" === typeof q[d].id ? c : q[d].format(c, b, v[0].cells[d], d), c = "no-parser" === y[d].id ? "" : y[d].format(c, b, v[0].cells[d], d), k.push(r.ignoreCase && "string" === typeof c ? c.toLowerCase() : c), "numeric" === (y[d].type || "").toLowerCase() && (B[d] = Math.max(Math.abs(c) || 0, B[d] || 0)));
                }k[r.columns] = m;a.normalized.push(k);
              }
            }a.colMax = B;r.totalRows += a.normalized.length;
          }
        }r.showProcessing && g.isProcessing(b);r.debug && u("Building cache for " + p + " rows", n);
      }function A(b, a) {
        var c = b.config,
            e = c.widgetOptions,
            d = b.tBodies,
            l = [],
            f = c.cache,
            k,
            n,
            p,
            w,
            q,
            r;if (m(f)) return c.appender ? c.appender(b, l) : b.isUpdating ? c.$table.trigger("updateComplete", b) : "";c.debug && (r = new Date());for (q = 0; q < d.length; q++) {
          if (k = h(d[q]), k.length && !k.hasClass(c.cssInfoBlock)) {
            p = g.processTbody(b, k, !0);k = f[q].normalized;n = k.length;for (w = 0; w < n; w++) {
              l.push(k[w][c.columns].$row), c.appender && (!c.pager || c.pager.removeRows && e.pager_removeRows || c.pager.ajax) || p.append(k[w][c.columns].$row);
            }g.processTbody(b, p, !1);
          }
        }c.appender && c.appender(b, l);c.debug && u("Rebuilt table", r);a || c.appender || g.applyWidget(b);b.isUpdating && c.$table.trigger("updateComplete", b);
      }function F(b) {
        return (/^d/i.test(b) || 1 === b
        );
      }function E(b) {
        var a,
            c,
            e,
            d,
            l,
            v,
            k,
            n = b.config;n.headerList = [];n.headerContent = [];n.debug && (k = new Date());n.columns = g.computeColumnIndex(n.$table.children("thead, tfoot").children("tr"));d = n.cssIcon ? '<i class="' + (n.cssIcon === g.css.icon ? g.css.icon : n.cssIcon + " " + g.css.icon) + '"></i>' : "";n.$headers = h(b).find(n.selectorHeaders).each(function (k) {
          c = h(this);a = g.getColumnData(b, n.headers, k, !0);n.headerContent[k] = h(this).html();"" !== n.headerTemplate && (l = n.headerTemplate.replace(/\{content\}/g, h(this).html()).replace(/\{icon\}/g, d), n.onRenderTemplate && (e = n.onRenderTemplate.apply(c, [k, l])) && "string" === typeof e && (l = e), h(this).html('<div class="' + g.css.headerIn + '">' + l + "</div>"));n.onRenderHeader && n.onRenderHeader.apply(c, [k, n, n.$table]);this.column = parseInt(h(this).attr("data-column"), 10);this.order = F(g.getData(c, a, "sortInitialOrder") || n.sortInitialOrder) ? [1, 0, 2] : [0, 1, 2];this.count = -1;this.lockedOrder = !1;v = g.getData(c, a, "lockedOrder") || !1;"undefined" !== typeof v && !1 !== v && (this.order = this.lockedOrder = F(v) ? [1, 1, 1] : [0, 0, 0]);c.addClass(g.css.header + " " + n.cssHeader);n.headerList[k] = this;c.parent().addClass(g.css.headerRow + " " + n.cssHeaderRow).attr("role", "row");n.tabIndex && c.attr("tabindex", 0);
        }).attr({ scope: "col", role: "columnheader" });H(b);n.debug && (u("Built headers:", k), f(n.$headers));
      }function I(b, a, c) {
        var e = b.config;e.$table.find(e.selectorRemove).remove();q(b);z(b);J(e.$table, a, c);
      }function H(b) {
        var a,
            c,
            e,
            d = b.config;d.$headers.each(function (l, f) {
          c = h(f);e = g.getColumnData(b, d.headers, l, !0);a = "false" === g.getData(f, e, "sorter") || "false" === g.getData(f, e, "parser");f.sortDisabled = a;c[a ? "addClass" : "removeClass"]("sorter-false").attr("aria-disabled", "" + a);b.id && (a ? c.removeAttr("aria-controls") : c.attr("aria-controls", b.id));
        });
      }function G(b) {
        var a,
            c,
            e = b.config,
            d = e.sortList,
            l = d.length,
            f = g.css.sortNone + " " + e.cssNone,
            k = [g.css.sortAsc + " " + e.cssAsc, g.css.sortDesc + " " + e.cssDesc],
            n = [e.cssIconAsc, e.cssIconDesc, e.cssIconNone],
            p = ["ascending", "descending"],
            m = h(b).find("tfoot tr").children().add(e.$extraHeaders).removeClass(k.join(" "));e.$headers.removeClass(k.join(" ")).addClass(f).attr("aria-sort", "none").find("." + e.cssIcon).removeClass(n.join(" ")).addClass(n[2]);for (a = 0; a < l; a++) {
          if (2 !== d[a][1] && (b = e.$headers.not(".sorter-false").filter('[data-column="' + d[a][0] + '"]' + (1 === l ? ":last" : "")), b.length)) {
            for (c = 0; c < b.length; c++) {
              b[c].sortDisabled || b.eq(c).removeClass(f).addClass(k[d[a][1]]).attr("aria-sort", p[d[a][1]]).find("." + e.cssIcon).removeClass(n[2]).addClass(n[d[a][1]]);
            }m.length && m.filter('[data-column="' + d[a][0] + '"]').removeClass(f).addClass(k[d[a][1]]);
          }
        }e.$headers.not(".sorter-false").each(function () {
          var b = h(this),
              a = this.order[(this.count + 1) % (e.sortReset ? 3 : 2)],
              a = b.text() + ": " + g.language[b.hasClass(g.css.sortAsc) ? "sortAsc" : b.hasClass(g.css.sortDesc) ? "sortDesc" : "sortNone"] + g.language[0 === a ? "nextAsc" : 1 === a ? "nextDesc" : "nextNone"];b.attr("aria-label", a);
        });
      }function Q(b) {
        var a,
            c,
            e = b.config;e.widthFixed && 0 === e.$table.children("colgroup").length && (a = h("<colgroup>"), c = h(b).width(), h(b.tBodies).not("." + e.cssInfoBlock).find("tr:first").children(":visible").each(function () {
          a.append(h("<col>").css("width", parseInt(h(this).width() / c * 1E3, 10) / 10 + "%"));
        }), e.$table.prepend(a));
      }function R(b, a) {
        var c,
            e,
            d,
            l,
            g,
            k = b.config,
            f = a || k.sortList;k.sortList = [];h.each(f, function (b, a) {
          l = parseInt(a[0], 10);if (d = k.$headers.filter('[data-column="' + l + '"]:last')[0]) {
            e = (e = ("" + a[1]).match(/^(1|d|s|o|n)/)) ? e[0] : "";switch (e) {case "1":case "d":
                e = 1;break;case "s":
                e = g || 0;break;case "o":
                c = d.order[(g || 0) % (k.sortReset ? 3 : 2)];e = 0 === c ? 1 : 1 === c ? 0 : 2;break;case "n":
                d.count += 1;e = d.order[d.count % (k.sortReset ? 3 : 2)];break;default:
                e = 0;}g = 0 === b ? e : g;c = [l, parseInt(e, 10) || 0];k.sortList.push(c);e = h.inArray(c[1], d.order);d.count = 0 <= e ? e : c[1] % (k.sortReset ? 3 : 2);
          }
        });
      }function S(b, a) {
        return b && b[a] ? b[a].type || "" : "";
      }function N(b, a, c) {
        if (b.isUpdating) return setTimeout(function () {
          N(b, a, c);
        }, 50);var e,
            d,
            l,
            f,
            k = b.config,
            n = !c[k.sortMultiSortKey],
            p = k.$table;p.trigger("sortStart", b);a.count = c[k.sortResetKey] ? 2 : (a.count + 1) % (k.sortReset ? 3 : 2);k.sortRestart && (d = a, k.$headers.each(function () {
          this === d || !n && h(this).is("." + g.css.sortDesc + ",." + g.css.sortAsc) || (this.count = -1);
        }));d = parseInt(h(a).attr("data-column"), 10);if (n) {
          k.sortList = [];if (null !== k.sortForce) for (e = k.sortForce, l = 0; l < e.length; l++) {
            e[l][0] !== d && k.sortList.push(e[l]);
          }e = a.order[a.count];if (2 > e && (k.sortList.push([d, e]), 1 < a.colSpan)) for (l = 1; l < a.colSpan; l++) {
            k.sortList.push([d + l, e]);
          }
        } else {
          if (k.sortAppend && 1 < k.sortList.length) for (l = 0; l < k.sortAppend.length; l++) {
            f = g.isValueInArray(k.sortAppend[l][0], k.sortList), 0 <= f && k.sortList.splice(f, 1);
          }if (0 <= g.isValueInArray(d, k.sortList)) for (l = 0; l < k.sortList.length; l++) {
            f = k.sortList[l], e = k.$headers.filter('[data-column="' + f[0] + '"]:last')[0], f[0] === d && (f[1] = e.order[a.count], 2 === f[1] && (k.sortList.splice(l, 1), e.count = -1));
          } else if (e = a.order[a.count], 2 > e && (k.sortList.push([d, e]), 1 < a.colSpan)) for (l = 1; l < a.colSpan; l++) {
            k.sortList.push([d + l, e]);
          }
        }if (null !== k.sortAppend) for (e = k.sortAppend, l = 0; l < e.length; l++) {
          e[l][0] !== d && k.sortList.push(e[l]);
        }p.trigger("sortBegin", b);setTimeout(function () {
          G(b);K(b);A(b);p.trigger("sortEnd", b);
        }, 1);
      }function K(b) {
        var a,
            c,
            e,
            d,
            l,
            f,
            k,
            h,
            p,
            w,
            q,
            r = 0,
            s = b.config,
            t = s.textSorter || "",
            y = s.sortList,
            x = y.length,
            z = b.tBodies.length;if (!s.serverSideSorting && !m(s.cache)) {
          s.debug && (l = new Date());for (c = 0; c < z; c++) {
            f = s.cache[c].colMax, k = s.cache[c].normalized, k.sort(function (c, l) {
              for (a = 0; a < x; a++) {
                d = y[a][0];h = y[a][1];r = 0 === h;if (s.sortStable && c[d] === l[d] && 1 === x) break;(e = /n/i.test(S(s.parsers, d))) && s.strings[d] ? (e = "boolean" === typeof s.string[s.strings[d]] ? (r ? 1 : -1) * (s.string[s.strings[d]] ? -1 : 1) : s.strings[d] ? s.string[s.strings[d]] || 0 : 0, p = s.numberSorter ? s.numberSorter(c[d], l[d], r, f[d], b) : g["sortNumeric" + (r ? "Asc" : "Desc")](c[d], l[d], e, f[d], d, b)) : (w = r ? c : l, q = r ? l : c, p = "function" === typeof t ? t(w[d], q[d], r, d, b) : "object" === (typeof t === "undefined" ? "undefined" : _typeof(t)) && t.hasOwnProperty(d) ? t[d](w[d], q[d], r, d, b) : g["sortNatural" + (r ? "Asc" : "Desc")](c[d], l[d], d, b, s));if (p) return p;
              }return c[s.columns].order - l[s.columns].order;
            });
          }s.debug && u("Sorting on " + y.toString() + " and dir " + h + " time", l);
        }
      }function O(b, a) {
        var c = b[0];c.isUpdating && b.trigger("updateComplete", c);h.isFunction(a) && a(b[0]);
      }function J(b, a, c) {
        var e = b[0].config.sortList;!1 !== a && !b[0].isProcessing && e.length ? b.trigger("sorton", [e, function () {
          O(b, c);
        }, !0]) : (O(b, c), g.applyWidget(b[0], !1));
      }function P(b) {
        var a = b.config,
            c = a.$table;c.unbind("sortReset update updateRows updateCell updateAll addRows updateComplete sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave ".split(" ").join(a.namespace + " ")).bind("sortReset" + a.namespace, function (c, d) {
          c.stopPropagation();a.sortList = [];G(b);K(b);A(b);h.isFunction(d) && d(b);
        }).bind("updateAll" + a.namespace, function (c, d, l) {
          c.stopPropagation();b.isUpdating = !0;g.refreshWidgets(b, !0, !0);g.restoreHeaders(b);E(b);g.bindEvents(b, a.$headers, !0);P(b);I(b, d, l);
        }).bind("update" + a.namespace + " updateRows" + a.namespace, function (a, c, l) {
          a.stopPropagation();b.isUpdating = !0;H(b);I(b, c, l);
        }).bind("updateCell" + a.namespace, function (e, d, l, g) {
          e.stopPropagation();b.isUpdating = !0;c.find(a.selectorRemove).remove();var k, f, p;f = c.find("tbody");p = h(d);e = f.index(h.fn.closest ? p.closest("tbody") : p.parents("tbody").filter(":first"));k = h.fn.closest ? p.closest("tr") : p.parents("tr").filter(":first");d = p[0];f.length && 0 <= e && (f = f.eq(e).find("tr").index(k), p = p.index(), a.cache[e].normalized[f][a.columns].$row = k, k = "undefined" === typeof a.extractors[p].id ? t(b, d, p) : a.extractors[p].format(t(b, d, p), b, d, p), d = "no-parser" === a.parsers[p].id ? "" : a.parsers[p].format(k, b, d, p), a.cache[e].normalized[f][p] = a.ignoreCase && "string" === typeof d ? d.toLowerCase() : d, "numeric" === (a.parsers[p].type || "").toLowerCase() && (a.cache[e].colMax[p] = Math.max(Math.abs(d) || 0, a.cache[e].colMax[p] || 0)), J(c, l, g));
        }).bind("addRows" + a.namespace, function (e, d, l, g) {
          e.stopPropagation();b.isUpdating = !0;if (m(a.cache)) H(b), I(b, l, g);else {
            d = h(d).attr("role", "row");var k,
                f,
                p,
                u,
                B,
                r = d.filter("tr").length,
                s = c.find("tbody").index(d.parents("tbody").filter(":first"));a.parsers && a.parsers.length || q(b);for (e = 0; e < r; e++) {
              f = d[e].cells.length;B = [];u = { child: [], $row: d.eq(e), order: a.cache[s].normalized.length };for (k = 0; k < f; k++) {
                p = "undefined" === typeof a.extractors[k].id ? t(b, d[e].cells[k], k) : a.extractors[k].format(t(b, d[e].cells[k], k), b, d[e].cells[k], k), p = "no-parser" === a.parsers[k].id ? "" : a.parsers[k].format(p, b, d[e].cells[k], k), B[k] = a.ignoreCase && "string" === typeof p ? p.toLowerCase() : p, "numeric" === (a.parsers[k].type || "").toLowerCase() && (a.cache[s].colMax[k] = Math.max(Math.abs(B[k]) || 0, a.cache[s].colMax[k] || 0));
              }B.push(u);a.cache[s].normalized.push(B);
            }J(c, l, g);
          }
        }).bind("updateComplete" + a.namespace, function () {
          b.isUpdating = !1;
        }).bind("sorton" + a.namespace, function (a, d, l, f) {
          var k = b.config;a.stopPropagation();c.trigger("sortStart", this);R(b, d);G(b);k.delayInit && m(k.cache) && z(b);c.trigger("sortBegin", this);K(b);A(b, f);c.trigger("sortEnd", this);g.applyWidget(b);h.isFunction(l) && l(b);
        }).bind("appendCache" + a.namespace, function (a, c, g) {
          a.stopPropagation();A(b, g);h.isFunction(c) && c(b);
        }).bind("updateCache" + a.namespace, function (c, d) {
          a.parsers && a.parsers.length || q(b);z(b);h.isFunction(d) && d(b);
        }).bind("applyWidgetId" + a.namespace, function (c, d) {
          c.stopPropagation();g.getWidgetById(d).format(b, a, a.widgetOptions);
        }).bind("applyWidgets" + a.namespace, function (a, c) {
          a.stopPropagation();g.applyWidget(b, c);
        }).bind("refreshWidgets" + a.namespace, function (a, c, l) {
          a.stopPropagation();g.refreshWidgets(b, c, l);
        }).bind("destroy" + a.namespace, function (a, c, l) {
          a.stopPropagation();g.destroy(b, c, l);
        }).bind("resetToLoadState" + a.namespace, function () {
          g.refreshWidgets(b, !0, !0);a = h.extend(!0, g.defaults, a.originalSettings);b.hasInitialized = !1;g.setup(b, a);
        });
      }var g = this;g.version = "2.18.3";g.parsers = [];g.widgets = [];g.defaults = { theme: "default", widthFixed: !1, showProcessing: !1, headerTemplate: "{content}", onRenderTemplate: null, onRenderHeader: null, cancelSelection: !0, tabIndex: !0, dateFormat: "mmddyyyy", sortMultiSortKey: "shiftKey", sortResetKey: "ctrlKey", usNumberFormat: !0, delayInit: !1, serverSideSorting: !1, headers: {}, ignoreCase: !0, sortForce: null, sortList: [], sortAppend: null, sortStable: !1, sortInitialOrder: "asc", sortLocaleCompare: !1, sortReset: !1, sortRestart: !1, emptyTo: "bottom", stringTo: "max", textExtraction: "basic", textAttribute: "data-text", textSorter: null, numberSorter: null, widgets: [], widgetOptions: { zebra: ["even", "odd"] }, initWidgets: !0, widgetClass: "widget-{name}", initialized: null, tableClass: "", cssAsc: "", cssDesc: "", cssNone: "", cssHeader: "", cssHeaderRow: "", cssProcessing: "", cssChildRow: "tablesorter-childRow", cssIcon: "tablesorter-icon", cssIconNone: "", cssIconAsc: "", cssIconDesc: "", cssInfoBlock: "tablesorter-infoOnly", cssAllowClicks: "tablesorter-allowClicks", selectorHeaders: "> thead th, > thead td", selectorSort: "th, td", selectorRemove: ".remove-me", debug: !1, headerList: [], empties: {}, strings: {}, parsers: [] };g.css = { table: "tablesorter", cssHasChild: "tablesorter-hasChildRow", childRow: "tablesorter-childRow", header: "tablesorter-header", headerRow: "tablesorter-headerRow", headerIn: "tablesorter-header-inner", icon: "tablesorter-icon", info: "tablesorter-infoOnly", processing: "tablesorter-processing", sortAsc: "tablesorter-headerAsc", sortDesc: "tablesorter-headerDesc", sortNone: "tablesorter-headerUnSorted" };g.language = { sortAsc: "Ascending sort applied, ", sortDesc: "Descending sort applied, ", sortNone: "No sort applied, ", nextAsc: "activate to apply an ascending sort", nextDesc: "activate to apply a descending sort", nextNone: "activate to remove the sort" };g.log = f;g.benchmark = u;g.construct = function (b) {
        return this.each(function () {
          var a = h.extend(!0, {}, g.defaults, b);a.originalSettings = b;!this.hasInitialized && g.buildTable && "TABLE" !== this.tagName ? g.buildTable(this, a) : g.setup(this, a);
        });
      };g.setup = function (b, a) {
        if (!b || !b.tHead || 0 === b.tBodies.length || !0 === b.hasInitialized) return a.debug ? f("ERROR: stopping initialization! No table, thead, tbody or tablesorter has already been initialized") : "";var c = "",
            e = h(b),
            d = h.metadata;b.hasInitialized = !1;b.isProcessing = !0;b.config = a;h.data(b, "tablesorter", a);a.debug && h.data(b, "startoveralltimer", new Date());a.supportsDataObject = function (a) {
          a[0] = parseInt(a[0], 10);return 1 < a[0] || 1 === a[0] && 4 <= parseInt(a[1], 10);
        }(h.fn.jquery.split("."));a.string = { max: 1, min: -1, emptymin: 1, emptymax: -1, zero: 0, none: 0, "null": 0, top: !0, bottom: !1 };a.emptyTo = a.emptyTo.toLowerCase();a.stringTo = a.stringTo.toLowerCase();/tablesorter\-/.test(e.attr("class")) || (c = "" !== a.theme ? " tablesorter-" + a.theme : "");a.table = b;a.$table = e.addClass(g.css.table + " " + a.tableClass + c).attr("role", "grid");a.$headers = e.find(a.selectorHeaders);a.namespace = a.namespace ? "." + a.namespace.replace(/\W/g, "") : ".tablesorter" + Math.random().toString(16).slice(2);a.$table.children().children("tr").attr("role", "row");a.$tbodies = e.children("tbody:not(." + a.cssInfoBlock + ")").attr({ "aria-live": "polite", "aria-relevant": "all" });a.$table.children("caption").length && (c = a.$table.children("caption")[0], c.id || (c.id = a.namespace.slice(1) + "caption"), a.$table.attr("aria-labelledby", c.id));a.widgetInit = {};a.textExtraction = a.$table.attr("data-text-extraction") || a.textExtraction || "basic";E(b);Q(b);q(b);a.totalRows = 0;a.delayInit || z(b);g.bindEvents(b, a.$headers, !0);P(b);a.supportsDataObject && "undefined" !== typeof e.data().sortlist ? a.sortList = e.data().sortlist : d && e.metadata() && e.metadata().sortlist && (a.sortList = e.metadata().sortlist);g.applyWidget(b, !0);0 < a.sortList.length ? e.trigger("sorton", [a.sortList, {}, !a.initWidgets, !0]) : (G(b), a.initWidgets && g.applyWidget(b, !1));a.showProcessing && e.unbind("sortBegin" + a.namespace + " sortEnd" + a.namespace).bind("sortBegin" + a.namespace + " sortEnd" + a.namespace, function (c) {
          clearTimeout(a.processTimer);g.isProcessing(b);"sortBegin" === c.type && (a.processTimer = setTimeout(function () {
            g.isProcessing(b, !0);
          }, 500));
        });b.hasInitialized = !0;b.isProcessing = !1;a.debug && g.benchmark("Overall initialization time", h.data(b, "startoveralltimer"));e.trigger("tablesorter-initialized", b);"function" === typeof a.initialized && a.initialized(b);
      };g.getColumnData = function (b, a, c, e) {
        if ("undefined" !== typeof a && null !== a) {
          b = h(b)[0];var d;b = b.config;if (a[c]) return e ? a[c] : a[b.$headers.index(b.$headers.filter('[data-column="' + c + '"]:last'))];for (d in a) {
            if ("string" === typeof d && (e = b.$headers.filter('[data-column="' + c + '"]:last').filter(d).add(b.$headers.filter('[data-column="' + c + '"]:last').find(d)), e.length)) return a[d];
          }
        }
      };g.computeColumnIndex = function (b) {
        var a = [],
            c = 0,
            e,
            d,
            g,
            f,
            k,
            n,
            p,
            m,
            u,
            r;for (e = 0; e < b.length; e++) {
          for (k = b[e].cells, d = 0; d < k.length; d++) {
            g = k[d];f = h(g);n = g.parentNode.rowIndex;f.index();p = g.rowSpan || 1;m = g.colSpan || 1;"undefined" === typeof a[n] && (a[n] = []);for (g = 0; g < a[n].length + 1; g++) {
              if ("undefined" === typeof a[n][g]) {
                u = g;break;
              }
            }c = Math.max(u, c);f.attr({ "data-column": u });for (g = n; g < n + p; g++) {
              for ("undefined" === typeof a[g] && (a[g] = []), r = a[g], f = u; f < u + m; f++) {
                r[f] = "x";
              }
            }
          }
        }return c + 1;
      };g.isProcessing = function (b, a, c) {
        b = h(b);var e = b[0].config,
            d = c || b.find("." + g.css.header);a ? ("undefined" !== typeof c && 0 < e.sortList.length && (d = d.filter(function () {
          return this.sortDisabled ? !1 : 0 <= g.isValueInArray(parseFloat(h(this).attr("data-column")), e.sortList);
        })), b.add(d).addClass(g.css.processing + " " + e.cssProcessing)) : b.add(d).removeClass(g.css.processing + " " + e.cssProcessing);
      };g.processTbody = function (b, a, c) {
        b = h(b)[0];if (c) return b.isProcessing = !0, a.before('<span class="tablesorter-savemyplace"/>'), c = h.fn.detach ? a.detach() : a.remove();c = h(b).find("span.tablesorter-savemyplace");a.insertAfter(c);c.remove();b.isProcessing = !1;
      };g.clearTableBody = function (b) {
        h(b)[0].config.$tbodies.children().detach();
      };g.bindEvents = function (b, a, c) {
        b = h(b)[0];var e,
            d = b.config;!0 !== c && (d.$extraHeaders = d.$extraHeaders ? d.$extraHeaders.add(a) : a);a.find(d.selectorSort).add(a.filter(d.selectorSort)).unbind(["mousedown", "mouseup", "sort", "keyup", ""].join(d.namespace + " ")).bind(["mousedown", "mouseup", "sort", "keyup", ""].join(d.namespace + " "), function (c, g) {
          var f;f = c.type;if (!(1 !== (c.which || c.button) && !/sort|keyup/.test(f) || "keyup" === f && 13 !== c.which || "mouseup" === f && !0 !== g && 250 < new Date().getTime() - e)) {
            if ("mousedown" === f) return e = new Date().getTime(), /(input|select|button|textarea)/i.test(c.target.tagName) || h(c.target).closest("td,th").hasClass(d.cssAllowClicks) ? "" : !d.cancelSelection;d.delayInit && m(d.cache) && z(b);f = h.fn.closest ? h(this).closest("th, td")[0] : /TH|TD/.test(this.tagName) ? this : h(this).parents("th, td")[0];f = d.$headers[a.index(f)];f.sortDisabled || N(b, f, c);
          }
        });d.cancelSelection && a.attr("unselectable", "on").bind("selectstart", !1).css({ "user-select": "none", MozUserSelect: "none" });
      };g.restoreHeaders = function (b) {
        var a = h(b)[0].config;a.$table.find(a.selectorHeaders).each(function (b) {
          h(this).find("." + g.css.headerIn).length && h(this).html(a.headerContent[b]);
        });
      };g.destroy = function (b, a, c) {
        b = h(b)[0];if (b.hasInitialized) {
          g.refreshWidgets(b, !0, !0);var e = h(b),
              d = b.config,
              f = e.find("thead:first"),
              m = f.find("tr." + g.css.headerRow).removeClass(g.css.headerRow + " " + d.cssHeaderRow),
              k = e.find("tfoot:first > tr").children("th, td");!1 === a && 0 <= h.inArray("uitheme", d.widgets) && (e.trigger("applyWidgetId", ["uitheme"]), e.trigger("applyWidgetId", ["zebra"]));f.find("tr").not(m).remove();e.removeData("tablesorter").unbind("sortReset update updateAll updateRows updateCell addRows updateComplete sorton appendCache updateCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave keypress sortBegin sortEnd resetToLoadState ".split(" ").join(d.namespace + " "));d.$headers.add(k).removeClass([g.css.header, d.cssHeader, d.cssAsc, d.cssDesc, g.css.sortAsc, g.css.sortDesc, g.css.sortNone].join(" ")).removeAttr("data-column").removeAttr("aria-label").attr("aria-disabled", "true");m.find(d.selectorSort).unbind(["mousedown", "mouseup", "keypress", ""].join(d.namespace + " "));g.restoreHeaders(b);e.toggleClass(g.css.table + " " + d.tableClass + " tablesorter-" + d.theme, !1 === a);b.hasInitialized = !1;delete b.config.cache;"function" === typeof c && c(b);
        }
      };g.regex = { chunk: /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, chunks: /(^\\0|\\0$)/, hex: /^0x[0-9a-f]+$/i };g.sortNatural = function (b, a) {
        if (b === a) return 0;var c, e, d, f, h, k;e = g.regex;if (e.hex.test(a)) {
          c = parseInt(b.match(e.hex), 16);d = parseInt(a.match(e.hex), 16);if (c < d) return -1;if (c > d) return 1;
        }c = b.replace(e.chunk, "\\0$1\\0").replace(e.chunks, "").split("\\0");e = a.replace(e.chunk, "\\0$1\\0").replace(e.chunks, "").split("\\0");k = Math.max(c.length, e.length);for (h = 0; h < k; h++) {
          d = isNaN(c[h]) ? c[h] || 0 : parseFloat(c[h]) || 0;f = isNaN(e[h]) ? e[h] || 0 : parseFloat(e[h]) || 0;if (isNaN(d) !== isNaN(f)) return isNaN(d) ? 1 : -1;(typeof d === "undefined" ? "undefined" : _typeof(d)) !== (typeof f === "undefined" ? "undefined" : _typeof(f)) && (d += "", f += "");if (d < f) return -1;if (d > f) return 1;
        }return 0;
      };g.sortNaturalAsc = function (b, a, c, e, d) {
        if (b === a) return 0;c = d.string[d.empties[c] || d.emptyTo];return "" === b && 0 !== c ? "boolean" === typeof c ? c ? -1 : 1 : -c || -1 : "" === a && 0 !== c ? "boolean" === typeof c ? c ? 1 : -1 : c || 1 : g.sortNatural(b, a);
      };g.sortNaturalDesc = function (b, a, c, e, d) {
        if (b === a) return 0;c = d.string[d.empties[c] || d.emptyTo];return "" === b && 0 !== c ? "boolean" === typeof c ? c ? -1 : 1 : c || 1 : "" === a && 0 !== c ? "boolean" === typeof c ? c ? 1 : -1 : -c || -1 : g.sortNatural(a, b);
      };g.sortText = function (b, a) {
        return b > a ? 1 : b < a ? -1 : 0;
      };g.getTextValue = function (b, a, c) {
        if (c) {
          var e = b ? b.length : 0,
              d = c + a;for (c = 0; c < e; c++) {
            d += b.charCodeAt(c);
          }return a * d;
        }return 0;
      };g.sortNumericAsc = function (b, a, c, e, d, f) {
        if (b === a) return 0;f = f.config;d = f.string[f.empties[d] || f.emptyTo];if ("" === b && 0 !== d) return "boolean" === typeof d ? d ? -1 : 1 : -d || -1;if ("" === a && 0 !== d) return "boolean" === typeof d ? d ? 1 : -1 : d || 1;isNaN(b) && (b = g.getTextValue(b, c, e));isNaN(a) && (a = g.getTextValue(a, c, e));return b - a;
      };g.sortNumericDesc = function (b, a, c, e, d, f) {
        if (b === a) return 0;f = f.config;d = f.string[f.empties[d] || f.emptyTo];if ("" === b && 0 !== d) return "boolean" === typeof d ? d ? -1 : 1 : d || 1;if ("" === a && 0 !== d) return "boolean" === typeof d ? d ? 1 : -1 : -d || -1;isNaN(b) && (b = g.getTextValue(b, c, e));isNaN(a) && (a = g.getTextValue(a, c, e));return a - b;
      };g.sortNumeric = function (b, a) {
        return b - a;
      };g.characterEquivalents = { a: "\xE1\xE0\xE2\xE3\xE4\u0105\xE5", A: "\xC1\xC0\xC2\xC3\xC4\u0104\xC5", c: "\xE7\u0107\u010D", C: "\xC7\u0106\u010C", e: "\xE9\xE8\xEA\xEB\u011B\u0119", E: "\xC9\xC8\xCA\xCB\u011A\u0118", i: "\xED\xEC\u0130\xEE\xEF\u0131", I: "\xCD\xCC\u0130\xCE\xCF", o: "\xF3\xF2\xF4\xF5\xF6", O: "\xD3\xD2\xD4\xD5\xD6", ss: "\xDF", SS: "\u1E9E", u: "\xFA\xF9\xFB\xFC\u016F", U: "\xDA\xD9\xDB\xDC\u016E" };g.replaceAccents = function (b) {
        var a,
            c = "[",
            e = g.characterEquivalents;if (!g.characterRegex) {
          g.characterRegexArray = {};for (a in e) {
            "string" === typeof a && (c += e[a], g.characterRegexArray[a] = new RegExp("[" + e[a] + "]", "g"));
          }g.characterRegex = new RegExp(c + "]");
        }if (g.characterRegex.test(b)) for (a in e) {
          "string" === typeof a && (b = b.replace(g.characterRegexArray[a], a));
        }return b;
      };g.isValueInArray = function (b, a) {
        var c,
            e = a.length;for (c = 0; c < e; c++) {
          if (a[c][0] === b) return c;
        }return -1;
      };g.addParser = function (b) {
        var a,
            c = g.parsers.length,
            e = !0;for (a = 0; a < c; a++) {
          g.parsers[a].id.toLowerCase() === b.id.toLowerCase() && (e = !1);
        }e && g.parsers.push(b);
      };g.getParserById = function (b) {
        if ("false" == b) return !1;var a,
            c = g.parsers.length;for (a = 0; a < c; a++) {
          if (g.parsers[a].id.toLowerCase() === b.toString().toLowerCase()) return g.parsers[a];
        }return !1;
      };g.addWidget = function (b) {
        g.widgets.push(b);
      };g.hasWidget = function (b, a) {
        b = h(b);return b.length && b[0].config && b[0].config.widgetInit[a] || !1;
      };g.getWidgetById = function (b) {
        var a,
            c,
            e = g.widgets.length;for (a = 0; a < e; a++) {
          if ((c = g.widgets[a]) && c.hasOwnProperty("id") && c.id.toLowerCase() === b.toLowerCase()) return c;
        }
      };g.applyWidget = function (b, a) {
        b = h(b)[0];var c = b.config,
            e = c.widgetOptions,
            d = " " + c.table.className + " ",
            f = [],
            m,
            k,
            n;!1 !== a && b.hasInitialized && (b.isApplyingWidgets || b.isUpdating) || (c.debug && (m = new Date()), n = new RegExp("\\s" + c.widgetClass.replace(/\{name\}/i, "([\\w-]+)") + "\\s", "g"), d.match(n) && (d = d.match(n)) && h.each(d, function (a, b) {
          c.widgets.push(b.replace(n, "$1"));
        }), c.widgets.length && (b.isApplyingWidgets = !0, c.widgets = h.grep(c.widgets, function (a, b) {
          return h.inArray(a, c.widgets) === b;
        }), h.each(c.widgets || [], function (a, b) {
          (n = g.getWidgetById(b)) && n.id && (n.priority || (n.priority = 10), f[a] = n);
        }), f.sort(function (a, b) {
          return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;
        }), h.each(f, function (d, f) {
          if (f) {
            if (a || !c.widgetInit[f.id]) c.widgetInit[f.id] = !0, f.hasOwnProperty("options") && (e = b.config.widgetOptions = h.extend(!0, {}, f.options, e)), f.hasOwnProperty("init") && (c.debug && (k = new Date()), f.init(b, f, c, e), c.debug && g.benchmark("Initializing " + f.id + " widget", k));!a && f.hasOwnProperty("format") && (c.debug && (k = new Date()), f.format(b, c, e, !1), c.debug && g.benchmark((a ? "Initializing " : "Applying ") + f.id + " widget", k));
          }
        })), setTimeout(function () {
          b.isApplyingWidgets = !1;h.data(b, "lastWidgetApplication", new Date());
        }, 0), c.debug && (d = c.widgets.length, u("Completed " + (!0 === a ? "initializing " : "applying ") + d + " widget" + (1 !== d ? "s" : ""), m)));
      };g.refreshWidgets = function (b, a, c) {
        b = h(b)[0];var e,
            d = b.config,
            l = d.widgets,
            m = g.widgets,
            k = m.length;for (e = 0; e < k; e++) {
          m[e] && m[e].id && (a || 0 > h.inArray(m[e].id, l)) && (d.debug && f('Refeshing widgets: Removing "' + m[e].id + '"'), m[e].hasOwnProperty("remove") && d.widgetInit[m[e].id] && (m[e].remove(b, d, d.widgetOptions), d.widgetInit[m[e].id] = !1));
        }!0 !== c && g.applyWidget(b, a);
      };g.getData = function (b, a, c) {
        var e = "";b = h(b);var d, f;if (!b.length) return "";d = h.metadata ? b.metadata() : !1;f = " " + (b.attr("class") || "");"undefined" !== typeof b.data(c) || "undefined" !== typeof b.data(c.toLowerCase()) ? e += b.data(c) || b.data(c.toLowerCase()) : d && "undefined" !== typeof d[c] ? e += d[c] : a && "undefined" !== typeof a[c] ? e += a[c] : " " !== f && f.match(" " + c + "-") && (e = f.match(new RegExp("\\s" + c + "-([\\w-]+)"))[1] || "");return h.trim(e);
      };g.formatFloat = function (b, a) {
        if ("string" !== typeof b || "" === b) return b;var c;b = (a && a.config ? !1 !== a.config.usNumberFormat : "undefined" !== typeof a ? a : 1) ? b.replace(/,/g, "") : b.replace(/[\s|\.]/g, "").replace(/,/g, ".");/^\s*\([.\d]+\)/.test(b) && (b = b.replace(/^\s*\(([.\d]+)\)/, "-$1"));c = parseFloat(b);return isNaN(c) ? h.trim(b) : c;
      };g.isDigit = function (b) {
        return isNaN(b) ? /^[\-+(]?\d+[)]?$/.test(b.toString().replace(/[,.'"\s]/g, "")) : !0;
      };
    }() });var q = h.tablesorter;h.fn.extend({ tablesorter: q.construct });q.addParser({ id: "no-parser", is: function is() {
      return !1;
    }, format: function format() {
      return "";
    }, type: "text" });q.addParser({ id: "text", is: function is() {
      return !0;
    }, format: function format(f, u) {
      var m = u.config;f && (f = h.trim(m.ignoreCase ? f.toLocaleLowerCase() : f), f = m.sortLocaleCompare ? q.replaceAccents(f) : f);return f;
    }, type: "text" });q.addParser({ id: "digit", is: function is(f) {
      return q.isDigit(f);
    }, format: function format(f, u) {
      var m = q.formatFloat((f || "").replace(/[^\w,. \-()]/g, ""), u);return f && "number" === typeof m ? m : f ? h.trim(f && u.config.ignoreCase ? f.toLocaleLowerCase() : f) : f;
    }, type: "numeric" });q.addParser({ id: "currency", is: function is(f) {
      return (/^\(?\d+[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]|[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]\d+\)?$/.test((f || "").replace(/[+\-,. ]/g, ""))
      );
    }, format: function format(f, u) {
      var m = q.formatFloat((f || "").replace(/[^\w,. \-()]/g, ""), u);return f && "number" === typeof m ? m : f ? h.trim(f && u.config.ignoreCase ? f.toLocaleLowerCase() : f) : f;
    }, type: "numeric" });q.addParser({ id: "url", is: function is(f) {
      return (/^(https?|ftp|file):\/\//.test(f)
      );
    }, format: function format(f) {
      return f ? h.trim(f.replace(/(https?|ftp|file):\/\//, "")) : f;
    }, parsed: !0, type: "text" });q.addParser({ id: "isoDate", is: function is(f) {
      return (/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}/.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date(f.replace(/-/g, "/")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "percent", is: function is(f) {
      return (/(\d\s*?%|%\s*?\d)/.test(f) && 15 > f.length
      );
    }, format: function format(f, h) {
      return f ? q.formatFloat(f.replace(/%/g, ""), h) : f;
    }, type: "numeric" });q.addParser({ id: "image", is: function is(f, h, m, q) {
      return 0 < q.find("img").length;
    }, format: function format(f, u, m) {
      return h(m).find("img").attr(u.config.imgAttr || "alt") || f;
    }, parsed: !0, type: "text" });q.addParser({ id: "usLongDate", is: function is(f) {
      return (/^[A-Z]{3,10}\.?\s+\d{1,2},?\s+(\d{4})(\s+\d{1,2}:\d{2}(:\d{2})?(\s+[AP]M)?)?$/i.test(f) || /^\d{1,2}\s+[A-Z]{3,10}\s+\d{4}/i.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date(f.replace(/(\S)([AP]M)$/i, "$1 $2")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "shortDate", is: function is(f) {
      return (/(^\d{1,2}[\/\s]\d{1,2}[\/\s]\d{4})|(^\d{4}[\/\s]\d{1,2}[\/\s]\d{1,2})/.test((f || "").replace(/\s+/g, " ").replace(/[\-.,]/g, "/"))
      );
    }, format: function format(f, h, m, t) {
      if (f) {
        m = h.config;var x = m.$headers.filter("[data-column=" + t + "]:last");t = x.length && x[0].dateFormat || q.getData(x, q.getColumnData(h, m.headers, t), "dateFormat") || m.dateFormat;h = f.replace(/\s+/g, " ").replace(/[\-.,]/g, "/");"mmddyyyy" === t ? h = h.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$1/$2") : "ddmmyyyy" === t ? h = h.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$2/$1") : "yyyymmdd" === t && (h = h.replace(/(\d{4})[\/\s](\d{1,2})[\/\s](\d{1,2})/, "$1/$2/$3"));h = new Date(h);return h instanceof Date && isFinite(h) ? h.getTime() : f;
      }return f;
    }, type: "numeric" });q.addParser({ id: "time", is: function is(f) {
      return (/^(([0-2]?\d:[0-5]\d)|([0-1]?\d:[0-5]\d\s?([AP]M)))$/i.test(f)
      );
    }, format: function format(f, h) {
      var m = f ? new Date("2000/01/01 " + f.replace(/(\S)([AP]M)$/i, "$1 $2")) : f;return m instanceof Date && isFinite(m) ? m.getTime() : f;
    }, type: "numeric" });q.addParser({ id: "metadata", is: function is() {
      return !1;
    }, format: function format(f, q, m) {
      f = q.config;f = f.parserMetadataName ? f.parserMetadataName : "sortValue";return h(m).metadata()[f];
    }, type: "numeric" });q.addWidget({ id: "zebra", priority: 90, format: function format(f, q, m) {
      var t,
          x,
          z,
          A,
          F = new RegExp(q.cssChildRow, "i"),
          E = q.$tbodies;for (f = 0; f < E.length; f++) {
        z = 0, t = E.eq(f), t = t.children("tr:visible").not(q.selectorRemove), t.each(function () {
          x = h(this);F.test(this.className) || z++;A = 0 === z % 2;x.removeClass(m.zebra[A ? 1 : 0]).addClass(m.zebra[A ? 0 : 1]);
        });
      }
    }, remove: function remove(f, h, m) {
      var t;h = h.$tbodies;var x = (m.zebra || ["even", "odd"]).join(" ");for (m = 0; m < h.length; m++) {
        t = q.processTbody(f, h.eq(m), !0), t.children().removeClass(x), q.processTbody(f, t, !1);
      }
    } });
}(jQuery);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! tableSorter (FORK) 2.16+ widgets - updated 11/7/2014 (v2.18.3)
 *
 * Column Styles
 * Column Filters
 * Column Resizing
 * Sticky Header
 * UI Theme (generalized)
 * Save Sort
 * [ "columns", "filter", "resizable", "stickyHeaders", "uitheme", "saveSort" ]
 */
/*jshint browser:true, jquery:true, unused:false, loopfunc:true */
/*global jQuery: false, localStorage: false */
;(function ($, window) {
	"use strict";

	var ts = $.tablesorter = $.tablesorter || {};

	ts.themes = {
		"bootstrap": {
			table: 'table table-bordered table-striped',
			caption: 'caption',
			header: 'bootstrap-header', // give the header a gradient background
			footerRow: '',
			footerCells: '',
			icons: '', // add "icon-white" to make them white; this icon class is added to the <i> in the header
			sortNone: 'bootstrap-icon-unsorted',
			sortAsc: 'icon-chevron-up glyphicon glyphicon-chevron-up',
			sortDesc: 'icon-chevron-down glyphicon glyphicon-chevron-down',
			active: '', // applied when column is sorted
			hover: '', // use custom css here - bootstrap class may not override it
			filterRow: '', // filter row class
			even: '', // even row zebra striping
			odd: '' // odd row zebra striping
		},
		"jui": {
			table: 'ui-widget ui-widget-content ui-corner-all', // table classes
			caption: 'ui-widget-content',
			header: 'ui-widget-header ui-corner-all ui-state-default', // header classes
			footerRow: '',
			footerCells: '',
			icons: 'ui-icon', // icon class added to the <i> in the header
			sortNone: 'ui-icon-carat-2-n-s',
			sortAsc: 'ui-icon-carat-1-n',
			sortDesc: 'ui-icon-carat-1-s',
			active: 'ui-state-active', // applied when column is sorted
			hover: 'ui-state-hover', // hover class
			filterRow: '',
			even: 'ui-widget-content', // even row zebra striping
			odd: 'ui-state-default' // odd row zebra striping
		}
	};

	$.extend(ts.css, {
		filterRow: 'tablesorter-filter-row', // filter
		filter: 'tablesorter-filter',
		wrapper: 'tablesorter-wrapper', // ui theme & resizable
		resizer: 'tablesorter-resizer', // resizable
		sticky: 'tablesorter-stickyHeader', // stickyHeader
		stickyVis: 'tablesorter-sticky-visible',
		stickyWrap: 'tablesorter-sticky-wrapper'
	});

	// *** Store data in local storage, with a cookie fallback ***
	/* IE7 needs JSON library for JSON.stringify - (http://caniuse.com/#search=json)
    if you need it, then include https://github.com/douglascrockford/JSON-js
 
    $.parseJSON is not available is jQuery versions older than 1.4.1, using older
    versions will only allow storing information for one page at a time
 
    // *** Save data (JSON format only) ***
    // val must be valid JSON... use http://jsonlint.com/ to ensure it is valid
    var val = { "mywidget" : "data1" }; // valid JSON uses double quotes
    // $.tablesorter.storage(table, key, val);
    $.tablesorter.storage(table, 'tablesorter-mywidget', val);
 
    // *** Get data: $.tablesorter.storage(table, key); ***
    v = $.tablesorter.storage(table, 'tablesorter-mywidget');
    // val may be empty, so also check for your data
    val = (v && v.hasOwnProperty('mywidget')) ? v.mywidget : '';
    alert(val); // "data1" if saved, or "" if not
 */
	ts.storage = function (table, key, value, options) {
		table = $(table)[0];
		var cookieIndex,
		    cookies,
		    date,
		    hasLocalStorage = false,
		    values = {},
		    c = table.config,
		    $table = $(table),
		    id = options && options.id || $table.attr(options && options.group || 'data-table-group') || table.id || $('.tablesorter').index($table),
		    url = options && options.url || $table.attr(options && options.page || 'data-table-page') || c && c.fixedUrl || window.location.pathname;
		// https://gist.github.com/paulirish/5558557
		if ("localStorage" in window) {
			try {
				window.localStorage.setItem('_tmptest', 'temp');
				hasLocalStorage = true;
				window.localStorage.removeItem('_tmptest');
			} catch (error) {}
		}
		// *** get value ***
		if ($.parseJSON) {
			if (hasLocalStorage) {
				values = $.parseJSON(localStorage[key] || '{}');
			} else {
				// old browser, using cookies
				cookies = document.cookie.split(/[;\s|=]/);
				// add one to get from the key to the value
				cookieIndex = $.inArray(key, cookies) + 1;
				values = cookieIndex !== 0 ? $.parseJSON(cookies[cookieIndex] || '{}') : {};
			}
		}
		// allow value to be an empty string too
		if ((value || value === '') && window.JSON && JSON.hasOwnProperty('stringify')) {
			// add unique identifiers = url pathname > table ID/index on page > data
			if (!values[url]) {
				values[url] = {};
			}
			values[url][id] = value;
			// *** set value ***
			if (hasLocalStorage) {
				localStorage[key] = JSON.stringify(values);
			} else {
				date = new Date();
				date.setTime(date.getTime() + 31536e+6); // 365 days
				document.cookie = key + '=' + JSON.stringify(values).replace(/\"/g, '\"') + '; expires=' + date.toGMTString() + '; path=/';
			}
		} else {
			return values && values[url] ? values[url][id] : '';
		}
	};

	// Add a resize event to table headers
	// **************************
	ts.addHeaderResizeEvent = function (table, disable, settings) {
		table = $(table)[0]; // make sure we're usig a dom element
		var headers,
		    defaults = {
			timer: 250
		},
		    options = $.extend({}, defaults, settings),
		    c = table.config,
		    wo = c.widgetOptions,
		    checkSizes = function checkSizes(triggerEvent) {
			wo.resize_flag = true;
			headers = [];
			c.$headers.each(function () {
				var $header = $(this),
				    sizes = $header.data('savedSizes') || [0, 0],
				    // fixes #394
				width = this.offsetWidth,
				    height = this.offsetHeight;
				if (width !== sizes[0] || height !== sizes[1]) {
					$header.data('savedSizes', [width, height]);
					headers.push(this);
				}
			});
			if (headers.length && triggerEvent !== false) {
				c.$table.trigger('resize', [headers]);
			}
			wo.resize_flag = false;
		};
		checkSizes(false);
		clearInterval(wo.resize_timer);
		if (disable) {
			wo.resize_flag = false;
			return false;
		}
		wo.resize_timer = setInterval(function () {
			if (wo.resize_flag) {
				return;
			}
			checkSizes();
		}, options.timer);
	};

	// Widget: General UI theme
	// "uitheme" option in "widgetOptions"
	// **************************
	ts.addWidget({
		id: "uitheme",
		priority: 10,
		format: function format(table, c, wo) {
			var i,
			    time,
			    classes,
			    $header,
			    $icon,
			    $tfoot,
			    $h,
			    oldtheme,
			    oldremove,
			    themesAll = ts.themes,
			    $table = c.$table,
			    $headers = c.$headers,
			    theme = c.theme || 'jui',
			    themes = themesAll[theme] || themesAll.jui,
			    remove = [themes.sortNone, themes.sortDesc, themes.sortAsc, themes.active].join(' ');
			if (c.debug) {
				time = new Date();
			}
			// initialization code - run once
			if (!$table.hasClass('tablesorter-' + theme) || c.theme !== c.appliedTheme || !table.hasInitialized) {
				oldtheme = themes[c.appliedTheme] || {};
				oldremove = oldtheme ? [oldtheme.sortNone, oldtheme.sortDesc, oldtheme.sortAsc, oldtheme.active].join(' ') : '';
				if (oldtheme) {
					wo.zebra[0] = wo.zebra[0].replace(' ' + oldtheme.even, '');
					wo.zebra[1] = wo.zebra[1].replace(' ' + oldtheme.odd, '');
				}
				// update zebra stripes
				if (themes.even !== '') {
					wo.zebra[0] += ' ' + themes.even;
				}
				if (themes.odd !== '') {
					wo.zebra[1] += ' ' + themes.odd;
				}
				// add caption style
				$table.children('caption').removeClass(oldtheme.caption).addClass(themes.caption);
				// add table/footer class names
				$tfoot = $table
				// remove other selected themes
				.removeClass(c.appliedTheme ? 'tablesorter-' + (c.appliedTheme || '') : '').addClass('tablesorter-' + theme + ' ' + themes.table) // add theme widget class name
				.children('tfoot');
				if ($tfoot.length) {
					$tfoot
					// if oldtheme.footerRow or oldtheme.footerCells are undefined, all class names are removed
					.children('tr').removeClass(oldtheme.footerRow || '').addClass(themes.footerRow).children('th, td').removeClass(oldtheme.footerCells || '').addClass(themes.footerCells);
				}
				// update header classes
				$headers.add(c.$extraHeaders).removeClass(oldtheme.header + ' ' + oldtheme.hover + ' ' + oldremove).addClass(themes.header).not('.sorter-false').bind('mouseenter.tsuitheme mouseleave.tsuitheme', function (event) {
					// toggleClass with switch added in jQuery 1.3
					$(this)[event.type === 'mouseenter' ? 'addClass' : 'removeClass'](themes.hover);
				});
				if (!$headers.find('.' + ts.css.wrapper).length) {
					// Firefox needs this inner div to position the resizer correctly
					$headers.wrapInner('<div class="' + ts.css.wrapper + '" style="position:relative;height:100%;width:100%"></div>');
				}
				if (c.cssIcon) {
					// if c.cssIcon is '', then no <i> is added to the header
					$headers.find('.' + ts.css.icon).removeClass(oldtheme.icons + ' ' + oldremove).addClass(themes.icons);
				}
				if ($table.hasClass('hasFilters')) {
					$table.children('thead').children('.' + ts.css.filterRow).removeClass(oldtheme.filterRow).addClass(themes.filterRow);
				}
				c.appliedTheme = c.theme;
			}
			for (i = 0; i < c.columns; i++) {
				$header = c.$headers.add(c.$extraHeaders).not('.sorter-false').filter('[data-column="' + i + '"]');
				$icon = ts.css.icon ? $header.find('.' + ts.css.icon) : $header;
				$h = $headers.not('.sorter-false').filter('[data-column="' + i + '"]:last');
				if ($h.length) {
					if ($h[0].sortDisabled) {
						// no sort arrows for disabled columns!
						$header.removeClass(remove);
						$icon.removeClass(remove + ' ' + themes.icons);
					} else {
						classes = $header.hasClass(ts.css.sortAsc) ? themes.sortAsc : $header.hasClass(ts.css.sortDesc) ? themes.sortDesc : $header.hasClass(ts.css.header) ? themes.sortNone : '';
						$header[classes === themes.sortNone ? 'removeClass' : 'addClass'](themes.active);
						$icon.removeClass(remove).addClass(classes);
					}
				}
			}
			if (c.debug) {
				ts.benchmark("Applying " + theme + " theme", time);
			}
		},
		remove: function remove(table, c) {
			var $table = c.$table,
			    theme = c.theme || 'jui',
			    themes = ts.themes[theme] || ts.themes.jui,
			    $headers = $table.children('thead').children(),
			    remove = themes.sortNone + ' ' + themes.sortDesc + ' ' + themes.sortAsc;
			$table.removeClass('tablesorter-' + theme + ' ' + themes.table).find(ts.css.header).removeClass(themes.header);
			$headers.unbind('mouseenter.tsuitheme mouseleave.tsuitheme') // remove hover
			.removeClass(themes.hover + ' ' + remove + ' ' + themes.active).find('.' + ts.css.filterRow).removeClass(themes.filterRow);
			$headers.find('.' + ts.css.icon).removeClass(themes.icons);
		}
	});

	// Widget: Column styles
	// "columns", "columns_thead" (true) and
	// "columns_tfoot" (true) options in "widgetOptions"
	// **************************
	ts.addWidget({
		id: "columns",
		priority: 30,
		options: {
			columns: ["primary", "secondary", "tertiary"]
		},
		format: function format(table, c, wo) {
			var $tbody,
			    tbodyIndex,
			    $rows,
			    rows,
			    $row,
			    $cells,
			    remove,
			    indx,
			    $table = c.$table,
			    $tbodies = c.$tbodies,
			    sortList = c.sortList,
			    len = sortList.length,

			// removed c.widgetColumns support
			css = wo && wo.columns || ["primary", "secondary", "tertiary"],
			    last = css.length - 1;
			remove = css.join(' ');
			// check if there is a sort (on initialization there may not be one)
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // detach tbody
				$rows = $tbody.children('tr');
				// loop through the visible rows
				$rows.each(function () {
					$row = $(this);
					if (this.style.display !== 'none') {
						// remove all columns class names
						$cells = $row.children().removeClass(remove);
						// add appropriate column class names
						if (sortList && sortList[0]) {
							// primary sort column class
							$cells.eq(sortList[0][0]).addClass(css[0]);
							if (len > 1) {
								for (indx = 1; indx < len; indx++) {
									// secondary, tertiary, etc sort column classes
									$cells.eq(sortList[indx][0]).addClass(css[indx] || css[last]);
								}
							}
						}
					}
				});
				ts.processTbody(table, $tbody, false);
			}
			// add classes to thead and tfoot
			rows = wo.columns_thead !== false ? ['thead tr'] : [];
			if (wo.columns_tfoot !== false) {
				rows.push('tfoot tr');
			}
			if (rows.length) {
				$rows = $table.find(rows.join(',')).children().removeClass(remove);
				if (len) {
					for (indx = 0; indx < len; indx++) {
						// add primary. secondary, tertiary, etc sort column classes
						$rows.filter('[data-column="' + sortList[indx][0] + '"]').addClass(css[indx] || css[last]);
					}
				}
			}
		},
		remove: function remove(table, c, wo) {
			var tbodyIndex,
			    $tbody,
			    $tbodies = c.$tbodies,
			    remove = (wo.columns || ["primary", "secondary", "tertiary"]).join(' ');
			c.$headers.removeClass(remove);
			c.$table.children('tfoot').children('tr').children('th, td').removeClass(remove);
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody
				$tbody.children('tr').each(function () {
					$(this).children().removeClass(remove);
				});
				ts.processTbody(table, $tbody, false); // restore tbody
			}
		}
	});

	// Widget: filter
	// **************************
	ts.addWidget({
		id: "filter",
		priority: 50,
		options: {
			filter_childRows: false, // if true, filter includes child row content in the search
			filter_columnFilters: true, // if true, a filter will be added to the top of each table column
			filter_cellFilter: '', // css class name added to the filter cell (string or array)
			filter_cssFilter: '', // css class name added to the filter row & each input in the row (tablesorter-filter is ALWAYS added)
			filter_defaultFilter: {}, // add a default column filter type "~{query}" to make fuzzy searches default; "{q1} AND {q2}" to make all searches use a logical AND.
			filter_excludeFilter: {}, // filters to exclude, per column
			filter_external: '', // jQuery selector string (or jQuery object) of external filters
			filter_filteredRow: 'filtered', // class added to filtered rows; needed by pager plugin
			filter_formatter: null, // add custom filter elements to the filter row
			filter_functions: null, // add custom filter functions using this option
			filter_hideEmpty: true, // hide filter row when table is empty
			filter_hideFilters: false, // collapse filter row when mouse leaves the area
			filter_ignoreCase: true, // if true, make all searches case-insensitive
			filter_liveSearch: true, // if true, search column content while the user types (with a delay)
			filter_onlyAvail: 'filter-onlyAvail', // a header with a select dropdown & this class name will only show available (visible) options within the drop down
			filter_placeholder: { search: '', select: '' }, // default placeholder text (overridden by any header "data-placeholder" setting)
			filter_reset: null, // jQuery selector string of an element used to reset the filters
			filter_saveFilters: false, // Use the $.tablesorter.storage utility to save the most recent filters
			filter_searchDelay: 300, // typing delay in milliseconds before starting a search
			filter_searchFiltered: true, // allow searching through already filtered rows in special circumstances; will speed up searching in large tables if true
			filter_selectSource: null, // include a function to return an array of values to be added to the column filter select
			filter_startsWith: false, // if true, filter start from the beginning of the cell contents
			filter_useParsedData: false, // filter all data using parsed content
			filter_serversideFiltering: false, // if true, server-side filtering should be performed because client-side filtering will be disabled, but the ui and events will still be used.
			filter_defaultAttrib: 'data-value', // data attribute in the header cell that contains the default filter value
			filter_selectSourceSeparator: '|' // filter_selectSource array text left of the separator is added to the option value, right into the option text
		},
		format: function format(table, c, wo) {
			if (!c.$table.hasClass('hasFilters')) {
				ts.filter.init(table, c, wo);
			}
		},
		remove: function remove(table, c, wo) {
			var tbodyIndex,
			    $tbody,
			    $table = c.$table,
			    $tbodies = c.$tbodies;
			$table.removeClass('hasFilters')
			// add .tsfilter namespace to all BUT search
			.unbind('addRows updateCell update updateRows updateComplete appendCache filterReset filterEnd search '.split(' ').join(c.namespace + 'filter ')).find('.' + ts.css.filterRow).remove();
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true); // remove tbody
				$tbody.children().removeClass(wo.filter_filteredRow).show();
				ts.processTbody(table, $tbody, false); // restore tbody
			}
			if (wo.filter_reset) {
				$(document).undelegate(wo.filter_reset, 'click.tsfilter');
			}
		}
	});

	ts.filter = {

		// regex used in filter "check" functions - not for general use and not documented
		regex: {
			regex: /^\/((?:\\\/|[^\/])+)\/([mig]{0,3})?$/, // regex to test for regex
			child: /tablesorter-childRow/, // child row class name; this gets updated in the script
			filtered: /filtered/, // filtered (hidden) row class name; updated in the script
			type: /undefined|number/, // check type
			exact: /(^[\"\'=]+)|([\"\'=]+$)/g, // exact match (allow '==')
			nondigit: /[^\w,. \-()]/g, // replace non-digits (from digit & currency parser)
			operators: /[<>=]/g, // replace operators
			query: '(q|query)' // replace filter queries
		},
		// function( c, data ) { }
		// c = table.config
		// data.filter = array of filter input values;
		// data.iFilter = same array, except lowercase (if wo.filter_ignoreCase is true)
		// data.exact = table cell text (or parsed data if column parser enabled)
		// data.iExact = same as data.exact, except lowercase (if wo.filter_ignoreCase is true)
		// data.cache = table cell text from cache, so it has been parsed (& in all lower case if config.ignoreCase is true)
		// data.index = column index; table = table element (DOM)
		// data.parsed = array (by column) of boolean values (from filter_useParsedData or "filter-parsed" class)
		types: {
			// Look for regex
			regex: function regex(c, data) {
				if (ts.filter.regex.regex.test(data.iFilter)) {
					var matches,
					    regex = ts.filter.regex.regex.exec(data.iFilter);
					try {
						matches = new RegExp(regex[1], regex[2]).test(data.iExact);
					} catch (error) {
						matches = false;
					}
					return matches;
				}
				return null;
			},
			// Look for operators >, >=, < or <=
			operators: function operators(c, data) {
				if (/^[<>]=?/.test(data.iFilter)) {
					var cachedValue,
					    result,
					    table = c.table,
					    index = data.index,
					    parsed = data.parsed[index],
					    query = ts.formatFloat(data.iFilter.replace(ts.filter.regex.operators, ''), table),
					    parser = c.parsers[index],
					    savedSearch = query;
					// parse filter value in case we're comparing numbers (dates)
					if (parsed || parser.type === 'numeric') {
						result = ts.filter.parseFilter(c, $.trim('' + data.iFilter.replace(ts.filter.regex.operators, '')), index, parsed, true);
						query = typeof result === "number" && result !== '' && !isNaN(result) ? result : query;
					}

					// iExact may be numeric - see issue #149;
					// check if cached is defined, because sometimes j goes out of range? (numeric columns)
					cachedValue = (parsed || parser.type === 'numeric') && !isNaN(query) && typeof data.cache !== 'undefined' ? data.cache : isNaN(data.iExact) ? ts.formatFloat(data.iExact.replace(ts.filter.regex.nondigit, ''), table) : ts.formatFloat(data.iExact, table);

					if (/>/.test(data.iFilter)) {
						result = />=/.test(data.iFilter) ? cachedValue >= query : cachedValue > query;
					}
					if (/</.test(data.iFilter)) {
						result = /<=/.test(data.iFilter) ? cachedValue <= query : cachedValue < query;
					}
					// keep showing all rows if nothing follows the operator
					if (!result && savedSearch === '') {
						result = true;
					}
					return result;
				}
				return null;
			},
			// Look for a not match
			notMatch: function notMatch(c, data) {
				if (/^\!/.test(data.iFilter)) {
					var indx,
					    filter = ts.filter.parseFilter(c, data.iFilter.replace('!', ''), data.index, data.parsed[data.index]);
					if (ts.filter.regex.exact.test(filter)) {
						// look for exact not matches - see #628
						filter = filter.replace(ts.filter.regex.exact, '');
						return filter === '' ? true : $.trim(filter) !== data.iExact;
					} else {
						indx = data.iExact.search($.trim(filter));
						return filter === '' ? true : !(c.widgetOptions.filter_startsWith ? indx === 0 : indx >= 0);
					}
				}
				return null;
			},
			// Look for quotes or equals to get an exact match; ignore type since iExact could be numeric
			exact: function exact(c, data) {
				/*jshint eqeqeq:false */
				if (ts.filter.regex.exact.test(data.iFilter)) {
					var filter = ts.filter.parseFilter(c, data.iFilter.replace(ts.filter.regex.exact, ''), data.index, data.parsed[data.index]);
					return data.anyMatch ? $.inArray(filter, data.rowArray) >= 0 : filter == data.iExact;
				}
				return null;
			},
			// Look for an AND or && operator (logical and)
			and: function and(c, data) {
				if (ts.filter.regex.andTest.test(data.filter)) {
					var index = data.index,
					    parsed = data.parsed[index],
					    query = data.iFilter.split(ts.filter.regex.andSplit),
					    result = data.iExact.search($.trim(ts.filter.parseFilter(c, query[0], index, parsed))) >= 0,
					    indx = query.length - 1;
					while (result && indx) {
						result = result && data.iExact.search($.trim(ts.filter.parseFilter(c, query[indx], index, parsed))) >= 0;
						indx--;
					}
					return result;
				}
				return null;
			},
			// Look for a range (using " to " or " - ") - see issue #166; thanks matzhu!
			range: function range(c, data) {
				if (ts.filter.regex.toTest.test(data.iFilter)) {
					var result,
					    tmp,
					    table = c.table,
					    index = data.index,
					    parsed = data.parsed[index],

					// make sure the dash is for a range and not indicating a negative number
					query = data.iFilter.split(ts.filter.regex.toSplit),
					    range1 = ts.formatFloat(ts.filter.parseFilter(c, query[0].replace(ts.filter.regex.nondigit, ''), index, parsed), table),
					    range2 = ts.formatFloat(ts.filter.parseFilter(c, query[1].replace(ts.filter.regex.nondigit, ''), index, parsed), table);
					// parse filter value in case we're comparing numbers (dates)
					if (parsed || c.parsers[index].type === 'numeric') {
						result = c.parsers[index].format('' + query[0], table, c.$headers.eq(index), index);
						range1 = result !== '' && !isNaN(result) ? result : range1;
						result = c.parsers[index].format('' + query[1], table, c.$headers.eq(index), index);
						range2 = result !== '' && !isNaN(result) ? result : range2;
					}
					result = (parsed || c.parsers[index].type === 'numeric') && !isNaN(range1) && !isNaN(range2) ? data.cache : isNaN(data.iExact) ? ts.formatFloat(data.iExact.replace(ts.filter.regex.nondigit, ''), table) : ts.formatFloat(data.iExact, table);
					if (range1 > range2) {
						tmp = range1;range1 = range2;range2 = tmp;
					} // swap
					return result >= range1 && result <= range2 || range1 === '' || range2 === '';
				}
				return null;
			},
			// Look for wild card: ? = single, * = multiple, or | = logical OR
			wild: function wild(c, data) {
				if (/[\?\*\|]/.test(data.iFilter) || ts.filter.regex.orReplace.test(data.filter)) {
					var index = data.index,
					    parsed = data.parsed[index],
					    query = ts.filter.parseFilter(c, data.iFilter.replace(ts.filter.regex.orReplace, "|"), index, parsed);
					// look for an exact match with the "or" unless the "filter-match" class is found
					if (!c.$headers.filter('[data-column="' + index + '"]:last').hasClass('filter-match') && /\|/.test(query)) {
						// show all results while using filter match. Fixes #727
						if (query[query.length - 1] === '|') {
							query += '*';
						}
						query = data.anyMatch && $.isArray(data.rowArray) ? '(' + query + ')' : '^(' + query + ')$';
					}
					// parsing the filter may not work properly when using wildcards =/
					return new RegExp(query.replace(/\?/g, '\\S{1}').replace(/\*/g, '\\S*')).test(data.iExact);
				}
				return null;
			},
			// fuzzy text search; modified from https://github.com/mattyork/fuzzy (MIT license)
			fuzzy: function fuzzy(c, data) {
				if (/^~/.test(data.iFilter)) {
					var indx,
					    patternIndx = 0,
					    len = data.iExact.length,
					    pattern = ts.filter.parseFilter(c, data.iFilter.slice(1), data.index, data.parsed[data.index]);
					for (indx = 0; indx < len; indx++) {
						if (data.iExact[indx] === pattern[patternIndx]) {
							patternIndx += 1;
						}
					}
					if (patternIndx === pattern.length) {
						return true;
					}
					return false;
				}
				return null;
			}
		},
		init: function init(table, c, wo) {
			// filter language options
			ts.language = $.extend(true, {}, {
				to: 'to',
				or: 'or',
				and: 'and'
			}, ts.language);

			var options,
			    string,
			    txt,
			    $header,
			    column,
			    filters,
			    val,
			    fxn,
			    noSelect,
			    regex = ts.filter.regex;
			c.$table.addClass('hasFilters');

			// define timers so using clearTimeout won't cause an undefined error
			wo.searchTimer = null;
			wo.filter_initTimer = null;
			wo.filter_formatterCount = 0;
			wo.filter_formatterInit = [];
			wo.filter_anyColumnSelector = '[data-column="all"],[data-column="any"]';
			wo.filter_multipleColumnSelector = '[data-column*="-"],[data-column*=","]';

			txt = '\\{' + ts.filter.regex.query + '\\}';
			$.extend(regex, {
				child: new RegExp(c.cssChildRow),
				filtered: new RegExp(wo.filter_filteredRow),
				alreadyFiltered: new RegExp('(\\s+(' + ts.language.or + '|-|' + ts.language.to + ')\\s+)', 'i'),
				toTest: new RegExp('\\s+(-|' + ts.language.to + ')\\s+', 'i'),
				toSplit: new RegExp('(?:\\s+(?:-|' + ts.language.to + ')\\s+)', 'gi'),
				andTest: new RegExp('\\s+(' + ts.language.and + '|&&)\\s+', 'i'),
				andSplit: new RegExp('(?:\\s+(?:' + ts.language.and + '|&&)\\s+)', 'gi'),
				orReplace: new RegExp('\\s+(' + ts.language.or + ')\\s+', 'gi'),
				iQuery: new RegExp(txt, 'i'),
				igQuery: new RegExp(txt, 'ig')
			});

			// don't build filter row if columnFilters is false or all columns are set to "filter-false" - issue #156
			if (wo.filter_columnFilters !== false && c.$headers.filter('.filter-false, .parser-false').length !== c.$headers.length) {
				// build filter row
				ts.filter.buildRow(table, c, wo);
			}

			c.$table.bind('addRows updateCell update updateRows updateComplete appendCache filterReset filterEnd search '.split(' ').join(c.namespace + 'filter '), function (event, filter) {
				c.$table.find('.' + ts.css.filterRow).toggle(!(wo.filter_hideEmpty && $.isEmptyObject(c.cache) && !(c.delayInit && event.type === 'appendCache'))); // fixes #450
				if (!/(search|filter)/.test(event.type)) {
					event.stopPropagation();
					ts.filter.buildDefault(table, true);
				}
				if (event.type === 'filterReset') {
					c.$table.find('.' + ts.css.filter).add(wo.filter_$externalFilters).val('');
					ts.filter.searching(table, []);
				} else if (event.type === 'filterEnd') {
					ts.filter.buildDefault(table, true);
				} else {
					// send false argument to force a new search; otherwise if the filter hasn't changed, it will return
					filter = event.type === 'search' ? filter : event.type === 'updateComplete' ? c.$table.data('lastSearch') : '';
					if (/(update|add)/.test(event.type) && event.type !== "updateComplete") {
						// force a new search since content has changed
						c.lastCombinedFilter = null;
						c.lastSearch = [];
					}
					// pass true (skipFirst) to prevent the tablesorter.setFilters function from skipping the first input
					// ensures all inputs are updated when a search is triggered on the table $('table').trigger('search', [...]);
					ts.filter.searching(table, filter, true);
				}
				return false;
			});

			// reset button/link
			if (wo.filter_reset) {
				if (wo.filter_reset instanceof $) {
					// reset contains a jQuery object, bind to it
					wo.filter_reset.click(function () {
						c.$table.trigger('filterReset');
					});
				} else if ($(wo.filter_reset).length) {
					// reset is a jQuery selector, use event delegation
					$(document).undelegate(wo.filter_reset, 'click.tsfilter').delegate(wo.filter_reset, 'click.tsfilter', function () {
						// trigger a reset event, so other functions (filter_formatter) know when to reset
						c.$table.trigger('filterReset');
					});
				}
			}
			if (wo.filter_functions) {
				for (column = 0; column < c.columns; column++) {
					fxn = ts.getColumnData(table, wo.filter_functions, column);
					if (fxn) {
						// remove "filter-select" from header otherwise the options added here are replaced with all options
						$header = c.$headers.filter('[data-column="' + column + '"]:last').removeClass('filter-select');
						// don't build select if "filter-false" or "parser-false" set
						noSelect = !($header.hasClass('filter-false') || $header.hasClass('parser-false'));
						options = '';
						if (fxn === true && noSelect) {
							ts.filter.buildSelect(table, column);
						} else if ((typeof fxn === "undefined" ? "undefined" : _typeof(fxn)) === 'object' && noSelect) {
							// add custom drop down list
							for (string in fxn) {
								if (typeof string === 'string') {
									options += options === '' ? '<option value="">' + ($header.data('placeholder') || $header.attr('data-placeholder') || wo.filter_placeholder.select || '') + '</option>' : '';
									val = string;
									txt = string;
									if (string.indexOf(wo.filter_selectSourceSeparator) >= 0) {
										val = string.split(wo.filter_selectSourceSeparator);
										txt = val[1];
										val = val[0];
									}
									options += '<option ' + (txt === val ? '' : 'data-function-name="' + string + '" ') + 'value="' + val + '">' + txt + '</option>';
								}
							}
							c.$table.find('thead').find('select.' + ts.css.filter + '[data-column="' + column + '"]').append(options);
						}
					}
				}
			}
			// not really updating, but if the column has both the "filter-select" class & filter_functions set to true,
			// it would append the same options twice.
			ts.filter.buildDefault(table, true);

			ts.filter.bindSearch(table, c.$table.find('.' + ts.css.filter), true);
			if (wo.filter_external) {
				ts.filter.bindSearch(table, wo.filter_external);
			}

			if (wo.filter_hideFilters) {
				ts.filter.hideFilters(table, c);
			}

			// show processing icon
			if (c.showProcessing) {
				c.$table.bind('filterStart' + c.namespace + 'filter filterEnd' + c.namespace + 'filter', function (event, columns) {
					// only add processing to certain columns to all columns
					$header = columns ? c.$table.find('.' + ts.css.header).filter('[data-column]').filter(function () {
						return columns[$(this).data('column')] !== '';
					}) : '';
					ts.isProcessing(table, event.type === 'filterStart', columns ? $header : '');
				});
			}

			// set filtered rows count (intially unfiltered)
			c.filteredRows = c.totalRows;

			// add default values
			c.$table.bind('tablesorter-initialized pagerBeforeInitialized', function () {
				// redefine "wo" as it does not update properly inside this callback
				var wo = this.config.widgetOptions;
				filters = ts.filter.setDefaults(table, c, wo) || [];
				if (filters.length) {
					// prevent delayInit from triggering a cache build if filters are empty
					if (!(c.delayInit && filters.join('') === '')) {
						ts.setFilters(table, filters, true);
					}
				}
				c.$table.trigger('filterFomatterUpdate');
				// trigger init after setTimeout to prevent multiple filterStart/End/Init triggers
				setTimeout(function () {
					if (!wo.filter_initialized) {
						ts.filter.filterInitComplete(c);
					}
				}, 100);
			});
			// if filter widget is added after pager has initialized; then set filter init flag
			if (c.pager && c.pager.initialized && !wo.filter_initialized) {
				c.$table.trigger('filterFomatterUpdate');
				setTimeout(function () {
					ts.filter.filterInitComplete(c);
				}, 100);
			}
		},
		// $cell parameter, but not the config, is passed to the
		// filter_formatters, so we have to work with it instead
		formatterUpdated: function formatterUpdated($cell, column) {
			var wo = $cell.closest('table')[0].config.widgetOptions;
			if (!wo.filter_initialized) {
				// add updates by column since this function
				// may be called numerous times before initialization
				wo.filter_formatterInit[column] = 1;
			}
		},
		filterInitComplete: function filterInitComplete(c) {
			var wo = c.widgetOptions,
			    count = 0,
			    completed = function completed() {
				wo.filter_initialized = true;
				c.$table.trigger('filterInit', c);
				ts.filter.findRows(c.table, c.$table.data('lastSearch') || []);
			};
			if ($.isEmptyObject(wo.filter_formatter)) {
				completed();
			} else {
				$.each(wo.filter_formatterInit, function (i, val) {
					if (val === 1) {
						count++;
					}
				});
				clearTimeout(wo.filter_initTimer);
				if (!wo.filter_initialized && count === wo.filter_formatterCount) {
					// filter widget initialized
					completed();
				} else if (!wo.filter_initialized) {
					// fall back in case a filter_formatter doesn't call
					// $.tablesorter.filter.formatterUpdated($cell, column), and the count is off
					wo.filter_initTimer = setTimeout(function () {
						completed();
					}, 500);
				}
			}
		},

		setDefaults: function setDefaults(table, c, wo) {
			var isArray,
			    saved,
			    indx,

			// get current (default) filters
			filters = ts.getFilters(table) || [];
			if (wo.filter_saveFilters && ts.storage) {
				saved = ts.storage(table, 'tablesorter-filters') || [];
				isArray = $.isArray(saved);
				// make sure we're not just getting an empty array
				if (!(isArray && saved.join('') === '' || !isArray)) {
					filters = saved;
				}
			}
			// if no filters saved, then check default settings
			if (filters.join('') === '') {
				for (indx = 0; indx < c.columns; indx++) {
					filters[indx] = c.$headers.filter('[data-column="' + indx + '"]:last').attr(wo.filter_defaultAttrib) || filters[indx];
				}
			}
			c.$table.data('lastSearch', filters);
			return filters;
		},
		parseFilter: function parseFilter(c, filter, column, parsed, forceParse) {
			return forceParse || parsed ? c.parsers[column].format(filter, c.table, [], column) : filter;
		},
		buildRow: function buildRow(table, c, wo) {
			var col,
			    column,
			    $header,
			    buildSelect,
			    disabled,
			    name,
			    ffxn,

			// c.columns defined in computeThIndexes()
			columns = c.columns,
			    arry = $.isArray(wo.filter_cellFilter),
			    buildFilter = '<tr role="row" class="' + ts.css.filterRow + '">';
			for (column = 0; column < columns; column++) {
				if (arry) {
					buildFilter += '<td' + (wo.filter_cellFilter[column] ? ' class="' + wo.filter_cellFilter[column] + '"' : '') + '></td>';
				} else {
					buildFilter += '<td' + (wo.filter_cellFilter !== '' ? ' class="' + wo.filter_cellFilter + '"' : '') + '></td>';
				}
			}
			c.$filters = $(buildFilter += '</tr>').appendTo(c.$table.children('thead').eq(0)).find('td');
			// build each filter input
			for (column = 0; column < columns; column++) {
				disabled = false;
				// assuming last cell of a column is the main column
				$header = c.$headers.filter('[data-column="' + column + '"]:last');
				ffxn = ts.getColumnData(table, wo.filter_functions, column);
				buildSelect = wo.filter_functions && ffxn && typeof ffxn !== "function" || $header.hasClass('filter-select');
				// get data from jQuery data, metadata, headers option or header class name
				col = ts.getColumnData(table, c.headers, column);
				disabled = ts.getData($header[0], col, 'filter') === 'false' || ts.getData($header[0], col, 'parser') === 'false';

				if (buildSelect) {
					buildFilter = $('<select>').appendTo(c.$filters.eq(column));
				} else {
					ffxn = ts.getColumnData(table, wo.filter_formatter, column);
					if (ffxn) {
						wo.filter_formatterCount++;
						buildFilter = ffxn(c.$filters.eq(column), column);
						// no element returned, so lets go find it
						if (buildFilter && buildFilter.length === 0) {
							buildFilter = c.$filters.eq(column).children('input');
						}
						// element not in DOM, so lets attach it
						if (buildFilter && (buildFilter.parent().length === 0 || buildFilter.parent().length && buildFilter.parent()[0] !== c.$filters[column])) {
							c.$filters.eq(column).append(buildFilter);
						}
					} else {
						buildFilter = $('<input type="search">').appendTo(c.$filters.eq(column));
					}
					if (buildFilter) {
						buildFilter.attr('placeholder', $header.data('placeholder') || $header.attr('data-placeholder') || wo.filter_placeholder.search || '');
					}
				}
				if (buildFilter) {
					// add filter class name
					name = ($.isArray(wo.filter_cssFilter) ? typeof wo.filter_cssFilter[column] !== 'undefined' ? wo.filter_cssFilter[column] || '' : '' : wo.filter_cssFilter) || '';
					buildFilter.addClass(ts.css.filter + ' ' + name).attr('data-column', column);
					if (disabled) {
						buildFilter.attr('placeholder', '').addClass('disabled')[0].disabled = true; // disabled!
					}
				}
			}
		},
		bindSearch: function bindSearch(table, $el, internal) {
			table = $(table)[0];
			$el = $($el); // allow passing a selector string
			if (!$el.length) {
				return;
			}
			var c = table.config,
			    wo = c.widgetOptions,
			    $ext = wo.filter_$externalFilters;
			if (internal !== true) {
				// save anyMatch element
				wo.filter_$anyMatch = $el.filter(wo.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector);
				if ($ext && $ext.length) {
					wo.filter_$externalFilters = wo.filter_$externalFilters.add($el);
				} else {
					wo.filter_$externalFilters = $el;
				}
				// update values (external filters added after table initialization)
				ts.setFilters(table, c.$table.data('lastSearch') || [], internal === false);
			}
			$el
			// use data attribute instead of jQuery data since the head is cloned without including the data/binding
			.attr('data-lastSearchTime', new Date().getTime()).unbind('keypress keyup search change '.split(' ').join(c.namespace + 'filter '))
			// include change for select - fixes #473
			.bind('keyup' + c.namespace + 'filter', function (event) {
				$(this).attr('data-lastSearchTime', new Date().getTime());
				// emulate what webkit does.... escape clears the filter
				if (event.which === 27) {
					this.value = '';
					// live search
				} else if (wo.filter_liveSearch === false) {
					return;
					// don't return if the search value is empty (all rows need to be revealed)
				} else if (this.value !== '' && (
				// liveSearch can contain a min value length; ignore arrow and meta keys, but allow backspace
				typeof wo.filter_liveSearch === 'number' && this.value.length < wo.filter_liveSearch ||
				// let return & backspace continue on, but ignore arrows & non-valid characters
				event.which !== 13 && event.which !== 8 && (event.which < 32 || event.which >= 37 && event.which <= 40))) {
					return;
				}
				// change event = no delay; last true flag tells getFilters to skip newest timed input
				ts.filter.searching(table, true, true);
			}).bind('search change keypress '.split(' ').join(c.namespace + 'filter '), function (event) {
				var column = $(this).data('column');
				// don't allow "change" event to process if the input value is the same - fixes #685
				if (event.which === 13 || event.type === 'search' || event.type === 'change' && this.value !== c.lastSearch[column]) {
					event.preventDefault();
					// init search with no delay
					$(this).attr('data-lastSearchTime', new Date().getTime());
					ts.filter.searching(table, false, true);
				}
			});
		},
		searching: function searching(table, filter, skipFirst) {
			var wo = table.config.widgetOptions;
			clearTimeout(wo.searchTimer);
			if (typeof filter === 'undefined' || filter === true) {
				// delay filtering
				wo.searchTimer = setTimeout(function () {
					ts.filter.checkFilters(table, filter, skipFirst);
				}, wo.filter_liveSearch ? wo.filter_searchDelay : 10);
			} else {
				// skip delay
				ts.filter.checkFilters(table, filter, skipFirst);
			}
		},
		checkFilters: function checkFilters(table, filter, skipFirst) {
			var c = table.config,
			    wo = c.widgetOptions,
			    filterArray = $.isArray(filter),
			    filters = filterArray ? filter : ts.getFilters(table, true),
			    combinedFilters = (filters || []).join(''); // combined filter values
			// prevent errors if delay init is set
			if ($.isEmptyObject(c.cache)) {
				// update cache if delayInit set & pager has initialized (after user initiates a search)
				if (c.delayInit && c.pager && c.pager.initialized) {
					c.$table.trigger('updateCache', [function () {
						ts.filter.checkFilters(table, false, skipFirst);
					}]);
				}
				return;
			}
			// add filter array back into inputs
			if (filterArray) {
				ts.setFilters(table, filters, false, skipFirst !== true);
				if (!wo.filter_initialized) {
					c.lastCombinedFilter = '';
				}
			}
			if (wo.filter_hideFilters) {
				// show/hide filter row as needed
				c.$table.find('.' + ts.css.filterRow).trigger(combinedFilters === '' ? 'mouseleave' : 'mouseenter');
			}
			// return if the last search is the same; but filter === false when updating the search
			// see example-widget-filter.html filter toggle buttons
			if (c.lastCombinedFilter === combinedFilters && filter !== false) {
				return;
			} else if (filter === false) {
				// force filter refresh
				c.lastCombinedFilter = null;
				c.lastSearch = [];
			}
			if (wo.filter_initialized) {
				c.$table.trigger('filterStart', [filters]);
			}
			if (c.showProcessing) {
				// give it time for the processing icon to kick in
				setTimeout(function () {
					ts.filter.findRows(table, filters, combinedFilters);
					return false;
				}, 30);
			} else {
				ts.filter.findRows(table, filters, combinedFilters);
				return false;
			}
		},
		hideFilters: function hideFilters(table, c) {
			var $filterRow, $filterRow2, timer;
			$(table).find('.' + ts.css.filterRow).addClass('hideme').bind('mouseenter mouseleave', function (e) {
				// save event object - http://bugs.jquery.com/ticket/12140
				var event = e;
				$filterRow = $(this);
				clearTimeout(timer);
				timer = setTimeout(function () {
					if (/enter|over/.test(event.type)) {
						$filterRow.removeClass('hideme');
					} else {
						// don't hide if input has focus
						// $(':focus') needs jQuery 1.6+
						if ($(document.activeElement).closest('tr')[0] !== $filterRow[0]) {
							// don't hide row if any filter has a value
							if (c.lastCombinedFilter === '') {
								$filterRow.addClass('hideme');
							}
						}
					}
				}, 200);
			}).find('input, select').bind('focus blur', function (e) {
				$filterRow2 = $(this).closest('tr');
				clearTimeout(timer);
				var event = e;
				timer = setTimeout(function () {
					// don't hide row if any filter has a value
					if (ts.getFilters(c.$table).join('') === '') {
						$filterRow2[event.type === 'focus' ? 'removeClass' : 'addClass']('hideme');
					}
				}, 200);
			});
		},
		defaultFilter: function defaultFilter(filter, mask) {
			if (filter === '') {
				return filter;
			}
			var regex = ts.filter.regex.iQuery,
			    maskLen = mask.match(ts.filter.regex.igQuery).length,
			    query = maskLen > 1 ? $.trim(filter).split(/\s/) : [$.trim(filter)],
			    len = query.length - 1,
			    indx = 0,
			    val = mask;
			if (len < 1 && maskLen > 1) {
				// only one "word" in query but mask has >1 slots
				query[1] = query[0];
			}
			// replace all {query} with query words...
			// if query = "Bob", then convert mask from "!{query}" to "!Bob"
			// if query = "Bob Joe Frank", then convert mask "{q} OR {q}" to "Bob OR Joe OR Frank"
			while (regex.test(val)) {
				val = val.replace(regex, query[indx++] || '');
				if (regex.test(val) && indx < len && (query[indx] || '') !== '') {
					val = mask.replace(regex, val);
				}
			}
			return val;
		},
		getLatestSearch: function getLatestSearch($input) {
			return $input.sort(function (a, b) {
				return $(b).attr('data-lastSearchTime') - $(a).attr('data-lastSearchTime');
			});
		},
		multipleColumns: function multipleColumns(c, $input) {
			// look for multiple columns "1-3,4-6,8" in data-column
			var ranges,
			    singles,
			    indx,
			    wo = c.widgetOptions,

			// only target "all" column inputs on initialization
			// & don't target "all" column inputs if they don't exist
			targets = wo.filter_initialized || !$input.filter(wo.filter_anyColumnSelector).length,
			    columns = [],
			    val = $.trim(ts.filter.getLatestSearch($input).attr('data-column'));
			// process column range
			if (targets && /-/.test(val)) {
				ranges = val.match(/(\d+)\s*-\s*(\d+)/g);
				$.each(ranges, function (i, v) {
					var t,
					    range = v.split(/\s*-\s*/),
					    start = parseInt(range[0], 10) || 0,
					    end = parseInt(range[1], 10) || c.columns - 1;
					if (start > end) {
						t = start;start = end;end = t;
					} // swap
					if (end >= c.columns) {
						end = c.columns - 1;
					}
					for (; start <= end; start++) {
						columns.push(start);
					}
					// remove processed range from val
					val = val.replace(v, '');
				});
			}
			// process single columns
			if (targets && /,/.test(val)) {
				singles = val.split(/\s*,\s*/);
				$.each(singles, function (i, v) {
					if (v !== '') {
						indx = parseInt(v, 10);
						if (indx < c.columns) {
							columns.push(indx);
						}
					}
				});
			}
			// return all columns
			if (!columns.length) {
				for (indx = 0; indx < c.columns; indx++) {
					columns.push(indx);
				}
			}
			return columns;
		},
		findRows: function findRows(table, filters, combinedFilters) {
			if (table.config.lastCombinedFilter === combinedFilters || !table.config.widgetOptions.filter_initialized) {
				return;
			}
			var len,
			    $rows,
			    rowIndex,
			    tbodyIndex,
			    $tbody,
			    $cells,
			    $cell,
			    columnIndex,
			    childRow,
			    lastSearch,
			    hasSelect,
			    matches,
			    result,
			    showRow,
			    time,
			    val,
			    indx,
			    notFiltered,
			    searchFiltered,
			    filterMatched,
			    excludeMatch,
			    fxn,
			    ffxn,
			    regex = ts.filter.regex,
			    c = table.config,
			    wo = c.widgetOptions,
			    $tbodies = c.$table.children('tbody'),
			    // target all tbodies #568
			// data object passed to filters; anyMatch is a flag for the filters
			data = { anyMatch: false },

			// anyMatch really screws up with these types of filters
			noAnyMatch = ['range', 'notMatch', 'operators'];

			// parse columns after formatter, in case the class is added at that point
			data.parsed = c.$headers.map(function (columnIndex) {
				return c.parsers && c.parsers[columnIndex] && c.parsers[columnIndex].parsed ||
				// getData won't return "parsed" if other "filter-" class names exist (e.g. <th class="filter-select filter-parsed">)
				ts.getData && ts.getData(c.$headers.filter('[data-column="' + columnIndex + '"]:last'), ts.getColumnData(table, c.headers, columnIndex), 'filter') === 'parsed' || $(this).hasClass('filter-parsed');
			}).get();

			if (c.debug) {
				ts.log('Starting filter widget search', filters);
				time = new Date();
			}
			// filtered rows count
			c.filteredRows = 0;
			c.totalRows = 0;
			// combindedFilters are undefined on init
			combinedFilters = (filters || []).join('');

			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				if ($tbodies.eq(tbodyIndex).hasClass(c.cssInfoBlock || ts.css.info)) {
					continue;
				} // ignore info blocks, issue #264
				$tbody = ts.processTbody(table, $tbodies.eq(tbodyIndex), true);
				// skip child rows & widget added (removable) rows - fixes #448 thanks to @hempel!
				// $rows = $tbody.children('tr').not(c.selectorRemove);
				columnIndex = c.columns;
				// convert stored rows into a jQuery object
				$rows = $($.map(c.cache[tbodyIndex].normalized, function (el) {
					return el[columnIndex].$row.get();
				}));

				if (combinedFilters === '' || wo.filter_serversideFiltering) {
					$rows.removeClass(wo.filter_filteredRow).not('.' + c.cssChildRow).show();
				} else {
					// filter out child rows
					$rows = $rows.not('.' + c.cssChildRow);
					len = $rows.length;
					// optimize searching only through already filtered rows - see #313
					searchFiltered = wo.filter_searchFiltered;
					lastSearch = c.lastSearch || c.$table.data('lastSearch') || [];
					if (searchFiltered) {
						// cycle through all filters; include last (columnIndex + 1 = match any column). Fixes #669
						for (indx = 0; indx < columnIndex + 1; indx++) {
							val = filters[indx] || '';
							// break out of loop if we've already determined not to search filtered rows
							if (!searchFiltered) {
								indx = columnIndex;
							}
							// search already filtered rows if...
							searchFiltered = searchFiltered && lastSearch.length &&
							// there are no changes from beginning of filter
							val.indexOf(lastSearch[indx] || '') === 0 &&
							// if there is NOT a logical "or", or range ("to" or "-") in the string
							!regex.alreadyFiltered.test(val) &&
							// if we are not doing exact matches, using "|" (logical or) or not "!"
							!/[=\"\|!]/.test(val) &&
							// don't search only filtered if the value is negative ('> -10' => '> -100' will ignore hidden rows)
							!(/(>=?\s*-\d)/.test(val) || /(<=?\s*\d)/.test(val)) &&
							// if filtering using a select without a "filter-match" class (exact match) - fixes #593
							!(val !== '' && c.$filters && c.$filters.eq(indx).find('select').length && !c.$headers.filter('[data-column="' + indx + '"]:last').hasClass('filter-match'));
						}
					}
					notFiltered = $rows.not('.' + wo.filter_filteredRow).length;
					// can't search when all rows are hidden - this happens when looking for exact matches
					if (searchFiltered && notFiltered === 0) {
						searchFiltered = false;
					}
					if (c.debug) {
						ts.log("Searching through " + (searchFiltered && notFiltered < len ? notFiltered : "all") + " rows");
					}
					if (wo.filter_$anyMatch && wo.filter_$anyMatch.length || filters[c.columns]) {
						data.anyMatchFlag = true;
						data.anyMatchFilter = wo.filter_$anyMatch && ts.filter.getLatestSearch(wo.filter_$anyMatch).val() || filters[c.columns] || '';
						if (c.sortLocaleCompare) {
							// replace accents
							data.anyMatchFilter = ts.replaceAccents(data.anyMatchFilter);
						}
						if (wo.filter_defaultFilter && regex.iQuery.test(ts.getColumnData(table, wo.filter_defaultFilter, c.columns, true) || '')) {
							data.anyMatchFilter = ts.filter.defaultFilter(data.anyMatchFilter, ts.getColumnData(table, wo.filter_defaultFilter, c.columns, true));
							// clear search filtered flag because default filters are not saved to the last search
							searchFiltered = false;
						}
						// make iAnyMatchFilter lowercase unless both filter widget & core ignoreCase options are true
						// when c.ignoreCase is true, the cache contains all lower case data
						data.iAnyMatchFilter = !(wo.filter_ignoreCase && c.ignoreCase) ? data.anyMatchFilter : data.anyMatchFilter.toLocaleLowerCase();
					}

					// loop through the rows
					for (rowIndex = 0; rowIndex < len; rowIndex++) {

						data.cacheArray = c.cache[tbodyIndex].normalized[rowIndex];

						childRow = $rows[rowIndex].className;
						// skip child rows & already filtered rows
						if (regex.child.test(childRow) || searchFiltered && regex.filtered.test(childRow)) {
							continue;
						}
						showRow = true;
						// *** nextAll/nextUntil not supported by Zepto! ***
						childRow = $rows.eq(rowIndex).nextUntil('tr:not(.' + c.cssChildRow + ')');
						// so, if "table.config.widgetOptions.filter_childRows" is true and there is
						// a match anywhere in the child row, then it will make the row visible
						// checked here so the option can be changed dynamically
						data.childRowText = childRow.length && wo.filter_childRows ? childRow.text() : '';
						data.childRowText = wo.filter_ignoreCase ? data.childRowText.toLocaleLowerCase() : data.childRowText;
						$cells = $rows.eq(rowIndex).children();
						if (data.anyMatchFlag) {
							// look for multiple columns "1-3,4-6,8"
							columnIndex = ts.filter.multipleColumns(c, wo.filter_$anyMatch);
							data.anyMatch = true;
							data.rowArray = $cells.map(function (i) {
								if ($.inArray(i, columnIndex) > -1) {
									var txt;
									if (data.parsed[i]) {
										txt = data.cacheArray[i];
									} else {
										txt = wo.filter_ignoreCase ? $(this).text().toLowerCase() : $(this).text();
										if (c.sortLocaleCompare) {
											txt = ts.replaceAccents(txt);
										}
									}
									return txt;
								}
							}).get();
							data.filter = data.anyMatchFilter;
							data.iFilter = data.iAnyMatchFilter;
							data.exact = data.rowArray.join(' ');
							data.iExact = wo.filter_ignoreCase ? data.exact.toLowerCase() : data.exact;
							data.cache = data.cacheArray.slice(0, -1).join(' ');
							filterMatched = null;
							$.each(ts.filter.types, function (type, typeFunction) {
								if ($.inArray(type, noAnyMatch) < 0) {
									matches = typeFunction(c, data);
									if (matches !== null) {
										filterMatched = matches;
										return false;
									}
								}
							});
							if (filterMatched !== null) {
								showRow = filterMatched;
							} else {
								if (wo.filter_startsWith) {
									showRow = false;
									columnIndex = c.columns;
									while (!showRow && columnIndex > 0) {
										columnIndex--;
										showRow = showRow || data.rowArray[columnIndex].indexOf(data.iFilter) === 0;
									}
								} else {
									showRow = (data.iExact + data.childRowText).indexOf(data.iFilter) >= 0;
								}
							}
							data.anyMatch = false;
						}

						for (columnIndex = 0; columnIndex < c.columns; columnIndex++) {
							data.filter = filters[columnIndex];
							data.index = columnIndex;

							// filter types to exclude, per column
							excludeMatch = (ts.getColumnData(table, wo.filter_excludeFilter, columnIndex, true) || '').split(/\s+/);

							// ignore if filter is empty or disabled
							if (data.filter) {
								data.cache = data.cacheArray[columnIndex];
								// check if column data should be from the cell or from parsed data
								if (wo.filter_useParsedData || data.parsed[columnIndex]) {
									data.exact = data.cache;
								} else {
									// using older or original tablesorter
									data.exact = $.trim($cells.eq(columnIndex).text());
									data.exact = c.sortLocaleCompare ? ts.replaceAccents(data.exact) : data.exact; // issue #405
								}
								data.iExact = !regex.type.test(_typeof(data.exact)) && wo.filter_ignoreCase ? data.exact.toLocaleLowerCase() : data.exact;
								result = showRow; // if showRow is true, show that row

								// in case select filter option has a different value vs text "a - z|A through Z"
								ffxn = wo.filter_columnFilters ? c.$filters.add(c.$externalFilters).filter('[data-column="' + columnIndex + '"]').find('select option:selected').attr('data-function-name') || '' : '';

								// replace accents - see #357
								data.filter = c.sortLocaleCompare ? ts.replaceAccents(data.filter) : data.filter;

								val = true;
								if (wo.filter_defaultFilter && regex.iQuery.test(ts.getColumnData(table, wo.filter_defaultFilter, columnIndex) || '')) {
									data.filter = ts.filter.defaultFilter(data.filter, ts.getColumnData(table, wo.filter_defaultFilter, columnIndex));
									// val is used to indicate that a filter select is using a default filter; so we override the exact & partial matches
									val = false;
								}
								// data.iFilter = case insensitive (if wo.filter_ignoreCase is true), data.filter = case sensitive
								data.iFilter = wo.filter_ignoreCase ? (data.filter || '').toLocaleLowerCase() : data.filter;
								fxn = ts.getColumnData(table, wo.filter_functions, columnIndex);
								$cell = c.$headers.filter('[data-column="' + columnIndex + '"]:last');
								hasSelect = $cell.hasClass('filter-select');
								if (fxn || hasSelect && val) {
									if (fxn === true || hasSelect) {
										// default selector uses exact match unless "filter-match" class is found
										result = $cell.hasClass('filter-match') ? data.iExact.search(data.iFilter) >= 0 : data.filter === data.exact;
									} else if (typeof fxn === 'function') {
										// filter callback( exact cell content, parser normalized content, filter input value, column index, jQuery row object )
										result = fxn(data.exact, data.cache, data.filter, columnIndex, $rows.eq(rowIndex));
									} else if (typeof fxn[ffxn || data.filter] === 'function') {
										// selector option function
										result = fxn[ffxn || data.filter](data.exact, data.cache, data.filter, columnIndex, $rows.eq(rowIndex));
									}
								} else {
									filterMatched = null;
									// cycle through the different filters
									// filters return a boolean or null if nothing matches
									$.each(ts.filter.types, function (type, typeFunction) {
										if ($.inArray(type, excludeMatch) < 0) {
											matches = typeFunction(c, data);
											if (matches !== null) {
												filterMatched = matches;
												return false;
											}
										}
									});
									if (filterMatched !== null) {
										result = filterMatched;
										// Look for match, and add child row data for matching
									} else {
										data.exact = (data.iExact + data.childRowText).indexOf(ts.filter.parseFilter(c, data.iFilter, columnIndex, data.parsed[columnIndex]));
										result = !wo.filter_startsWith && data.exact >= 0 || wo.filter_startsWith && data.exact === 0;
									}
								}
								showRow = result ? showRow : false;
							}
						}
						$rows.eq(rowIndex).toggle(showRow).toggleClass(wo.filter_filteredRow, !showRow);
						if (childRow.length) {
							childRow.toggleClass(wo.filter_filteredRow, !showRow);
						}
					}
				}
				c.filteredRows += $rows.not('.' + wo.filter_filteredRow).length;
				c.totalRows += $rows.length;
				ts.processTbody(table, $tbody, false);
			}
			c.lastCombinedFilter = combinedFilters; // save last search
			c.lastSearch = filters;
			c.$table.data('lastSearch', filters);
			if (wo.filter_saveFilters && ts.storage) {
				ts.storage(table, 'tablesorter-filters', filters);
			}
			if (c.debug) {
				ts.benchmark("Completed filter widget search", time);
			}
			if (wo.filter_initialized) {
				c.$table.trigger('filterEnd', c);
			}
			setTimeout(function () {
				c.$table.trigger('applyWidgets'); // make sure zebra widget is applied
			}, 0);
		},
		getOptionSource: function getOptionSource(table, column, onlyAvail) {
			var cts,
			    c = table.config,
			    wo = c.widgetOptions,
			    parsed = [],
			    arry = false,
			    source = wo.filter_selectSource,
			    last = c.$table.data('lastSearch') || [],
			    fxn = $.isFunction(source) ? true : ts.getColumnData(table, source, column);

			if (onlyAvail && last[column] !== '') {
				onlyAvail = false;
			}

			// filter select source option
			if (fxn === true) {
				// OVERALL source
				arry = source(table, column, onlyAvail);
			} else if (fxn instanceof $ || $.type(fxn) === 'string' && fxn.indexOf('</option>') >= 0) {
				// selectSource is a jQuery object or string of options
				return fxn;
			} else if ($.isArray(fxn)) {
				arry = fxn;
			} else if ($.type(source) === 'object' && fxn) {
				// custom select source function for a SPECIFIC COLUMN
				arry = fxn(table, column, onlyAvail);
			}
			if (arry === false) {
				// fall back to original method
				arry = ts.filter.getOptions(table, column, onlyAvail);
			}

			// get unique elements and sort the list
			// if $.tablesorter.sortText exists (not in the original tablesorter),
			// then natural sort the list otherwise use a basic sort
			arry = $.grep(arry, function (value, indx) {
				return $.inArray(value, arry) === indx;
			});

			if (c.$headers.filter('[data-column="' + column + '"]:last').hasClass('filter-select-nosort')) {
				// unsorted select options
				return arry;
			} else {
				// parse select option values
				$.each(arry, function (i, v) {
					// parse array data using set column parser; this DOES NOT pass the original
					// table cell to the parser format function
					parsed.push({ t: v, p: c.parsers && c.parsers[column].format(v, table, [], column) });
				});

				// sort parsed select options
				cts = c.textSorter || '';
				parsed.sort(function (a, b) {
					// sortNatural breaks if you don't pass it strings
					var x = a.p.toString(),
					    y = b.p.toString();
					if ($.isFunction(cts)) {
						// custom OVERALL text sorter
						return cts(x, y, true, column, table);
					} else if ((typeof cts === "undefined" ? "undefined" : _typeof(cts)) === 'object' && cts.hasOwnProperty(column)) {
						// custom text sorter for a SPECIFIC COLUMN
						return cts[column](x, y, true, column, table);
					} else if (ts.sortNatural) {
						// fall back to natural sort
						return ts.sortNatural(x, y);
					}
					// using an older version! do a basic sort
					return true;
				});
				// rebuild arry from sorted parsed data
				arry = [];
				$.each(parsed, function (i, v) {
					arry.push(v.t);
				});
				return arry;
			}
		},
		getOptions: function getOptions(table, column, onlyAvail) {
			var rowIndex,
			    tbodyIndex,
			    len,
			    row,
			    cache,
			    cell,
			    c = table.config,
			    wo = c.widgetOptions,
			    $tbodies = c.$table.children('tbody'),
			    arry = [];
			for (tbodyIndex = 0; tbodyIndex < $tbodies.length; tbodyIndex++) {
				if (!$tbodies.eq(tbodyIndex).hasClass(c.cssInfoBlock)) {
					cache = c.cache[tbodyIndex];
					len = c.cache[tbodyIndex].normalized.length;
					// loop through the rows
					for (rowIndex = 0; rowIndex < len; rowIndex++) {
						// get cached row from cache.row (old) or row data object (new; last item in normalized array)
						row = cache.row ? cache.row[rowIndex] : cache.normalized[rowIndex][c.columns].$row[0];
						// check if has class filtered
						if (onlyAvail && row.className.match(wo.filter_filteredRow)) {
							continue;
						}
						// get non-normalized cell content
						if (wo.filter_useParsedData || c.parsers[column].parsed || c.$headers.filter('[data-column="' + column + '"]:last').hasClass('filter-parsed')) {
							arry.push('' + cache.normalized[rowIndex][column]);
						} else {
							cell = row.cells[column];
							if (cell) {
								arry.push($.trim(cell.textContent || cell.innerText || $(cell).text()));
							}
						}
					}
				}
			}
			return arry;
		},
		buildSelect: function buildSelect(table, column, arry, updating, onlyAvail) {
			table = $(table)[0];
			column = parseInt(column, 10);
			if (!table.config.cache || $.isEmptyObject(table.config.cache)) {
				return;
			}
			var indx,
			    val,
			    txt,
			    t,
			    $filters,
			    $filter,
			    c = table.config,
			    wo = c.widgetOptions,
			    node = c.$headers.filter('[data-column="' + column + '"]:last'),

			// t.data('placeholder') won't work in jQuery older than 1.4.3
			options = '<option value="">' + (node.data('placeholder') || node.attr('data-placeholder') || wo.filter_placeholder.select || '') + '</option>',

			// Get curent filter value
			currentValue = c.$table.find('thead').find('select.' + ts.css.filter + '[data-column="' + column + '"]').val();
			// nothing included in arry (external source), so get the options from filter_selectSource or column data
			if (typeof arry === 'undefined' || arry === '') {
				arry = ts.filter.getOptionSource(table, column, onlyAvail);
			}

			if ($.isArray(arry)) {
				// build option list
				for (indx = 0; indx < arry.length; indx++) {
					txt = arry[indx] = ('' + arry[indx]).replace(/\"/g, "&quot;");
					val = txt;
					// allow including a symbol in the selectSource array
					// "a-z|A through Z" so that "a-z" becomes the option value
					// and "A through Z" becomes the option text
					if (txt.indexOf(wo.filter_selectSourceSeparator) >= 0) {
						t = txt.split(wo.filter_selectSourceSeparator);
						val = t[0];
						txt = t[1];
					}
					// replace quotes - fixes #242 & ignore empty strings - see http://stackoverflow.com/q/14990971/145346
					options += arry[indx] !== '' ? '<option ' + (val === txt ? '' : 'data-function-name="' + arry[indx] + '" ') + 'value="' + val + '">' + txt + '</option>' : '';
				}
				// clear arry so it doesn't get appended twice
				arry = [];
			}

			// update all selects in the same column (clone thead in sticky headers & any external selects) - fixes 473
			$filters = (c.$filters ? c.$filters : c.$table.children('thead')).find('.' + ts.css.filter);
			if (wo.filter_$externalFilters) {
				$filters = $filters && $filters.length ? $filters.add(wo.filter_$externalFilters) : wo.filter_$externalFilters;
			}
			$filter = $filters.filter('select[data-column="' + column + '"]');

			// make sure there is a select there!
			if ($filter.length) {
				$filter[updating ? 'html' : 'append'](options);
				if (!$.isArray(arry)) {
					// append options if arry is provided externally as a string or jQuery object
					// options (default value) was already added
					$filter.append(arry).val(currentValue);
				}
				$filter.val(currentValue);
			}
		},
		buildDefault: function buildDefault(table, updating) {
			var columnIndex,
			    $header,
			    noSelect,
			    c = table.config,
			    wo = c.widgetOptions,
			    columns = c.columns;
			// build default select dropdown
			for (columnIndex = 0; columnIndex < columns; columnIndex++) {
				$header = c.$headers.filter('[data-column="' + columnIndex + '"]:last');
				noSelect = !($header.hasClass('filter-false') || $header.hasClass('parser-false'));
				// look for the filter-select class; build/update it if found
				if (($header.hasClass('filter-select') || ts.getColumnData(table, wo.filter_functions, columnIndex) === true) && noSelect) {
					ts.filter.buildSelect(table, columnIndex, '', updating, $header.hasClass(wo.filter_onlyAvail));
				}
			}
		}
	};

	ts.getFilters = function (table, getRaw, setFilters, skipFirst) {
		var i,
		    $filters,
		    $column,
		    cols,
		    filters = false,
		    c = table ? $(table)[0].config : '',
		    wo = c ? c.widgetOptions : '';
		if (getRaw !== true && wo && !wo.filter_columnFilters) {
			return $(table).data('lastSearch');
		}
		if (c) {
			if (c.$filters) {
				$filters = c.$filters.find('.' + ts.css.filter);
			}
			if (wo.filter_$externalFilters) {
				$filters = $filters && $filters.length ? $filters.add(wo.filter_$externalFilters) : wo.filter_$externalFilters;
			}
			if ($filters && $filters.length) {
				filters = setFilters || [];
				for (i = 0; i < c.columns + 1; i++) {
					cols = i === c.columns ?
					// "all" columns can now include a range or set of columms (data-column="0-2,4,6-7")
					wo.filter_anyColumnSelector + ',' + wo.filter_multipleColumnSelector : '[data-column="' + i + '"]';
					$column = $filters.filter(cols);
					if ($column.length) {
						// move the latest search to the first slot in the array
						$column = ts.filter.getLatestSearch($column);
						if ($.isArray(setFilters)) {
							// skip first (latest input) to maintain cursor position while typing
							if (skipFirst) {
								$column.slice(1);
							}
							if (i === c.columns) {
								// prevent data-column="all" from filling data-column="0,1" (etc)
								cols = $column.filter(wo.filter_anyColumnSelector);
								$column = cols.length ? cols : $column;
							}
							$column.val(setFilters[i]).trigger('change.tsfilter');
						} else {
							filters[i] = $column.val() || '';
							// don't change the first... it will move the cursor
							if (i === c.columns) {
								// don't update range columns from "all" setting
								$column.slice(1).filter('[data-column*="' + $column.attr('data-column') + '"]').val(filters[i]);
							} else {
								$column.slice(1).val(filters[i]);
							}
						}
						// save any match input dynamically
						if (i === c.columns && $column.length) {
							wo.filter_$anyMatch = $column;
						}
					}
				}
			}
		}
		if (filters.length === 0) {
			filters = false;
		}
		return filters;
	};

	ts.setFilters = function (table, filter, apply, skipFirst) {
		var c = table ? $(table)[0].config : '',
		    valid = ts.getFilters(table, true, filter, skipFirst);
		if (c && apply) {
			// ensure new set filters are applied, even if the search is the same
			c.lastCombinedFilter = null;
			c.lastSearch = [];
			ts.filter.searching(c.$table[0], filter, skipFirst);
			c.$table.trigger('filterFomatterUpdate');
		}
		return !!valid;
	};

	// Widget: Sticky headers
	// based on this awesome article:
	// http://css-tricks.com/13465-persistent-headers/
	// and https://github.com/jmosbech/StickyTableHeaders by Jonas Mosbech
	// **************************
	ts.addWidget({
		id: "stickyHeaders",
		priority: 60, // sticky widget must be initialized after the filter widget!
		options: {
			stickyHeaders: '', // extra class name added to the sticky header row
			stickyHeaders_attachTo: null, // jQuery selector or object to attach sticky header to
			stickyHeaders_xScroll: null, // jQuery selector or object to monitor horizontal scroll position (defaults: xScroll > attachTo > window)
			stickyHeaders_yScroll: null, // jQuery selector or object to monitor vertical scroll position (defaults: yScroll > attachTo > window)
			stickyHeaders_offset: 0, // number or jquery selector targeting the position:fixed element
			stickyHeaders_filteredToTop: true, // scroll table top into view after filtering
			stickyHeaders_cloneId: '-sticky', // added to table ID, if it exists
			stickyHeaders_addResizeEvent: true, // trigger "resize" event on headers
			stickyHeaders_includeCaption: true, // if false and a caption exist, it won't be included in the sticky header
			stickyHeaders_zIndex: 2 // The zIndex of the stickyHeaders, allows the user to adjust this to their needs
		},
		format: function format(table, c, wo) {
			// filter widget doesn't initialize on an empty table. Fixes #449
			if (c.$table.hasClass('hasStickyHeaders') || $.inArray('filter', c.widgets) >= 0 && !c.$table.hasClass('hasFilters')) {
				return;
			}
			var $table = c.$table,
			    $attach = $(wo.stickyHeaders_attachTo),
			    namespace = c.namespace + 'stickyheaders ',

			// element to watch for the scroll event
			$yScroll = $(wo.stickyHeaders_yScroll || wo.stickyHeaders_attachTo || window),
			    $xScroll = $(wo.stickyHeaders_xScroll || wo.stickyHeaders_attachTo || window),
			    $thead = $table.children('thead:first'),
			    $header = $thead.children('tr').not('.sticky-false').children(),
			    $tfoot = $table.children('tfoot'),
			    $stickyOffset = isNaN(wo.stickyHeaders_offset) ? $(wo.stickyHeaders_offset) : '',
			    stickyOffset = $attach.length ? 0 : $stickyOffset.length ? $stickyOffset.height() || 0 : parseInt(wo.stickyHeaders_offset, 10) || 0,

			// is this table nested? If so, find parent sticky header wrapper (div, not table)
			$nestedSticky = $table.parent().closest('.' + ts.css.table).hasClass('hasStickyHeaders') ? $table.parent().closest('table.tablesorter')[0].config.widgetOptions.$sticky.parent() : [],
			    nestedStickyTop = $nestedSticky.length ? $nestedSticky.height() : 0,

			// clone table, then wrap to make sticky header
			$stickyTable = wo.$sticky = $table.clone().addClass('containsStickyHeaders ' + ts.css.sticky + ' ' + wo.stickyHeaders).wrap('<div class="' + ts.css.stickyWrap + '">'),
			    $stickyWrap = $stickyTable.parent().css({
				position: $attach.length ? 'absolute' : 'fixed',
				margin: 0,
				top: stickyOffset + nestedStickyTop,
				left: 0,
				visibility: 'hidden',
				zIndex: wo.stickyHeaders_zIndex || 2
			}),
			    $stickyThead = $stickyTable.children('thead:first'),
			    $stickyCells,
			    laststate = '',
			    spacing = 0,
			    setWidth = function setWidth($orig, $clone) {
				$orig.filter(':visible').each(function (i) {
					var width,
					    border,
					    $cell = $clone.filter(':visible').eq(i),
					    $this = $(this);
					// code from https://github.com/jmosbech/StickyTableHeaders
					if ($this.css('box-sizing') === 'border-box') {
						width = $this.outerWidth();
					} else {
						if ($cell.css('border-collapse') === 'collapse') {
							if (window.getComputedStyle) {
								width = parseFloat(window.getComputedStyle(this, null).width);
							} else {
								// ie8 only
								border = parseFloat($this.css('border-width'));
								width = $this.outerWidth() - parseFloat($this.css('padding-left')) - parseFloat($this.css('padding-right')) - border;
							}
						} else {
							width = $this.width();
						}
					}
					$cell.css({
						'min-width': width,
						'max-width': width
					});
				});
			},
			    resizeHeader = function resizeHeader() {
				stickyOffset = $stickyOffset.length ? $stickyOffset.height() || 0 : parseInt(wo.stickyHeaders_offset, 10) || 0;
				spacing = 0;
				$stickyWrap.css({
					left: $attach.length ? parseInt($attach.css('padding-left'), 10) || 0 : $table.offset().left - parseInt($table.css('margin-left'), 10) - $xScroll.scrollLeft() - spacing,
					width: $table.outerWidth()
				});
				setWidth($table, $stickyTable);
				setWidth($header, $stickyCells);
			};
			// fix clone ID, if it exists - fixes #271
			if ($stickyTable.attr('id')) {
				$stickyTable[0].id += wo.stickyHeaders_cloneId;
			}
			// clear out cloned table, except for sticky header
			// include caption & filter row (fixes #126 & #249) - don't remove cells to get correct cell indexing
			$stickyTable.find('thead:gt(0), tr.sticky-false').hide();
			$stickyTable.find('tbody, tfoot').remove();
			if (!wo.stickyHeaders_includeCaption) {
				$stickyTable.find('caption').remove();
			}
			// issue #172 - find td/th in sticky header
			$stickyCells = $stickyThead.children().children();
			$stickyTable.css({ height: 0, width: 0, margin: 0 });
			// remove resizable block
			$stickyCells.find('.' + ts.css.resizer).remove();
			// update sticky header class names to match real header after sorting
			$table.addClass('hasStickyHeaders').bind('pagerComplete' + namespace, function () {
				resizeHeader();
			});

			ts.bindEvents(table, $stickyThead.children().children('.tablesorter-header'));

			// add stickyheaders AFTER the table. If the table is selected by ID, the original one (first) will be returned.
			$table.after($stickyWrap);

			// onRenderHeader is defined, we need to do something about it (fixes #641)
			if (c.onRenderHeader) {
				$stickyThead.children('tr').children().each(function (index) {
					// send second parameter
					c.onRenderHeader.apply($(this), [index, c, $stickyTable]);
				});
			}

			// make it sticky!
			$xScroll.add($yScroll).unbind('scroll resize '.split(' ').join(namespace)).bind('scroll resize '.split(' ').join(namespace), function (event) {
				if (!$table.is(':visible')) {
					return;
				} // fixes #278
				// Detect nested tables - fixes #724
				nestedStickyTop = $nestedSticky.length ? $nestedSticky.offset().top - $yScroll.scrollTop() + $nestedSticky.height() : 0;
				var prefix = 'tablesorter-sticky-',
				    offset = $table.offset(),
				    yWindow = $.isWindow($yScroll[0]),
				    xWindow = $.isWindow($xScroll[0]),

				// scrollTop = ( $attach.length ? $attach.offset().top : $yScroll.scrollTop() ) + stickyOffset + nestedStickyTop,
				scrollTop = ($attach.length ? yWindow ? $yScroll.scrollTop() : $yScroll.offset().top : $yScroll.scrollTop()) + stickyOffset + nestedStickyTop,
				    tableHeight = $table.height() - ($stickyWrap.height() + ($tfoot.height() || 0)),
				    isVisible = scrollTop > offset.top && scrollTop < offset.top + tableHeight ? 'visible' : 'hidden',
				    cssSettings = { visibility: isVisible };

				if ($attach.length) {
					cssSettings.top = yWindow ? scrollTop : $attach.scrollTop();
				}
				if (xWindow) {
					// adjust when scrolling horizontally - fixes issue #143
					cssSettings.left = $table.offset().left - parseInt($table.css('margin-left'), 10) - $xScroll.scrollLeft() - spacing;
				}
				if ($nestedSticky.length) {
					cssSettings.top = (cssSettings.top || 0) + stickyOffset + nestedStickyTop;
				}
				$stickyWrap.removeClass(prefix + 'visible ' + prefix + 'hidden').addClass(prefix + isVisible).css(cssSettings);
				if (isVisible !== laststate || event.type === 'resize') {
					// make sure the column widths match
					resizeHeader();
					laststate = isVisible;
				}
			});
			if (wo.stickyHeaders_addResizeEvent) {
				ts.addHeaderResizeEvent(table);
			}

			// look for filter widget
			if ($table.hasClass('hasFilters') && wo.filter_columnFilters) {
				// scroll table into view after filtering, if sticky header is active - #482
				$table.bind('filterEnd' + namespace, function () {
					// $(':focus') needs jQuery 1.6+
					var $td = $(document.activeElement).closest('td'),
					    column = $td.parent().children().index($td);
					// only scroll if sticky header is active
					if ($stickyWrap.hasClass(ts.css.stickyVis) && wo.stickyHeaders_filteredToTop) {
						// scroll to original table (not sticky clone)
						window.scrollTo(0, $table.position().top);
						// give same input/select focus; check if c.$filters exists; fixes #594
						if (column >= 0 && c.$filters) {
							c.$filters.eq(column).find('a, select, input').filter(':visible').focus();
						}
					}
				});
				ts.filter.bindSearch($table, $stickyCells.find('.' + ts.css.filter));
				// support hideFilters
				if (wo.filter_hideFilters) {
					ts.filter.hideFilters($stickyTable, c);
				}
			}

			$table.trigger('stickyHeadersInit');
		},
		remove: function remove(table, c, wo) {
			var namespace = c.namespace + 'stickyheaders ';
			c.$table.removeClass('hasStickyHeaders').unbind('pagerComplete filterEnd '.split(' ').join(namespace)).next('.' + ts.css.stickyWrap).remove();
			if (wo.$sticky && wo.$sticky.length) {
				wo.$sticky.remove();
			} // remove cloned table
			// don't unbind if any table on the page still has stickyheaders applied
			if (!$('.hasStickyHeaders').length) {
				$(window).add(wo.stickyHeaders_xScroll).add(wo.stickyHeaders_yScroll).add(wo.stickyHeaders_attachTo).unbind('scroll resize '.split(' ').join(namespace));
			}
			ts.addHeaderResizeEvent(table, false);
		}
	});

	// Add Column resizing widget
	// this widget saves the column widths if
	// $.tablesorter.storage function is included
	// **************************
	ts.addWidget({
		id: "resizable",
		priority: 40,
		options: {
			resizable: true,
			resizable_addLastColumn: false,
			resizable_widths: [],
			resizable_throttle: false // set to true (5ms) or any number 0-10 range
		},
		format: function format(table, c, wo) {
			if (c.$table.hasClass('hasResizable')) {
				return;
			}
			c.$table.addClass('hasResizable');
			ts.resizableReset(table, true); // set default widths
			var $rows,
			    $columns,
			    $column,
			    column,
			    timer,
			    storedSizes = {},
			    $table = c.$table,
			    $wrap = $table.parent(),
			    overflow = $table.parent().css('overflow') === 'auto',
			    mouseXPosition = 0,
			    $target = null,
			    $next = null,
			    fullWidth = Math.abs($table.parent().width() - $table.width()) < 20,
			    mouseMove = function mouseMove(event) {
				if (mouseXPosition === 0 || !$target) {
					return;
				}
				// resize columns
				var leftEdge = event.pageX - mouseXPosition,
				    targetWidth = $target.width();
				$target.width(targetWidth + leftEdge);
				if ($target.width() !== targetWidth && fullWidth) {
					$next.width($next.width() - leftEdge);
				} else if (overflow) {
					$table.width(function (i, w) {
						return w + leftEdge;
					});
					if (!$next.length) {
						// if expanding right-most column, scroll the wrapper
						$wrap[0].scrollLeft = $table.width();
					}
				}
				mouseXPosition = event.pageX;
			},
			    stopResize = function stopResize() {
				if (ts.storage && $target && $next) {
					storedSizes = {};
					storedSizes[$target.index()] = $target.width();
					storedSizes[$next.index()] = $next.width();
					$target.width(storedSizes[$target.index()]);
					$next.width(storedSizes[$next.index()]);
					if (wo.resizable !== false) {
						// save all column widths
						ts.storage(table, 'tablesorter-resizable', c.$headers.map(function () {
							return $(this).width();
						}).get());
					}
				}
				mouseXPosition = 0;
				$target = $next = null;
				$(window).trigger('resize'); // will update stickyHeaders, just in case
			};
			storedSizes = ts.storage && wo.resizable !== false ? ts.storage(table, 'tablesorter-resizable') : {};
			// process only if table ID or url match
			if (storedSizes) {
				for (column in storedSizes) {
					if (!isNaN(column) && column < c.$headers.length) {
						c.$headers.eq(column).width(storedSizes[column]); // set saved resizable widths
					}
				}
			}
			$rows = $table.children('thead:first').children('tr');
			// add resizable-false class name to headers (across rows as needed)
			$rows.children().each(function () {
				var canResize,
				    $column = $(this);
				column = $column.attr('data-column');
				canResize = ts.getData($column, ts.getColumnData(table, c.headers, column), 'resizable') === "false";
				$rows.children().filter('[data-column="' + column + '"]')[canResize ? 'addClass' : 'removeClass']('resizable-false');
			});
			// add wrapper inside each cell to allow for positioning of the resizable target block
			$rows.each(function () {
				$column = $(this).children().not('.resizable-false');
				if (!$(this).find('.' + ts.css.wrapper).length) {
					// Firefox needs this inner div to position the resizer correctly
					$column.wrapInner('<div class="' + ts.css.wrapper + '" style="position:relative;height:100%;width:100%"></div>');
				}
				// don't include the last column of the row
				if (!wo.resizable_addLastColumn) {
					$column = $column.slice(0, -1);
				}
				$columns = $columns ? $columns.add($column) : $column;
			});
			$columns.each(function () {
				var $column = $(this),
				    padding = parseInt($column.css('padding-right'), 10) + 10; // 10 is 1/2 of the 20px wide resizer
				$column.find('.' + ts.css.wrapper).append('<div class="' + ts.css.resizer + '" style="cursor:w-resize;position:absolute;z-index:1;right:-' + padding + 'px;top:0;height:100%;width:20px;"></div>');
			}).find('.' + ts.css.resizer).bind('mousedown', function (event) {
				// save header cell and mouse position
				$target = $(event.target).closest('th');
				var $header = c.$headers.filter('[data-column="' + $target.attr('data-column') + '"]');
				if ($header.length > 1) {
					$target = $target.add($header);
				}
				// if table is not as wide as it's parent, then resize the table
				$next = event.shiftKey ? $target.parent().find('th').not('.resizable-false').filter(':last') : $target.nextAll(':not(.resizable-false)').eq(0);
				mouseXPosition = event.pageX;
			});
			$(document).bind('mousemove.tsresize', function (event) {
				// ignore mousemove if no mousedown
				if (mouseXPosition === 0 || !$target) {
					return;
				}
				if (wo.resizable_throttle) {
					clearTimeout(timer);
					timer = setTimeout(function () {
						mouseMove(event);
					}, isNaN(wo.resizable_throttle) ? 5 : wo.resizable_throttle);
				} else {
					mouseMove(event);
				}
			}).bind('mouseup.tsresize', function () {
				stopResize();
			});

			// right click to reset columns to default widths
			$table.find('thead:first').bind('contextmenu.tsresize', function () {
				ts.resizableReset(table);
				// $.isEmptyObject() needs jQuery 1.4+; allow right click if already reset
				var allowClick = $.isEmptyObject ? $.isEmptyObject(storedSizes) : true;
				storedSizes = {};
				return allowClick;
			});
		},
		remove: function remove(table, c) {
			c.$table.removeClass('hasResizable').children('thead').unbind('mouseup.tsresize mouseleave.tsresize contextmenu.tsresize').children('tr').children().unbind('mousemove.tsresize mouseup.tsresize')
			// don't remove "tablesorter-wrapper" as uitheme uses it too
			.find('.' + ts.css.resizer).remove();
			ts.resizableReset(table);
		}
	});
	ts.resizableReset = function (table, nosave) {
		$(table).each(function () {
			var $t,
			    c = this.config,
			    wo = c && c.widgetOptions;
			if (table && c) {
				c.$headers.each(function (i) {
					$t = $(this);
					if (wo.resizable_widths[i]) {
						$t.css('width', wo.resizable_widths[i]);
					} else if (!$t.hasClass('resizable-false')) {
						// don't clear the width of any column that is not resizable
						$t.css('width', '');
					}
				});
				if (ts.storage && !nosave) {
					ts.storage(this, 'tablesorter-resizable', {});
				}
			}
		});
	};

	// Save table sort widget
	// this widget saves the last sort only if the
	// saveSort widget option is true AND the
	// $.tablesorter.storage function is included
	// **************************
	ts.addWidget({
		id: 'saveSort',
		priority: 20,
		options: {
			saveSort: true
		},
		init: function init(table, thisWidget, c, wo) {
			// run widget format before all other widgets are applied to the table
			thisWidget.format(table, c, wo, true);
		},
		format: function format(table, c, wo, init) {
			var stored,
			    time,
			    $table = c.$table,
			    saveSort = wo.saveSort !== false,
			    // make saveSort active/inactive; default to true
			sortList = { "sortList": c.sortList };
			if (c.debug) {
				time = new Date();
			}
			if ($table.hasClass('hasSaveSort')) {
				if (saveSort && table.hasInitialized && ts.storage) {
					ts.storage(table, 'tablesorter-savesort', sortList);
					if (c.debug) {
						ts.benchmark('saveSort widget: Saving last sort: ' + c.sortList, time);
					}
				}
			} else {
				// set table sort on initial run of the widget
				$table.addClass('hasSaveSort');
				sortList = '';
				// get data
				if (ts.storage) {
					stored = ts.storage(table, 'tablesorter-savesort');
					sortList = stored && stored.hasOwnProperty('sortList') && $.isArray(stored.sortList) ? stored.sortList : '';
					if (c.debug) {
						ts.benchmark('saveSort: Last sort loaded: "' + sortList + '"', time);
					}
					$table.bind('saveSortReset', function (event) {
						event.stopPropagation();
						ts.storage(table, 'tablesorter-savesort', '');
					});
				}
				// init is true when widget init is run, this will run this widget before all other widgets have initialized
				// this method allows using this widget in the original tablesorter plugin; but then it will run all widgets twice.
				if (init && sortList && sortList.length > 0) {
					c.sortList = sortList;
				} else if (table.hasInitialized && sortList && sortList.length > 0) {
					// update sort change
					$table.trigger('sorton', [sortList]);
				}
			}
		},
		remove: function remove(table) {
			// clear storage
			if (ts.storage) {
				ts.storage(table, 'tablesorter-savesort', '');
			}
		}
	});
})(jQuery, window);
'use strict';

(function ($) {

    $(window).load(function () {
        var input = $('#edit-field-valghalla-mail-attachments-und-0-upload');
        input.addClass('hidden');

        $('#edit-field-valghalla-mail-attachments-und-0-upload-button').addClass('hidden');
        $(":file").filestyle({ buttonText: "Vælg fil" });

        $(":file").filestyle({ placeholder: "Ingen fil" });
    });
})(jQuery);

(function ($) {
    Drupal.behaviors.insertButton = {
        attach: function attach(context, settings) {
            var endpoint = '/valghalla/report';
            var $wrapper = $('.front .breadcrumb__wrapper');
            var $breadcrumb = $('.breadcrumb');

            // If we don't have a wrapper, stop what we are doing!
            if ($wrapper.length === 0) return;

            // Don't proceed if a breadcrumb is present. This will break styling.
            if ($breadcrumb.length > 0) return;

            // Generate PDF download link.
            var $button = $('<a/>').attr('href', endpoint).attr('target', '_blank').addClass('btn btn-secondary').html($('<i/>').addClass('fa fa-file-pdf-o') + ' ' + Drupal.t('Generér PDF rapport'));

            // Inserts a button into the wrapper.
            $wrapper.html($button);
        }
    };
})(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * bootstrap-filestyle
 * doc: http://markusslima.github.io/bootstrap-filestyle/
 * github: https://github.com/markusslima/bootstrap-filestyle
 *
 * Copyright (c) 2014 Markus Vinicius da Silva Lima
 * Version 1.2.1
 * Licensed under the MIT license.
 */
(function ($) {
	"use strict";

	var nextId = 0;

	var Filestyle = function Filestyle(element, options) {
		this.options = options;
		this.$elementFilestyle = [];
		this.$element = $(element);
	};

	Filestyle.prototype = {
		clear: function clear() {
			this.$element.val('');
			this.$elementFilestyle.find(':text').val('');
			this.$elementFilestyle.find('.badge').remove();
		},

		destroy: function destroy() {
			this.$element.removeAttr('style').removeData('filestyle');
			this.$elementFilestyle.remove();
		},

		disabled: function disabled(value) {
			if (value === true) {
				if (!this.options.disabled) {
					this.$element.attr('disabled', 'true');
					this.$elementFilestyle.find('label').attr('disabled', 'true');
					this.options.disabled = true;
				}
			} else if (value === false) {
				if (this.options.disabled) {
					this.$element.removeAttr('disabled');
					this.$elementFilestyle.find('label').removeAttr('disabled');
					this.options.disabled = false;
				}
			} else {
				return this.options.disabled;
			}
		},

		buttonBefore: function buttonBefore(value) {
			if (value === true) {
				if (!this.options.buttonBefore) {
					this.options.buttonBefore = true;
					if (this.options.input) {
						this.$elementFilestyle.remove();
						this.constructor();
						this.pushNameFiles();
					}
				}
			} else if (value === false) {
				if (this.options.buttonBefore) {
					this.options.buttonBefore = false;
					if (this.options.input) {
						this.$elementFilestyle.remove();
						this.constructor();
						this.pushNameFiles();
					}
				}
			} else {
				return this.options.buttonBefore;
			}
		},

		icon: function icon(value) {
			if (value === true) {
				if (!this.options.icon) {
					this.options.icon = true;
					this.$elementFilestyle.find('label').prepend(this.htmlIcon());
				}
			} else if (value === false) {
				if (this.options.icon) {
					this.options.icon = false;
					this.$elementFilestyle.find('.icon-span-filestyle').remove();
				}
			} else {
				return this.options.icon;
			}
		},

		input: function input(value) {
			if (value === true) {
				if (!this.options.input) {
					this.options.input = true;

					if (this.options.buttonBefore) {
						this.$elementFilestyle.append(this.htmlInput());
					} else {
						this.$elementFilestyle.prepend(this.htmlInput());
					}

					this.$elementFilestyle.find('.badge').remove();

					this.pushNameFiles();

					this.$elementFilestyle.find('.group-span-filestyle').addClass('input-group-btn');
				}
			} else if (value === false) {
				if (this.options.input) {
					this.options.input = false;
					this.$elementFilestyle.find(':text').remove();
					var files = this.pushNameFiles();
					if (files.length > 0 && this.options.badge) {
						this.$elementFilestyle.find('label').append(' <span class="badge">' + files.length + '</span>');
					}
					this.$elementFilestyle.find('.group-span-filestyle').removeClass('input-group-btn');
				}
			} else {
				return this.options.input;
			}
		},

		size: function size(value) {
			if (value !== undefined) {
				var btn = this.$elementFilestyle.find('label'),
				    input = this.$elementFilestyle.find('input');

				btn.removeClass('btn-lg btn-sm');
				input.removeClass('input-lg input-sm');
				if (value != 'nr') {
					btn.addClass('btn-' + value);
					input.addClass('input-' + value);
				}
			} else {
				return this.options.size;
			}
		},

		placeholder: function placeholder(value) {
			if (value !== undefined) {
				this.options.placeholder = value;
				this.$elementFilestyle.find('input').attr('placeholder', value);
			} else {
				return this.options.placeholder;
			}
		},

		buttonText: function buttonText(value) {
			if (value !== undefined) {
				this.options.buttonText = value;
				this.$elementFilestyle.find('label .buttonText').html(this.options.buttonText);
			} else {
				return this.options.buttonText;
			}
		},

		buttonName: function buttonName(value) {
			if (value !== undefined) {
				this.options.buttonName = value;
				this.$elementFilestyle.find('label').attr({
					'class': 'btn ' + this.options.buttonName
				});
			} else {
				return this.options.buttonName;
			}
		},

		iconName: function iconName(value) {
			if (value !== undefined) {
				this.$elementFilestyle.find('.icon-span-filestyle').attr({
					'class': 'icon-span-filestyle ' + this.options.iconName
				});
			} else {
				return this.options.iconName;
			}
		},

		htmlIcon: function htmlIcon() {
			if (this.options.icon) {
				return '<span class="icon-span-filestyle ' + this.options.iconName + '"></span> ';
			} else {
				return '';
			}
		},

		htmlInput: function htmlInput() {
			if (this.options.input) {
				return '<input type="text" class="form-control ' + (this.options.size == 'nr' ? '' : 'input-' + this.options.size) + '" placeholder="' + this.options.placeholder + '" disabled> ';
			} else {
				return '';
			}
		},

		// puts the name of the input files
		// return files
		pushNameFiles: function pushNameFiles() {
			var content = '',
			    files = [];
			if (this.$element[0].files === undefined) {
				files[0] = {
					'name': this.$element[0] && this.$element[0].value
				};
			} else {
				files = this.$element[0].files;
			}

			for (var i = 0; i < files.length; i++) {
				content += files[i].name.split("\\").pop() + ', ';
			}

			if (content !== '') {
				this.$elementFilestyle.find(':text').val(content.replace(/\, $/g, ''));
			} else {
				this.$elementFilestyle.find(':text').val('');
			}

			return files;
		},

		constructor: function constructor() {
			var _self = this,
			    html = '',
			    id = _self.$element.attr('id'),
			    files = [],
			    btn = '',
			    $label;

			if (id === '' || !id) {
				id = 'filestyle-' + nextId;
				_self.$element.attr({
					'id': id
				});
				nextId++;
			}

			btn = '<span class="group-span-filestyle ' + (_self.options.input ? 'input-group-btn' : '') + '">' + '<label for="' + id + '" class="btn ' + _self.options.buttonName + ' ' + (_self.options.size == 'nr' ? '' : 'btn-' + _self.options.size) + '" ' + (_self.options.disabled ? 'disabled="true"' : '') + '>' + _self.htmlIcon() + '<span class="buttonText">' + _self.options.buttonText + '</span>' + '</label>' + '</span>';

			html = _self.options.buttonBefore ? btn + _self.htmlInput() : _self.htmlInput() + btn;

			_self.$elementFilestyle = $('<div class="bootstrap-filestyle input-group">' + html + '</div>');
			_self.$elementFilestyle.find('.group-span-filestyle').attr('tabindex', "0").keypress(function (e) {
				if (e.keyCode === 13 || e.charCode === 32) {
					_self.$elementFilestyle.find('label').click();
					return false;
				}
			});

			// hidding input file and add filestyle
			_self.$element.css({
				'position': 'absolute',
				'clip': 'rect(0px 0px 0px 0px)' // using 0px for work in IE8
			}).attr('tabindex', "-1").after(_self.$elementFilestyle);

			if (_self.options.disabled) {
				_self.$element.attr('disabled', 'true');
			}

			// Getting input file value
			_self.$element.change(function () {
				var files = _self.pushNameFiles();

				if (_self.options.input == false && _self.options.badge) {
					if (_self.$elementFilestyle.find('.badge').length == 0) {
						_self.$elementFilestyle.find('label').append(' <span class="badge">' + files.length + '</span>');
					} else if (files.length == 0) {
						_self.$elementFilestyle.find('.badge').remove();
					} else {
						_self.$elementFilestyle.find('.badge').html(files.length);
					}
				} else {
					_self.$elementFilestyle.find('.badge').remove();
				}
			});

			// Check if browser is Firefox
			if (window.navigator.userAgent.search(/firefox/i) > -1) {
				// Simulating choose file for firefox
				_self.$elementFilestyle.find('label').click(function () {
					_self.$element.click();
					return false;
				});
			}
		}
	};

	var old = $.fn.filestyle;

	$.fn.filestyle = function (option, value) {
		var get = '',
		    element = this.each(function () {
			if ($(this).attr('type') === 'file') {
				var $this = $(this),
				    data = $this.data('filestyle'),
				    options = $.extend({}, $.fn.filestyle.defaults, option, (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option);

				if (!data) {
					$this.data('filestyle', data = new Filestyle(this, options));
					data.constructor();
				}

				if (typeof option === 'string') {
					get = data[option](value);
				}
			}
		});

		if ((typeof get === 'undefined' ? 'undefined' : _typeof(get)) !== undefined) {
			return get;
		} else {
			return element;
		}
	};

	$.fn.filestyle.defaults = {
		'buttonText': 'Choose file',
		'iconName': 'glyphicon glyphicon-folder-open',
		'buttonName': 'btn-default',
		'size': 'nr',
		'input': true,
		'badge': true,
		'icon': true,
		'buttonBefore': false,
		'disabled': false,
		'placeholder': ''
	};

	$.fn.filestyle.noConflict = function () {
		$.fn.filestyle = old;
		return this;
	};

	$(function () {
		$('.filestyle').each(function () {
			var $this = $(this),
			    options = {

				'input': $this.attr('data-input') === 'false' ? false : true,
				'icon': $this.attr('data-icon') === 'false' ? false : true,
				'buttonBefore': $this.attr('data-buttonBefore') === 'true' ? true : false,
				'disabled': $this.attr('data-disabled') === 'true' ? true : false,
				'size': $this.attr('data-size'),
				'buttonText': $this.attr('data-buttonText'),
				'buttonName': $this.attr('data-buttonName'),
				'iconName': $this.attr('data-iconName'),
				'badge': $this.attr('data-badge') === 'false' ? false : true,
				'placeholder': $this.attr('data-placeholder')
			};

			$this.filestyle(options);
		});
	});
})(window.jQuery);
'use strict';

/*
 * Slinky
 * A light-weight, responsive, mobile-like navigation menu plugin for jQuery
 * Built by Ali Zahid <ali.zahid@live.com>
 * Published under the MIT license
 */

;(function ($) {
  var lastClick;

  $.fn.slinky = function (options) {
    var settings = $.extend({
      label: 'Back',
      title: false,
      speed: 300,
      resize: true,
      activeClass: 'active',
      headerClass: 'header',
      headingTag: '<h2>',
      backFirst: false
    }, options);

    var menu = $(this),
        root = menu.children().first();

    menu.addClass('slinky-menu');

    var move = function move(depth, callback) {
      var left = Math.round(parseInt(root.get(0).style.left)) || 0;

      root.css('left', left - depth * 100 + '%');

      if (typeof callback === 'function') {
        setTimeout(callback, settings.speed);
      }
    };

    var resize = function resize(content) {
      menu.height(content.outerHeight());
    };

    var transition = function transition(speed) {
      menu.css('transition-duration', speed + 'ms');
      root.css('transition-duration', speed + 'ms');
    };

    transition(settings.speed);

    $('a + ul', menu).prev().addClass('next');

    $('li > ul', menu).prepend('<li class="' + settings.headerClass + '">');

    if (settings.title === true) {
      $('li > ul', menu).each(function () {
        var $link = $(this).parent().find('a').first(),
            label = $link.text(),
            title = $('<a>').addClass('title').text(label).attr('href', $link.attr('href'));

        $('> .' + settings.headerClass, this).append(title);
      });
    }

    if (!settings.title && settings.label === true) {
      $('li > ul', menu).each(function () {
        var label = $(this).parent().find('a').first().text(),
            backLink = $('<a>').text(label).prop('href', '#').addClass('back');

        if (settings.backFirst) {
          $('> .' + settings.headerClass, this).prepend(backLink);
        } else {
          $('> .' + settings.headerClass, this).append(backLink);
        }
      });
    } else {
      var backLink = $('<a>').text(settings.label).prop('href', '#').addClass('back');

      if (settings.backFirst) {
        $('.' + settings.headerClass, menu).prepend(backLink);
      } else {
        $('.' + settings.headerClass, menu).append(backLink);
      }
    }

    $('a', menu).on('click', function (e) {
      if (lastClick + settings.speed > Date.now()) {
        return false;
      }

      lastClick = Date.now();

      var a = $(this);

      if (a.hasClass('next') || a.hasClass('back')) {
        e.preventDefault();
      }

      if (a.hasClass('next')) {
        menu.find('.' + settings.activeClass).removeClass(settings.activeClass);

        a.next().show().addClass(settings.activeClass);

        move(1);

        if (settings.resize) {
          resize(a.next());
        }
      } else if (a.hasClass('back')) {
        move(-1, function () {
          menu.find('.' + settings.activeClass).removeClass(settings.activeClass);

          a.parent().parent().hide().parentsUntil(menu, 'ul').first().addClass(settings.activeClass);
        });

        if (settings.resize) {
          resize(a.parent().parent().parentsUntil(menu, 'ul'));
        }
      }
    });

    this.jump = function (to, animate) {
      to = $(to);

      var active = menu.find('.' + settings.activeClass);

      if (active.length > 0) {
        active = active.parentsUntil(menu, 'ul').length;
      } else {
        active = 0;
      }

      menu.find('ul').removeClass(settings.activeClass).hide();

      var menus = to.parentsUntil(menu, 'ul');

      menus.show();
      to.show().addClass(settings.activeClass);

      if (animate === false) {
        transition(0);
      }

      move(menus.length - active);

      if (settings.resize) {
        resize(to);
      }

      if (animate === false) {
        transition(settings.speed);
      }
    };

    this.home = function (animate) {
      if (animate === false) {
        transition(0);
      }

      var active = menu.find('.' + settings.activeClass),
          count = active.parentsUntil(menu, 'li').length;

      if (count > 0) {
        move(-count, function () {
          active.removeClass(settings.activeClass);
        });

        if (settings.resize) {
          resize($(active.parentsUntil(menu, 'li').get(count - 1)).parent());
        }
      }

      if (animate === false) {
        transition(settings.speed);
      }
    };

    this.destroy = function () {
      $('.' + settings.headerClass, menu).remove();
      $('a', menu).removeClass('next').off('click');

      menu.removeClass('slinky-menu').css('transition-duration', '');
      root.css('transition-duration', '');
    };

    var active = menu.find('.' + settings.activeClass);

    if (active.length > 0) {
      active.removeClass(settings.activeClass);

      this.jump(active, false);
    }

    return this;
  };
})(jQuery);
'use strict';

jQuery(function ($) {
    'use strict';

    // Flexy header

    flexy_header.init();

    // Sidr
    $('.slinky-menu').find('ul, li, a').removeClass();

    $('.sidr-toggle--right').sidr({
        name: 'sidr-main',
        side: 'right',
        renaming: false,
        body: '.layout__wrapper',
        source: '.sidr-source-provider'
    });

    // Slinky
    $('.sidr .slinky-menu').slinky({
        title: true,
        label: ''
    });

    // Enable / disable Bootstrap tooltips, based upon touch events
    if (Modernizr.touchevents) {
        $('[data-toggle="tooltip"]').tooltip('hide');
    } else {
        $('[data-toggle="tooltip"]').tooltip();
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC5qcyIsImZsZXh5LWhlYWRlci5qcyIsImZsZXh5LW5hdmlnYXRpb24uanMiLCJqcXVlcnkuc2lkci5qcyIsInBhY2UuanMiLCJqcXVlcnkudGFibGVzb3J0ZXIubWluLmpzIiwianF1ZXJ5LnRhYmxlc29ydGVyLndpZGdldHMuanMiLCJ2YWxnaGFsbGEuanMiLCJib290c3RyYXAtZmlsZXN0eWxlLmpzIiwiY3VzdG9tLXNsaW5reS5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJFcnJvciIsIiQiLCJ2ZXJzaW9uIiwiZm4iLCJqcXVlcnkiLCJzcGxpdCIsInRyYW5zaXRpb25FbmQiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwibmFtZSIsInN0eWxlIiwidW5kZWZpbmVkIiwiZW5kIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsImNhbGxlZCIsIiRlbCIsIm9uZSIsImNhbGxiYWNrIiwidHJpZ2dlciIsInN1cHBvcnQiLCJzZXRUaW1lb3V0IiwiZXZlbnQiLCJzcGVjaWFsIiwiYnNUcmFuc2l0aW9uRW5kIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJlIiwidGFyZ2V0IiwiaXMiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkaXNtaXNzIiwiQWxlcnQiLCJvbiIsImNsb3NlIiwiVkVSU0lPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJwcm90b3R5cGUiLCIkdGhpcyIsInNlbGVjdG9yIiwiYXR0ciIsInJlcGxhY2UiLCIkcGFyZW50IiwicHJldmVudERlZmF1bHQiLCJsZW5ndGgiLCJjbG9zZXN0IiwiRXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZUVsZW1lbnQiLCJkZXRhY2giLCJyZW1vdmUiLCJoYXNDbGFzcyIsIlBsdWdpbiIsIm9wdGlvbiIsImVhY2giLCJkYXRhIiwiY2FsbCIsIm9sZCIsImFsZXJ0IiwiQ29uc3RydWN0b3IiLCJub0NvbmZsaWN0IiwiQnV0dG9uIiwiZWxlbWVudCIsIm9wdGlvbnMiLCIkZWxlbWVudCIsImV4dGVuZCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzZXRTdGF0ZSIsInN0YXRlIiwiZCIsInZhbCIsInJlc2V0VGV4dCIsInByb3h5IiwiYWRkQ2xhc3MiLCJwcm9wIiwicmVtb3ZlQXR0ciIsInRvZ2dsZSIsImNoYW5nZWQiLCIkaW5wdXQiLCJmaW5kIiwidG9nZ2xlQ2xhc3MiLCJidXR0b24iLCIkYnRuIiwiZmlyc3QiLCJ0ZXN0IiwidHlwZSIsIkNhcm91c2VsIiwiJGluZGljYXRvcnMiLCJwYXVzZWQiLCJzbGlkaW5nIiwiaW50ZXJ2YWwiLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwicGF1c2UiLCJkb2N1bWVudEVsZW1lbnQiLCJjeWNsZSIsIndyYXAiLCJ0YWdOYW1lIiwid2hpY2giLCJwcmV2IiwibmV4dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImdldEl0ZW1JbmRleCIsIml0ZW0iLCJwYXJlbnQiLCJjaGlsZHJlbiIsImluZGV4IiwiZ2V0SXRlbUZvckRpcmVjdGlvbiIsImRpcmVjdGlvbiIsImFjdGl2ZSIsImFjdGl2ZUluZGV4Iiwid2lsbFdyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsImVxIiwidG8iLCJwb3MiLCJ0aGF0Iiwic2xpZGUiLCIkbmV4dCIsImlzQ3ljbGluZyIsInJlbGF0ZWRUYXJnZXQiLCJzbGlkZUV2ZW50IiwiJG5leHRJbmRpY2F0b3IiLCJzbGlkRXZlbnQiLCJvZmZzZXRXaWR0aCIsImpvaW4iLCJhY3Rpb24iLCJjYXJvdXNlbCIsImNsaWNrSGFuZGxlciIsImhyZWYiLCIkdGFyZ2V0Iiwic2xpZGVJbmRleCIsIndpbmRvdyIsIiRjYXJvdXNlbCIsIkNvbGxhcHNlIiwiJHRyaWdnZXIiLCJpZCIsInRyYW5zaXRpb25pbmciLCJnZXRQYXJlbnQiLCJhZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJkaW1lbnNpb24iLCJoYXNXaWR0aCIsInNob3ciLCJhY3RpdmVzRGF0YSIsImFjdGl2ZXMiLCJzdGFydEV2ZW50IiwiY29tcGxldGUiLCJzY3JvbGxTaXplIiwiY2FtZWxDYXNlIiwiaGlkZSIsIm9mZnNldEhlaWdodCIsImkiLCJnZXRUYXJnZXRGcm9tVHJpZ2dlciIsImlzT3BlbiIsImNvbGxhcHNlIiwiYmFja2Ryb3AiLCJEcm9wZG93biIsImNsZWFyTWVudXMiLCJjb250YWlucyIsImlzQWN0aXZlIiwiaW5zZXJ0QWZ0ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkZXNjIiwiZHJvcGRvd24iLCJNb2RhbCIsIiRib2R5IiwiYm9keSIsIiRkaWFsb2ciLCIkYmFja2Ryb3AiLCJpc1Nob3duIiwib3JpZ2luYWxCb2R5UGFkIiwic2Nyb2xsYmFyV2lkdGgiLCJpZ25vcmVCYWNrZHJvcENsaWNrIiwicmVtb3RlIiwibG9hZCIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJfcmVsYXRlZFRhcmdldCIsImNoZWNrU2Nyb2xsYmFyIiwic2V0U2Nyb2xsYmFyIiwiZXNjYXBlIiwicmVzaXplIiwiYXBwZW5kVG8iLCJzY3JvbGxUb3AiLCJhZGp1c3REaWFsb2ciLCJlbmZvcmNlRm9jdXMiLCJvZmYiLCJoaWRlTW9kYWwiLCJoYXMiLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsImFuaW1hdGUiLCJkb0FuaW1hdGUiLCJjdXJyZW50VGFyZ2V0IiwiZm9jdXMiLCJjYWxsYmFja1JlbW92ZSIsIm1vZGFsSXNPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImNzcyIsInBhZGRpbmdMZWZ0IiwiYm9keUlzT3ZlcmZsb3dpbmciLCJwYWRkaW5nUmlnaHQiLCJmdWxsV2luZG93V2lkdGgiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnRFbGVtZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0IiwiTWF0aCIsImFicyIsImxlZnQiLCJjbGllbnRXaWR0aCIsIm1lYXN1cmVTY3JvbGxiYXIiLCJib2R5UGFkIiwicGFyc2VJbnQiLCJzY3JvbGxEaXYiLCJjbGFzc05hbWUiLCJhcHBlbmQiLCJyZW1vdmVDaGlsZCIsIm1vZGFsIiwic2hvd0V2ZW50IiwiVG9vbHRpcCIsImVuYWJsZWQiLCJ0aW1lb3V0IiwiaG92ZXJTdGF0ZSIsImluU3RhdGUiLCJpbml0IiwiYW5pbWF0aW9uIiwicGxhY2VtZW50IiwidGVtcGxhdGUiLCJ0aXRsZSIsImRlbGF5IiwiaHRtbCIsImNvbnRhaW5lciIsInZpZXdwb3J0IiwicGFkZGluZyIsImdldE9wdGlvbnMiLCIkdmlld3BvcnQiLCJpc0Z1bmN0aW9uIiwiY2xpY2siLCJob3ZlciIsImNvbnN0cnVjdG9yIiwidHJpZ2dlcnMiLCJldmVudEluIiwiZXZlbnRPdXQiLCJlbnRlciIsImxlYXZlIiwiX29wdGlvbnMiLCJmaXhUaXRsZSIsImdldERlZmF1bHRzIiwiZ2V0RGVsZWdhdGVPcHRpb25zIiwiZGVmYXVsdHMiLCJrZXkiLCJ2YWx1ZSIsIm9iaiIsInNlbGYiLCJ0aXAiLCJjbGVhclRpbWVvdXQiLCJpc0luU3RhdGVUcnVlIiwiaGFzQ29udGVudCIsImluRG9tIiwib3duZXJEb2N1bWVudCIsIiR0aXAiLCJ0aXBJZCIsImdldFVJRCIsInNldENvbnRlbnQiLCJhdXRvVG9rZW4iLCJhdXRvUGxhY2UiLCJ0b3AiLCJkaXNwbGF5IiwiZ2V0UG9zaXRpb24iLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsIm9yZ1BsYWNlbWVudCIsInZpZXdwb3J0RGltIiwiYm90dG9tIiwid2lkdGgiLCJjYWxjdWxhdGVkT2Zmc2V0IiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwicHJldkhvdmVyU3RhdGUiLCJvZmZzZXQiLCJoZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwiaXNOYU4iLCJzZXRPZmZzZXQiLCJ1c2luZyIsInByb3BzIiwicm91bmQiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJpc1ZlcnRpY2FsIiwiYXJyb3dEZWx0YSIsImFycm93T2Zmc2V0UG9zaXRpb24iLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiJGUiLCJpc0JvZHkiLCJlbFJlY3QiLCJpc1N2ZyIsIlNWR0VsZW1lbnQiLCJlbE9mZnNldCIsInNjcm9sbCIsIm91dGVyRGltcyIsInZpZXdwb3J0UGFkZGluZyIsInZpZXdwb3J0RGltZW5zaW9ucyIsInRvcEVkZ2VPZmZzZXQiLCJib3R0b21FZGdlT2Zmc2V0IiwibGVmdEVkZ2VPZmZzZXQiLCJyaWdodEVkZ2VPZmZzZXQiLCJvIiwicHJlZml4IiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCIkYXJyb3ciLCJlbmFibGUiLCJkaXNhYmxlIiwidG9nZ2xlRW5hYmxlZCIsImRlc3Ryb3kiLCJyZW1vdmVEYXRhIiwidG9vbHRpcCIsIlBvcG92ZXIiLCJjb250ZW50IiwiZ2V0Q29udGVudCIsInBvcG92ZXIiLCJTY3JvbGxTcHkiLCIkc2Nyb2xsRWxlbWVudCIsIm9mZnNldHMiLCJ0YXJnZXRzIiwiYWN0aXZlVGFyZ2V0IiwicHJvY2VzcyIsInJlZnJlc2giLCJnZXRTY3JvbGxIZWlnaHQiLCJtYXgiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiaXNXaW5kb3ciLCJtYXAiLCIkaHJlZiIsInNvcnQiLCJhIiwiYiIsInB1c2giLCJtYXhTY3JvbGwiLCJhY3RpdmF0ZSIsImNsZWFyIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsInNjcm9sbHNweSIsIiRzcHkiLCJUYWIiLCIkdWwiLCIkcHJldmlvdXMiLCJoaWRlRXZlbnQiLCJ0YWIiLCJBZmZpeCIsImNoZWNrUG9zaXRpb24iLCJjaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCIsImFmZml4ZWQiLCJ1bnBpbiIsInBpbm5lZE9mZnNldCIsIlJFU0VUIiwiZ2V0U3RhdGUiLCJvZmZzZXRUb3AiLCJvZmZzZXRCb3R0b20iLCJwb3NpdGlvbiIsInRhcmdldEhlaWdodCIsImluaXRpYWxpemluZyIsImNvbGxpZGVyVG9wIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRQaW5uZWRPZmZzZXQiLCJhZmZpeCIsImFmZml4VHlwZSIsImZsZXh5X2hlYWRlciIsInB1YiIsIiRoZWFkZXJfc3RhdGljIiwiJGhlYWRlcl9zdGlja3kiLCJ1cGRhdGVfaW50ZXJ2YWwiLCJ0b2xlcmFuY2UiLCJ1cHdhcmQiLCJkb3dud2FyZCIsIl9nZXRfb2Zmc2V0X2Zyb21fZWxlbWVudHNfYm90dG9tIiwiY2xhc3NlcyIsInBpbm5lZCIsInVucGlubmVkIiwid2FzX3Njcm9sbGVkIiwibGFzdF9kaXN0YW5jZV9mcm9tX3RvcCIsInJlZ2lzdGVyRXZlbnRIYW5kbGVycyIsInJlZ2lzdGVyQm9vdEV2ZW50SGFuZGxlcnMiLCJkb2N1bWVudF93YXNfc2Nyb2xsZWQiLCJlbGVtZW50X2hlaWdodCIsIm91dGVySGVpZ2h0IiwiZWxlbWVudF9vZmZzZXQiLCJjdXJyZW50X2Rpc3RhbmNlX2Zyb21fdG9wIiwiZmxleHlfbmF2aWdhdGlvbiIsImxheW91dF9jbGFzc2VzIiwidXBncmFkZSIsIiRuYXZpZ2F0aW9ucyIsIm5hdmlnYXRpb24iLCIkbmF2aWdhdGlvbiIsIiRtZWdhbWVudXMiLCJkcm9wZG93bl9tZWdhbWVudSIsIiRkcm9wZG93bl9tZWdhbWVudSIsImRyb3Bkb3duX2hhc19tZWdhbWVudSIsImlzX3VwZ3JhZGVkIiwibmF2aWdhdGlvbl9oYXNfbWVnYW1lbnUiLCIkbWVnYW1lbnUiLCJoYXNfb2JmdXNjYXRvciIsIm9iZnVzY2F0b3IiLCJiYWJlbEhlbHBlcnMiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwic2lkclN0YXR1cyIsIm1vdmluZyIsIm9wZW5lZCIsImhlbHBlciIsImlzVXJsIiwic3RyIiwicGF0dGVybiIsIlJlZ0V4cCIsImFkZFByZWZpeGVzIiwiYWRkUHJlZml4IiwiYXR0cmlidXRlIiwidG9SZXBsYWNlIiwidHJhbnNpdGlvbnMiLCJzdXBwb3J0ZWQiLCJwcm9wZXJ0eSIsInByZWZpeGVzIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsIiQkMiIsImJvZHlBbmltYXRpb25DbGFzcyIsIm9wZW5BY3Rpb24iLCJjbG9zZUFjdGlvbiIsInRyYW5zaXRpb25FbmRFdmVudCIsIk1lbnUiLCJvcGVuQ2xhc3MiLCJtZW51V2lkdGgiLCJvdXRlcldpZHRoIiwic3BlZWQiLCJzaWRlIiwiZGlzcGxhY2UiLCJ0aW1pbmciLCJtZXRob2QiLCJvbk9wZW5DYWxsYmFjayIsIm9uQ2xvc2VDYWxsYmFjayIsIm9uT3BlbkVuZENhbGxiYWNrIiwib25DbG9zZUVuZENhbGxiYWNrIiwiZ2V0QW5pbWF0aW9uIiwicHJlcGFyZUJvZHkiLCIkaHRtbCIsIm9wZW5Cb2R5IiwiYm9keUFuaW1hdGlvbiIsInF1ZXVlIiwib25DbG9zZUJvZHkiLCJyZXNldFN0eWxlcyIsInVuYmluZCIsImNsb3NlQm9keSIsIl90aGlzIiwibW92ZUJvZHkiLCJvbk9wZW5NZW51Iiwib3Blbk1lbnUiLCJfdGhpczIiLCIkaXRlbSIsIm1lbnVBbmltYXRpb24iLCJvbkNsb3NlTWVudSIsImNsb3NlTWVudSIsIl90aGlzMyIsIm1vdmVNZW51IiwibW92ZSIsIm9wZW4iLCJfdGhpczQiLCJhbHJlYWR5T3BlbmVkTWVudSIsIiQkMSIsImV4ZWN1dGUiLCJzaWRyIiwiZXJyb3IiLCJwdWJsaWNNZXRob2RzIiwibWV0aG9kTmFtZSIsIm1ldGhvZHMiLCJnZXRNZXRob2QiLCJBcnJheSIsInNsaWNlIiwiJCQzIiwiZmlsbENvbnRlbnQiLCIkc2lkZU1lbnUiLCJzZXR0aW5ncyIsInNvdXJjZSIsIm5ld0NvbnRlbnQiLCJnZXQiLCJodG1sQ29udGVudCIsInNlbGVjdG9ycyIsInJlbmFtaW5nIiwiJGh0bWxDb250ZW50IiwiZm5TaWRyIiwiYmluZCIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJvbk9wZW5FbmQiLCJvbkNsb3NlRW5kIiwiZmxhZyIsIkFqYXhNb25pdG9yIiwiQmFyIiwiRG9jdW1lbnRNb25pdG9yIiwiRWxlbWVudE1vbml0b3IiLCJFbGVtZW50VHJhY2tlciIsIkV2ZW50TGFnTW9uaXRvciIsIkV2ZW50ZWQiLCJFdmVudHMiLCJOb1RhcmdldEVycm9yIiwiUGFjZSIsIlJlcXVlc3RJbnRlcmNlcHQiLCJTT1VSQ0VfS0VZUyIsIlNjYWxlciIsIlNvY2tldFJlcXVlc3RUcmFja2VyIiwiWEhSUmVxdWVzdFRyYWNrZXIiLCJhdmdBbXBsaXR1ZGUiLCJiYXIiLCJjYW5jZWxBbmltYXRpb24iLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImRlZmF1bHRPcHRpb25zIiwiZXh0ZW5kTmF0aXZlIiwiZ2V0RnJvbURPTSIsImdldEludGVyY2VwdCIsImhhbmRsZVB1c2hTdGF0ZSIsImlnbm9yZVN0YWNrIiwibm93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVzdWx0IiwicnVuQW5pbWF0aW9uIiwic2NhbGVycyIsInNob3VsZElnbm9yZVVSTCIsInNob3VsZFRyYWNrIiwic291cmNlcyIsInVuaVNjYWxlciIsIl9XZWJTb2NrZXQiLCJfWERvbWFpblJlcXVlc3QiLCJfWE1MSHR0cFJlcXVlc3QiLCJfaSIsIl9pbnRlcmNlcHQiLCJfbGVuIiwiX3B1c2hTdGF0ZSIsIl9yZWYiLCJfcmVmMSIsIl9yZXBsYWNlU3RhdGUiLCJfX3NsaWNlIiwiX19oYXNQcm9wIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4dGVuZHMiLCJjaGlsZCIsImN0b3IiLCJfX3N1cGVyX18iLCJfX2luZGV4T2YiLCJpbmRleE9mIiwibCIsImNhdGNodXBUaW1lIiwiaW5pdGlhbFJhdGUiLCJtaW5UaW1lIiwiZ2hvc3RUaW1lIiwibWF4UHJvZ3Jlc3NQZXJGcmFtZSIsImVhc2VGYWN0b3IiLCJzdGFydE9uUGFnZUxvYWQiLCJyZXN0YXJ0T25QdXNoU3RhdGUiLCJyZXN0YXJ0T25SZXF1ZXN0QWZ0ZXIiLCJlbGVtZW50cyIsImNoZWNrSW50ZXJ2YWwiLCJldmVudExhZyIsIm1pblNhbXBsZXMiLCJzYW1wbGVDb3VudCIsImxhZ1RocmVzaG9sZCIsImFqYXgiLCJ0cmFja01ldGhvZHMiLCJ0cmFja1dlYlNvY2tldHMiLCJpZ25vcmVVUkxzIiwicGVyZm9ybWFuY2UiLCJEYXRlIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsImxhc3QiLCJ0aWNrIiwiZGlmZiIsImFyZ3MiLCJvdXQiLCJhcnIiLCJjb3VudCIsInN1bSIsInYiLCJqc29uIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsIkpTT04iLCJwYXJzZSIsIl9lcnJvciIsImNvbnNvbGUiLCJjdHgiLCJvbmNlIiwiX2Jhc2UiLCJiaW5kaW5ncyIsIl9yZXN1bHRzIiwic3BsaWNlIiwicGFjZU9wdGlvbnMiLCJfc3VwZXIiLCJwcm9ncmVzcyIsImdldEVsZW1lbnQiLCJ0YXJnZXRFbGVtZW50IiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmluaXNoIiwidXBkYXRlIiwicHJvZyIsInJlbmRlciIsInBhcmVudE5vZGUiLCJwcm9ncmVzc1N0ciIsInRyYW5zZm9ybSIsIl9qIiwiX2xlbjEiLCJfcmVmMiIsImxhc3RSZW5kZXJlZFByb2dyZXNzIiwic2V0QXR0cmlidXRlIiwiZG9uZSIsImJpbmRpbmciLCJYTUxIdHRwUmVxdWVzdCIsIlhEb21haW5SZXF1ZXN0IiwiV2ViU29ja2V0IiwiZnJvbSIsImlnbm9yZSIsInJldCIsInVuc2hpZnQiLCJzaGlmdCIsInRyYWNrIiwibW9uaXRvclhIUiIsInJlcSIsIl9vcGVuIiwidXJsIiwiYXN5bmMiLCJyZXF1ZXN0IiwiZmxhZ3MiLCJwcm90b2NvbHMiLCJfYXJnIiwiYWZ0ZXIiLCJydW5uaW5nIiwic3RpbGxBY3RpdmUiLCJfcmVmMyIsInJlYWR5U3RhdGUiLCJyZXN0YXJ0Iiwid2F0Y2giLCJ0cmFja2VyIiwic2l6ZSIsIl9vbnJlYWR5c3RhdGVjaGFuZ2UiLCJQcm9ncmVzc0V2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsImxlbmd0aENvbXB1dGFibGUiLCJsb2FkZWQiLCJ0b3RhbCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImNoZWNrIiwic3RhdGVzIiwibG9hZGluZyIsImludGVyYWN0aXZlIiwiYXZnIiwicG9pbnRzIiwic2FtcGxlcyIsInNpbmNlTGFzdFVwZGF0ZSIsInJhdGUiLCJjYXRjaHVwIiwibGFzdFByb2dyZXNzIiwiZnJhbWVUaW1lIiwic2NhbGluZyIsInBvdyIsIm1pbiIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJfayIsIl9sZW4yIiwiX3JlZjQiLCJleHRyYVNvdXJjZXMiLCJzdG9wIiwic3RhcnQiLCJnbyIsImVucXVldWVOZXh0RnJhbWUiLCJqIiwicmVtYWluaW5nIiwic2NhbGVyIiwic2NhbGVyTGlzdCIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJoIiwidGFibGVzb3J0ZXIiLCJmIiwibG9nIiwidSIsImdldFRpbWUiLCJtIiwidCIsImMiLCJjb25maWciLCJ0ZXh0RXh0cmFjdGlvbiIsInRleHRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsInRleHQiLCJnIiwiZ2V0Q29sdW1uRGF0YSIsInRyaW0iLCJxIiwiJHRib2RpZXMiLCIkdGFibGUiLCJjc3NJbmZvQmxvY2siLCJrIiwibiIsInAiLCJ3IiwiciIsInMiLCJEIiwieSIsInoiLCJkZWJ1ZyIsInJvd3MiLCJjb2x1bW5zIiwiJGhlYWRlcnMiLCJmaWx0ZXIiLCJoZWFkZXJzIiwiZ2V0UGFyc2VyQnlJZCIsImdldERhdGEiLCJlbXB0aWVzIiwiZW1wdHlUbyIsImVtcHR5VG9Cb3R0b20iLCJzdHJpbmdzIiwic3RyaW5nVG8iLCJDIiwiTCIsIk0iLCJwYXJzZXJzIiwieCIsIkEiLCJjZWxscyIsImV4dHJhY3RvcnMiLCJCIiwiY2FjaGUiLCJ0b3RhbFJvd3MiLCJzaG93UHJvY2Vzc2luZyIsImlzUHJvY2Vzc2luZyIsIm5vcm1hbGl6ZWQiLCJjc3NDaGlsZFJvdyIsIiRyb3ciLCJhZGQiLCJjc3NIYXNDaGlsZCIsIm9yZGVyIiwiZm9ybWF0IiwiaWdub3JlQ2FzZSIsImNvbE1heCIsIndpZGdldE9wdGlvbnMiLCJ0Qm9kaWVzIiwiYXBwZW5kZXIiLCJpc1VwZGF0aW5nIiwicHJvY2Vzc1Rib2R5IiwicGFnZXIiLCJyZW1vdmVSb3dzIiwicGFnZXJfcmVtb3ZlUm93cyIsImFwcGx5V2lkZ2V0IiwiRiIsIkUiLCJoZWFkZXJMaXN0IiwiaGVhZGVyQ29udGVudCIsImNvbXB1dGVDb2x1bW5JbmRleCIsImNzc0ljb24iLCJpY29uIiwic2VsZWN0b3JIZWFkZXJzIiwiaGVhZGVyVGVtcGxhdGUiLCJvblJlbmRlclRlbXBsYXRlIiwiaGVhZGVySW4iLCJvblJlbmRlckhlYWRlciIsImNvbHVtbiIsInNvcnRJbml0aWFsT3JkZXIiLCJsb2NrZWRPcmRlciIsImhlYWRlciIsImNzc0hlYWRlciIsImhlYWRlclJvdyIsImNzc0hlYWRlclJvdyIsInRhYkluZGV4Iiwic2NvcGUiLCJyb2xlIiwiSCIsIkkiLCJzZWxlY3RvclJlbW92ZSIsIkoiLCJzb3J0RGlzYWJsZWQiLCJHIiwic29ydExpc3QiLCJzb3J0Tm9uZSIsImNzc05vbmUiLCJzb3J0QXNjIiwiY3NzQXNjIiwic29ydERlc2MiLCJjc3NEZXNjIiwiY3NzSWNvbkFzYyIsImNzc0ljb25EZXNjIiwiY3NzSWNvbk5vbmUiLCIkZXh0cmFIZWFkZXJzIiwibm90Iiwic29ydFJlc2V0IiwibGFuZ3VhZ2UiLCJRIiwid2lkdGhGaXhlZCIsInByZXBlbmQiLCJSIiwibWF0Y2giLCJpbkFycmF5IiwiUyIsIk4iLCJzb3J0TXVsdGlTb3J0S2V5Iiwic29ydFJlc2V0S2V5Iiwic29ydFJlc3RhcnQiLCJzb3J0Rm9yY2UiLCJjb2xTcGFuIiwic29ydEFwcGVuZCIsImlzVmFsdWVJbkFycmF5IiwiSyIsInRleHRTb3J0ZXIiLCJzZXJ2ZXJTaWRlU29ydGluZyIsInNvcnRTdGFibGUiLCJzdHJpbmciLCJudW1iZXJTb3J0ZXIiLCJ0b1N0cmluZyIsIk8iLCJQIiwibmFtZXNwYWNlIiwicmVmcmVzaFdpZGdldHMiLCJyZXN0b3JlSGVhZGVycyIsImJpbmRFdmVudHMiLCJkZWxheUluaXQiLCJnZXRXaWRnZXRCeUlkIiwib3JpZ2luYWxTZXR0aW5ncyIsImhhc0luaXRpYWxpemVkIiwic2V0dXAiLCJ3aWRnZXRzIiwidGhlbWUiLCJjYW5jZWxTZWxlY3Rpb24iLCJkYXRlRm9ybWF0IiwidXNOdW1iZXJGb3JtYXQiLCJzb3J0TG9jYWxlQ29tcGFyZSIsInplYnJhIiwiaW5pdFdpZGdldHMiLCJ3aWRnZXRDbGFzcyIsImluaXRpYWxpemVkIiwidGFibGVDbGFzcyIsImNzc1Byb2Nlc3NpbmciLCJjc3NBbGxvd0NsaWNrcyIsInNlbGVjdG9yU29ydCIsInRhYmxlIiwiY2hpbGRSb3ciLCJpbmZvIiwicHJvY2Vzc2luZyIsIm5leHRBc2MiLCJuZXh0RGVzYyIsIm5leHROb25lIiwiYmVuY2htYXJrIiwiY29uc3RydWN0IiwiYnVpbGRUYWJsZSIsInRIZWFkIiwibWV0YWRhdGEiLCJzdXBwb3J0c0RhdGFPYmplY3QiLCJlbXB0eW1pbiIsImVtcHR5bWF4IiwiemVybyIsIm5vbmUiLCJ3aWRnZXRJbml0Iiwic29ydGxpc3QiLCJwcm9jZXNzVGltZXIiLCJyb3dJbmRleCIsInJvd1NwYW4iLCJwYXJzZUZsb2F0IiwiYmVmb3JlIiwiY2xlYXJUYWJsZUJvZHkiLCJNb3pVc2VyU2VsZWN0IiwicmVnZXgiLCJjaHVuayIsImNodW5rcyIsImhleCIsInNvcnROYXR1cmFsIiwic29ydE5hdHVyYWxBc2MiLCJzb3J0TmF0dXJhbERlc2MiLCJzb3J0VGV4dCIsImdldFRleHRWYWx1ZSIsImNoYXJDb2RlQXQiLCJzb3J0TnVtZXJpY0FzYyIsInNvcnROdW1lcmljRGVzYyIsInNvcnROdW1lcmljIiwiY2hhcmFjdGVyRXF1aXZhbGVudHMiLCJzcyIsIlNTIiwiVSIsInJlcGxhY2VBY2NlbnRzIiwiY2hhcmFjdGVyUmVnZXgiLCJjaGFyYWN0ZXJSZWdleEFycmF5IiwiYWRkUGFyc2VyIiwiYWRkV2lkZ2V0IiwiaGFzV2lkZ2V0IiwiaXNBcHBseWluZ1dpZGdldHMiLCJncmVwIiwicHJpb3JpdHkiLCJmb3JtYXRGbG9hdCIsImlzRGlnaXQiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInBhcnNlZCIsImlzRmluaXRlIiwiaW1nQXR0ciIsInBhcnNlck1ldGFkYXRhTmFtZSIsInRzIiwidGhlbWVzIiwiY2FwdGlvbiIsImZvb3RlclJvdyIsImZvb3RlckNlbGxzIiwiaWNvbnMiLCJmaWx0ZXJSb3ciLCJldmVuIiwib2RkIiwid3JhcHBlciIsInJlc2l6ZXIiLCJzdGlja3kiLCJzdGlja3lWaXMiLCJzdGlja3lXcmFwIiwic3RvcmFnZSIsImNvb2tpZUluZGV4IiwiY29va2llcyIsImRhdGUiLCJoYXNMb2NhbFN0b3JhZ2UiLCJ2YWx1ZXMiLCJncm91cCIsInBhZ2UiLCJmaXhlZFVybCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInBhcnNlSlNPTiIsImNvb2tpZSIsInN0cmluZ2lmeSIsInNldFRpbWUiLCJ0b0dNVFN0cmluZyIsImFkZEhlYWRlclJlc2l6ZUV2ZW50IiwidGltZXIiLCJ3byIsImNoZWNrU2l6ZXMiLCJ0cmlnZ2VyRXZlbnQiLCJyZXNpemVfZmxhZyIsIiRoZWFkZXIiLCJzaXplcyIsInJlc2l6ZV90aW1lciIsInRpbWUiLCIkaWNvbiIsIiR0Zm9vdCIsIiRoIiwib2xkdGhlbWUiLCJvbGRyZW1vdmUiLCJ0aGVtZXNBbGwiLCJqdWkiLCJhcHBsaWVkVGhlbWUiLCJ3cmFwSW5uZXIiLCIkdGJvZHkiLCJ0Ym9keUluZGV4IiwiJHJvd3MiLCIkY2VsbHMiLCJpbmR4IiwibGVuIiwiY29sdW1uc190aGVhZCIsImNvbHVtbnNfdGZvb3QiLCJmaWx0ZXJfY2hpbGRSb3dzIiwiZmlsdGVyX2NvbHVtbkZpbHRlcnMiLCJmaWx0ZXJfY2VsbEZpbHRlciIsImZpbHRlcl9jc3NGaWx0ZXIiLCJmaWx0ZXJfZGVmYXVsdEZpbHRlciIsImZpbHRlcl9leGNsdWRlRmlsdGVyIiwiZmlsdGVyX2V4dGVybmFsIiwiZmlsdGVyX2ZpbHRlcmVkUm93IiwiZmlsdGVyX2Zvcm1hdHRlciIsImZpbHRlcl9mdW5jdGlvbnMiLCJmaWx0ZXJfaGlkZUVtcHR5IiwiZmlsdGVyX2hpZGVGaWx0ZXJzIiwiZmlsdGVyX2lnbm9yZUNhc2UiLCJmaWx0ZXJfbGl2ZVNlYXJjaCIsImZpbHRlcl9vbmx5QXZhaWwiLCJmaWx0ZXJfcGxhY2Vob2xkZXIiLCJzZWFyY2giLCJzZWxlY3QiLCJmaWx0ZXJfcmVzZXQiLCJmaWx0ZXJfc2F2ZUZpbHRlcnMiLCJmaWx0ZXJfc2VhcmNoRGVsYXkiLCJmaWx0ZXJfc2VhcmNoRmlsdGVyZWQiLCJmaWx0ZXJfc2VsZWN0U291cmNlIiwiZmlsdGVyX3N0YXJ0c1dpdGgiLCJmaWx0ZXJfdXNlUGFyc2VkRGF0YSIsImZpbHRlcl9zZXJ2ZXJzaWRlRmlsdGVyaW5nIiwiZmlsdGVyX2RlZmF1bHRBdHRyaWIiLCJmaWx0ZXJfc2VsZWN0U291cmNlU2VwYXJhdG9yIiwidW5kZWxlZ2F0ZSIsImZpbHRlcmVkIiwiZXhhY3QiLCJub25kaWdpdCIsIm9wZXJhdG9ycyIsInF1ZXJ5IiwidHlwZXMiLCJpRmlsdGVyIiwibWF0Y2hlcyIsImV4ZWMiLCJpRXhhY3QiLCJjYWNoZWRWYWx1ZSIsInBhcnNlciIsInNhdmVkU2VhcmNoIiwicGFyc2VGaWx0ZXIiLCJub3RNYXRjaCIsImFueU1hdGNoIiwicm93QXJyYXkiLCJhbmQiLCJhbmRUZXN0IiwiYW5kU3BsaXQiLCJyYW5nZSIsInRvVGVzdCIsInRtcCIsInRvU3BsaXQiLCJyYW5nZTEiLCJyYW5nZTIiLCJ3aWxkIiwib3JSZXBsYWNlIiwiaXNBcnJheSIsImZ1enp5IiwicGF0dGVybkluZHgiLCJvciIsInR4dCIsImZpbHRlcnMiLCJmeG4iLCJub1NlbGVjdCIsInNlYXJjaFRpbWVyIiwiZmlsdGVyX2luaXRUaW1lciIsImZpbHRlcl9mb3JtYXR0ZXJDb3VudCIsImZpbHRlcl9mb3JtYXR0ZXJJbml0IiwiZmlsdGVyX2FueUNvbHVtblNlbGVjdG9yIiwiZmlsdGVyX211bHRpcGxlQ29sdW1uU2VsZWN0b3IiLCJhbHJlYWR5RmlsdGVyZWQiLCJpUXVlcnkiLCJpZ1F1ZXJ5IiwiYnVpbGRSb3ciLCJpc0VtcHR5T2JqZWN0IiwiYnVpbGREZWZhdWx0IiwiZmlsdGVyXyRleHRlcm5hbEZpbHRlcnMiLCJzZWFyY2hpbmciLCJsYXN0Q29tYmluZWRGaWx0ZXIiLCJsYXN0U2VhcmNoIiwiZGVsZWdhdGUiLCJidWlsZFNlbGVjdCIsImJpbmRTZWFyY2giLCJoaWRlRmlsdGVycyIsImZpbHRlcmVkUm93cyIsInNldERlZmF1bHRzIiwic2V0RmlsdGVycyIsImZpbHRlcl9pbml0aWFsaXplZCIsImZpbHRlckluaXRDb21wbGV0ZSIsImZvcm1hdHRlclVwZGF0ZWQiLCIkY2VsbCIsImNvbXBsZXRlZCIsImZpbmRSb3dzIiwic2F2ZWQiLCJnZXRGaWx0ZXJzIiwiZm9yY2VQYXJzZSIsImNvbCIsImRpc2FibGVkIiwiZmZ4biIsImFycnkiLCJidWlsZEZpbHRlciIsIiRmaWx0ZXJzIiwiaW50ZXJuYWwiLCIkZXh0IiwiZmlsdGVyXyRhbnlNYXRjaCIsInNraXBGaXJzdCIsImNoZWNrRmlsdGVycyIsImZpbHRlckFycmF5IiwiY29tYmluZWRGaWx0ZXJzIiwiJGZpbHRlclJvdyIsIiRmaWx0ZXJSb3cyIiwiYWN0aXZlRWxlbWVudCIsImRlZmF1bHRGaWx0ZXIiLCJtYXNrIiwibWFza0xlbiIsImdldExhdGVzdFNlYXJjaCIsIm11bHRpcGxlQ29sdW1ucyIsInJhbmdlcyIsInNpbmdsZXMiLCJjb2x1bW5JbmRleCIsImhhc1NlbGVjdCIsInNob3dSb3ciLCJub3RGaWx0ZXJlZCIsInNlYXJjaEZpbHRlcmVkIiwiZmlsdGVyTWF0Y2hlZCIsImV4Y2x1ZGVNYXRjaCIsIm5vQW55TWF0Y2giLCJhbnlNYXRjaEZsYWciLCJhbnlNYXRjaEZpbHRlciIsImlBbnlNYXRjaEZpbHRlciIsImNhY2hlQXJyYXkiLCJuZXh0VW50aWwiLCJjaGlsZFJvd1RleHQiLCJ0eXBlRnVuY3Rpb24iLCIkZXh0ZXJuYWxGaWx0ZXJzIiwiZ2V0T3B0aW9uU291cmNlIiwib25seUF2YWlsIiwiY3RzIiwicm93IiwiY2VsbCIsInVwZGF0aW5nIiwiJGZpbHRlciIsIm5vZGUiLCJjdXJyZW50VmFsdWUiLCJnZXRSYXciLCIkY29sdW1uIiwiY29scyIsInZhbGlkIiwic3RpY2t5SGVhZGVycyIsInN0aWNreUhlYWRlcnNfYXR0YWNoVG8iLCJzdGlja3lIZWFkZXJzX3hTY3JvbGwiLCJzdGlja3lIZWFkZXJzX3lTY3JvbGwiLCJzdGlja3lIZWFkZXJzX29mZnNldCIsInN0aWNreUhlYWRlcnNfZmlsdGVyZWRUb1RvcCIsInN0aWNreUhlYWRlcnNfY2xvbmVJZCIsInN0aWNreUhlYWRlcnNfYWRkUmVzaXplRXZlbnQiLCJzdGlja3lIZWFkZXJzX2luY2x1ZGVDYXB0aW9uIiwic3RpY2t5SGVhZGVyc196SW5kZXgiLCIkYXR0YWNoIiwiJHlTY3JvbGwiLCIkeFNjcm9sbCIsIiR0aGVhZCIsIiRzdGlja3lPZmZzZXQiLCJzdGlja3lPZmZzZXQiLCIkbmVzdGVkU3RpY2t5IiwiJHN0aWNreSIsIm5lc3RlZFN0aWNreVRvcCIsIiRzdGlja3lUYWJsZSIsImNsb25lIiwiJHN0aWNreVdyYXAiLCJtYXJnaW4iLCJ2aXNpYmlsaXR5IiwiekluZGV4IiwiJHN0aWNreVRoZWFkIiwiJHN0aWNreUNlbGxzIiwibGFzdHN0YXRlIiwic3BhY2luZyIsInNldFdpZHRoIiwiJG9yaWciLCIkY2xvbmUiLCJib3JkZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwicmVzaXplSGVhZGVyIiwic2Nyb2xsTGVmdCIsInlXaW5kb3ciLCJ4V2luZG93IiwidGFibGVIZWlnaHQiLCJpc1Zpc2libGUiLCJjc3NTZXR0aW5ncyIsIiR0ZCIsInNjcm9sbFRvIiwicmVzaXphYmxlIiwicmVzaXphYmxlX2FkZExhc3RDb2x1bW4iLCJyZXNpemFibGVfd2lkdGhzIiwicmVzaXphYmxlX3Rocm90dGxlIiwicmVzaXphYmxlUmVzZXQiLCIkY29sdW1ucyIsInN0b3JlZFNpemVzIiwiJHdyYXAiLCJvdmVyZmxvdyIsIm1vdXNlWFBvc2l0aW9uIiwiZnVsbFdpZHRoIiwibW91c2VNb3ZlIiwibGVmdEVkZ2UiLCJwYWdlWCIsInRhcmdldFdpZHRoIiwic3RvcFJlc2l6ZSIsImNhblJlc2l6ZSIsInNoaWZ0S2V5IiwibmV4dEFsbCIsImFsbG93Q2xpY2siLCJub3NhdmUiLCIkdCIsInNhdmVTb3J0IiwidGhpc1dpZGdldCIsInN0b3JlZCIsImlucHV0IiwiZmlsZXN0eWxlIiwiYnV0dG9uVGV4dCIsInBsYWNlaG9sZGVyIiwiRHJ1cGFsIiwiYmVoYXZpb3JzIiwiaW5zZXJ0QnV0dG9uIiwiYXR0YWNoIiwiY29udGV4dCIsImVuZHBvaW50IiwiJHdyYXBwZXIiLCIkYnJlYWRjcnVtYiIsIiRidXR0b24iLCJuZXh0SWQiLCJGaWxlc3R5bGUiLCIkZWxlbWVudEZpbGVzdHlsZSIsImJ1dHRvbkJlZm9yZSIsInB1c2hOYW1lRmlsZXMiLCJodG1sSWNvbiIsImh0bWxJbnB1dCIsImZpbGVzIiwiYmFkZ2UiLCJidG4iLCJidXR0b25OYW1lIiwiaWNvbk5hbWUiLCJwb3AiLCJfc2VsZiIsIiRsYWJlbCIsImtleXByZXNzIiwia2V5Q29kZSIsImNoYXJDb2RlIiwiY2hhbmdlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibGFzdENsaWNrIiwic2xpbmt5IiwibGFiZWwiLCJhY3RpdmVDbGFzcyIsImhlYWRlckNsYXNzIiwiaGVhZGluZ1RhZyIsImJhY2tGaXJzdCIsIm1lbnUiLCJyb290IiwiZGVwdGgiLCIkbGluayIsImJhY2tMaW5rIiwianVtcCIsIm1lbnVzIiwiaG9tZSIsIk1vZGVybml6ciIsInRvdWNoZXZlbnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztBQU1BLElBQUksT0FBT0EsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxRQUFNLElBQUlDLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsQ0FBQyxVQUFVQyxDQUFWLEVBQWE7QUFDWjs7QUFDQSxNQUFJQyxVQUFVRCxFQUFFRSxFQUFGLENBQUtDLE1BQUwsQ0FBWUMsS0FBWixDQUFrQixHQUFsQixFQUF1QixDQUF2QixFQUEwQkEsS0FBMUIsQ0FBZ0MsR0FBaEMsQ0FBZDtBQUNBLE1BQUtILFFBQVEsQ0FBUixJQUFhLENBQWIsSUFBa0JBLFFBQVEsQ0FBUixJQUFhLENBQWhDLElBQXVDQSxRQUFRLENBQVIsS0FBYyxDQUFkLElBQW1CQSxRQUFRLENBQVIsS0FBYyxDQUFqQyxJQUFzQ0EsUUFBUSxDQUFSLElBQWEsQ0FBMUYsSUFBaUdBLFFBQVEsQ0FBUixJQUFhLENBQWxILEVBQXNIO0FBQ3BILFVBQU0sSUFBSUYsS0FBSixDQUFVLDJGQUFWLENBQU47QUFDRDtBQUNGLENBTkEsQ0FNQ0QsTUFORCxDQUFEOztBQVFBOzs7Ozs7OztBQVNBLENBQUMsVUFBVUUsQ0FBVixFQUFhO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQSxXQUFTSyxhQUFULEdBQXlCO0FBQ3ZCLFFBQUlDLEtBQUtDLFNBQVNDLGFBQVQsQ0FBdUIsV0FBdkIsQ0FBVDs7QUFFQSxRQUFJQyxxQkFBcUI7QUFDdkJDLHdCQUFtQixxQkFESTtBQUV2QkMscUJB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UUFBSWxuQyxPQUFPdkUsTUFBUCxHQUFnQixDQUFwQixFQUNBO0FBQ0V1RSxhQUFPbkUsV0FBUCxDQUFtQjRjLFNBQVN5dUIsV0FBNUI7O0FBRUEsV0FBS1MsSUFBTCxDQUFVM25DLE1BQVYsRUFBa0IsS0FBbEI7QUFDRDs7QUFFRCxXQUFPLElBQVA7QUFDRCxHQWhPRDtBQWlPRCxDQXJPQyxFQXFPQTlILE1Bck9BLENBQUQ7OztBQ1BEQSxPQUFPLFVBQVNFLENBQVQsRUFBWTtBQUNmOztBQUVBOztBQUNBdVksaUJBQWFwSixJQUFiOztBQUVBO0FBQ0FuUCxNQUFFLGNBQUYsRUFDSzJGLElBREwsQ0FDVSxXQURWLEVBRUtsQyxXQUZMOztBQUlBekQsTUFBRSxxQkFBRixFQUF5QjBmLElBQXpCLENBQThCO0FBQzFCNWUsY0FBTSxXQURvQjtBQUUxQnljLGNBQU0sT0FGb0I7QUFHMUJvRCxrQkFBVSxLQUhnQjtBQUkxQnJWLGNBQU0sa0JBSm9CO0FBSzFCZ1YsZ0JBQVE7QUFMa0IsS0FBOUI7O0FBUUE7QUFDQXRnQixNQUFFLG9CQUFGLEVBQXdCNHVDLE1BQXhCLENBQStCO0FBQzNCci9CLGVBQU8sSUFEb0I7QUFFM0JzL0IsZUFBTztBQUZvQixLQUEvQjs7QUFLQTtBQUNBLFFBQUdhLFVBQVVDLFdBQWIsRUFBMEI7QUFDdEIzdkMsVUFBRSx5QkFBRixFQUE2QmtWLE9BQTdCLENBQXFDLE1BQXJDO0FBQ0gsS0FGRCxNQUdLO0FBQ0RsVixVQUFFLHlCQUFGLEVBQTZCa1YsT0FBN0I7QUFDSDtBQUNKLENBaENEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQm9vdHN0cmFwIHYzLjMuNyAoaHR0cDovL2dldGJvb3RzdHJhcC5jb20pXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG5cbmlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnknKVxufVxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxuICBpZiAoKHZlcnNpb25bMF0gPCAyICYmIHZlcnNpb25bMV0gPCA5KSB8fCAodmVyc2lvblswXSA9PSAxICYmIHZlcnNpb25bMV0gPT0gOSAmJiB2ZXJzaW9uWzJdIDwgMSkgfHwgKHZlcnNpb25bMF0gPiAzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeSB2ZXJzaW9uIDEuOS4xIG9yIGhpZ2hlciwgYnV0IGxvd2VyIHRoYW4gdmVyc2lvbiA0JylcbiAgfVxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RyYW5zaXRpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoU2hvdXRvdXQ6IGh0dHA6Ly93d3cubW9kZXJuaXpyLmNvbS8pXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJylcblxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgTW96VHJhbnNpdGlvbiAgICA6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgIE9UcmFuc2l0aW9uICAgICAgOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4geyBlbmQ6IHRyYW5zRW5kRXZlbnROYW1lc1tuYW1lXSB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlIC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKVxuICB9XG5cbiAgLy8gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcbiAgICB2YXIgJGVsID0gdGhpc1xuICAgICQodGhpcykub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWUgfSlcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVyblxuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2FsZXJ0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFMRVJUIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBkaXNtaXNzID0gJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKVxuICB9XG5cbiAgQWxlcnQuVkVSU0lPTiA9ICczLjMuNydcblxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IgPT09ICcjJyA/IFtdIDogc2VsZWN0b3IpXG5cbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAkcGFyZW50ID0gJHRoaXMuY2xvc2VzdCgnLmFsZXJ0JylcbiAgICB9XG5cbiAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2Nsb3NlLmJzLmFsZXJ0JykpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KCkge1xuICAgICAgLy8gZGV0YWNoIGZyb20gcGFyZW50LCBmaXJlIGV2ZW50IHRoZW4gY2xlYW4gdXAgZGF0YVxuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKVxuICAgIH1cblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkcGFyZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIHJlbW92ZUVsZW1lbnQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICByZW1vdmVFbGVtZW50KClcbiAgfVxuXG5cbiAgLy8gQUxFUlQgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWxlcnQnLCAoZGF0YSA9IG5ldyBBbGVydCh0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XG5cbiAgJC5mbi5hbGVydCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcblxuXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBTEVSVCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEJVVFRPTiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgQnV0dG9uLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcbiAgICBsb2FkaW5nVGV4dDogJ2xvYWRpbmcuLi4nXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGQgICAgPSAnZGlzYWJsZWQnXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIHZhbCAgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJ1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKVxuXG4gICAgc3RhdGUgKz0gJ1RleHQnXG5cbiAgICBpZiAoZGF0YS5yZXNldFRleHQgPT0gbnVsbCkgJGVsLmRhdGEoJ3Jlc2V0VGV4dCcsICRlbFt2YWxdKCkpXG5cbiAgICAvLyBwdXNoIHRvIGV2ZW50IGxvb3AgdG8gYWxsb3cgZm9ybXMgdG8gc3VibWl0XG4gICAgc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdID09IG51bGwgPyB0aGlzLm9wdGlvbnNbc3RhdGVdIDogZGF0YVtzdGF0ZV0pXG5cbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAkZWwuYWRkQ2xhc3MoZCkuYXR0cihkLCBkKS5wcm9wKGQsIHRydWUpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZCkucHJvcChkLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9LCB0aGlzKSwgMClcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZVxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcblxuICAgIGlmICgkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICRwYXJlbnQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgfSBlbHNlIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdjaGVja2JveCcpIHtcbiAgICAgICAgaWYgKCgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSAhPT0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgfVxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIGlmIChjaGFuZ2VkKSAkaW5wdXQudHJpZ2dlcignY2hhbmdlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpXG5cbiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmJ1dHRvblxuXG4gICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uXG5cblxuICAvLyBCVVRUT04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5idXR0b24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmJ1dHRvbiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEJVVFRPTiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpKSB7XG4gICAgICAgIC8vIFByZXZlbnQgZG91YmxlIGNsaWNrIG9uIHJhZGlvcywgYW5kIHRoZSBkb3VibGUgc2VsZWN0aW9ucyAoc28gY2FuY2VsbGF0aW9uKSBvbiBjaGVja2JveGVzXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNvbXBvbmVudCBzdGlsbCByZWNlaXZlIHRoZSBmb2N1c1xuICAgICAgICBpZiAoJGJ0bi5pcygnaW5wdXQsYnV0dG9uJykpICRidG4udHJpZ2dlcignZm9jdXMnKVxuICAgICAgICBlbHNlICRidG4uZmluZCgnaW5wdXQ6dmlzaWJsZSxidXR0b246dmlzaWJsZScpLmZpcnN0KCkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kaW5kaWNhdG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmNhcm91c2VsLWluZGljYXRvcnMnKVxuICAgIHRoaXMub3B0aW9ucyAgICAgPSBvcHRpb25zXG4gICAgdGhpcy5wYXVzZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnNsaWRpbmcgICAgID0gbnVsbFxuICAgIHRoaXMuaW50ZXJ2YWwgICAgPSBudWxsXG4gICAgdGhpcy4kYWN0aXZlICAgICA9IG51bGxcbiAgICB0aGlzLiRpdGVtcyAgICAgID0gbnVsbFxuXG4gICAgdGhpcy5vcHRpb25zLmtleWJvYXJkICYmIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcykpXG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiAhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgJiYgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdtb3VzZWVudGVyLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLnBhdXNlLCB0aGlzKSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5jeWNsZSwgdGhpcykpXG4gIH1cblxuICBDYXJvdXNlbC5WRVJTSU9OICA9ICczLjMuNydcblxuICBDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwXG5cbiAgQ2Fyb3VzZWwuREVGQVVMVFMgPSB7XG4gICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVha1xuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiByZXR1cm5cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jeWNsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSlcblxuICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXG4gICAgICAmJiAhdGhpcy5wYXVzZWRcbiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKVxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtRm9yRGlyZWN0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgYWN0aXZlKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoYWN0aXZlKVxuICAgIHZhciB3aWxsV3JhcCA9IChkaXJlY3Rpb24gPT0gJ3ByZXYnICYmIGFjdGl2ZUluZGV4ID09PSAwKVxuICAgICAgICAgICAgICAgIHx8IChkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSlcbiAgICBpZiAod2lsbFdyYXAgJiYgIXRoaXMub3B0aW9ucy53cmFwKSByZXR1cm4gYWN0aXZlXG4gICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09ICdwcmV2JyA/IC0xIDogMVxuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGhcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuZXEoaXRlbUluZGV4KVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciB0aGF0ICAgICAgICA9IHRoaXNcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKVxuXG4gICAgaWYgKHBvcyA+ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSB8fCBwb3MgPCAwKSByZXR1cm5cblxuICAgIGlmICh0aGlzLnNsaWRpbmcpICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uZSgnc2xpZC5icy5jYXJvdXNlbCcsIGZ1bmN0aW9uICgpIHsgdGhhdC50byhwb3MpIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoYWN0aXZlSW5kZXggPT0gcG9zKSByZXR1cm4gdGhpcy5wYXVzZSgpLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzLnNsaWRlKHBvcyA+IGFjdGl2ZUluZGV4ID8gJ25leHQnIDogJ3ByZXYnLCB0aGlzLiRpdGVtcy5lcShwb3MpKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IHRydWUpXG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5maW5kKCcubmV4dCwgLnByZXYnKS5sZW5ndGggJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgnbmV4dCcpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkge1xuICAgIHZhciAkYWN0aXZlICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpXG4gICAgdmFyICRuZXh0ICAgICA9IG5leHQgfHwgdGhpcy5nZXRJdGVtRm9yRGlyZWN0aW9uKHR5cGUsICRhY3RpdmUpXG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWxcbiAgICB2YXIgZGlyZWN0aW9uID0gdHlwZSA9PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnXG4gICAgdmFyIHRoYXQgICAgICA9IHRoaXNcblxuICAgIGlmICgkbmV4dC5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVybiAodGhpcy5zbGlkaW5nID0gZmFsc2UpXG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdXG4gICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KCdzbGlkZS5icy5jYXJvdXNlbCcsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRlRXZlbnQpXG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5zbGlkaW5nID0gdHJ1ZVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMucGF1c2UoKVxuXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRpbmRpY2F0b3JzLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgIHZhciAkbmV4dEluZGljYXRvciA9ICQodGhpcy4kaW5kaWNhdG9ycy5jaGlsZHJlbigpW3RoaXMuZ2V0SXRlbUluZGV4KCRuZXh0KV0pXG4gICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7XG4gICAgICAkbmV4dC5hZGRDbGFzcyh0eXBlKVxuICAgICAgJG5leHRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICAkYWN0aXZlLmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRuZXh0LmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRuZXh0LnJlbW92ZUNsYXNzKFt0eXBlLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKVxuICAgICAgICAgIHRoYXQuc2xpZGluZyA9IGZhbHNlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH0pXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICB9XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcbiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbnMuc2xpZGVcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdudW1iZXInKSBkYXRhLnRvKG9wdGlvbilcbiAgICAgIGVsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNhcm91c2VsXG5cbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcblxuXG4gIC8vIENBUk9VU0VMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY2Fyb3VzZWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBocmVmXG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdjYXJvdXNlbCcpKSByZXR1cm5cbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuICAgIHZhciBzbGlkZUluZGV4ID0gJHRoaXMuYXR0cignZGF0YS1zbGlkZS10bycpXG4gICAgaWYgKHNsaWRlSW5kZXgpIG9wdGlvbnMuaW50ZXJ2YWwgPSBmYWxzZVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9ucylcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAkdGFyZ2V0LmRhdGEoJ2JzLmNhcm91c2VsJykudG8oc2xpZGVJbmRleClcbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZV0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZS10b10nLCBjbGlja0hhbmRsZXIpXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjb2xsYXBzZS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2NvbGxhcHNlXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKiBqc2hpbnQgbGF0ZWRlZjogZmFsc2UgKi9cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDT0xMQVBTRSBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLiR0cmlnZ2VyICAgICAgPSAkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKVxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7XG4gICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcbiAgfVxuXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzNTBcblxuICBDb2xsYXBzZS5ERUZBVUxUUyA9IHtcbiAgICB0b2dnbGU6IHRydWVcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5kaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKVxuICAgIHJldHVybiBoYXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0J1xuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBhY3RpdmVzRGF0YVxuICAgIHZhciBhY3RpdmVzID0gdGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5jaGlsZHJlbignLnBhbmVsJykuY2hpbGRyZW4oJy5pbiwgLmNvbGxhcHNpbmcnKVxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGFjdGl2ZXNEYXRhID0gYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgUGx1Z2luLmNhbGwoYWN0aXZlcywgJ2hpZGUnKVxuICAgICAgYWN0aXZlc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScsIG51bGwpXG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylbZGltZW5zaW9uXSgwKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJylcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSAkLmNhbWVsQ2FzZShbJ3Njcm9sbCcsIGRpbWVuc2lvbl0uam9pbignLScpKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50WzBdW3Njcm9sbFNpemVdKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpXG5cbiAgICB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKCkpWzBdLm9mZnNldEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UgaW4nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMuJHRyaWdnZXJcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2VkJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgW2RpbWVuc2lvbl0oMClcbiAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkoY29tcGxldGUsIHRoaXMpKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSA/ICdoaWRlJyA6ICdzaG93J10oKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCh0aGlzLm9wdGlvbnMucGFyZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMub3B0aW9ucy5wYXJlbnQgKyAnXCJdJylcbiAgICAgIC5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KVxuICAgICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhnZXRUYXJnZXRGcm9tVHJpZ2dlcigkZWxlbWVudCksICRlbGVtZW50KVxuICAgICAgfSwgdGhpcykpXG4gICAgICAuZW5kKClcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICR0cmlnZ2VyKSB7XG4gICAgdmFyIGlzT3BlbiA9ICRlbGVtZW50Lmhhc0NsYXNzKCdpbicpXG5cbiAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICAgICR0cmlnZ2VyXG4gICAgICAudG9nZ2xlQ2xhc3MoJ2NvbGxhcHNlZCcsICFpc09wZW4pXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhcmdldEZyb21UcmlnZ2VyKCR0cmlnZ2VyKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgdGFyZ2V0ID0gJHRyaWdnZXIuYXR0cignZGF0YS10YXJnZXQnKVxuICAgICAgfHwgKGhyZWYgPSAkdHJpZ2dlci5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcblxuICAgIHJldHVybiAkKHRhcmdldClcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KG9wdGlvbikpIG9wdGlvbnMudG9nZ2xlID0gZmFsc2VcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2VcblxuICAkLmZuLmNvbGxhcHNlICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY29sbGFwc2UuQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcblxuICAgIGlmICghJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICB2YXIgJHRhcmdldCA9IGdldFRhcmdldEZyb21UcmlnZ2VyKCR0aGlzKVxuICAgIHZhciBkYXRhICAgID0gJHRhcmdldC5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbilcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogZHJvcGRvd24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNkcm9wZG93bnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBEUk9QRE9XTiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJ1xuICB2YXIgdG9nZ2xlICAgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgJChlbGVtZW50KS5vbignY2xpY2suYnMuZHJvcGRvd24nLCB0aGlzLnRvZ2dsZSlcbiAgfVxuXG4gIERyb3Bkb3duLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgZnVuY3Rpb24gZ2V0UGFyZW50KCR0aGlzKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgLyNbQS1aYS16XS8udGVzdChzZWxlY3RvcikgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9IHNlbGVjdG9yICYmICQoc2VsZWN0b3IpXG5cbiAgICByZXR1cm4gJHBhcmVudCAmJiAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XG4gICAgaWYgKGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuXG4gICAgJChiYWNrZHJvcCkucmVtb3ZlKClcbiAgICAkKHRvZ2dsZSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICAgICAgICA9ICQodGhpcylcbiAgICAgIHZhciAkcGFyZW50ICAgICAgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuXG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuXG5cbiAgICAgIGlmIChlICYmIGUudHlwZSA9PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkgJiYgJC5jb250YWlucygkcGFyZW50WzBdLCBlLnRhcmdldCkpIHJldHVyblxuXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCQuRXZlbnQoJ2hpZGRlbi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH0pXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgY2xlYXJNZW51cygpXG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkcGFyZW50LmNsb3Nlc3QoJy5uYXZiYXItbmF2JykubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxuICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAgIC5hZGRDbGFzcygnZHJvcGRvd24tYmFja2Ryb3AnKVxuICAgICAgICAgIC5pbnNlcnRBZnRlcigkKHRoaXMpKVxuICAgICAgICAgIC5vbignY2xpY2snLCBjbGVhck1lbnVzKVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ3Nob3cuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpc1xuICAgICAgICAudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJylcblxuICAgICAgJHBhcmVudFxuICAgICAgICAudG9nZ2xlQ2xhc3MoJ29wZW4nKVxuICAgICAgICAudHJpZ2dlcigkLkV2ZW50KCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghLygzOHw0MHwyN3wzMikvLnRlc3QoZS53aGljaCkgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSAmJiBlLndoaWNoICE9IDI3IHx8IGlzQWN0aXZlICYmIGUud2hpY2ggPT0gMjcpIHtcbiAgICAgIGlmIChlLndoaWNoID09IDI3KSAkcGFyZW50LmZpbmQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKVxuICAgIH1cblxuICAgIHZhciBkZXNjID0gJyBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGEnXG4gICAgdmFyICRpdGVtcyA9ICRwYXJlbnQuZmluZCgnLmRyb3Bkb3duLW1lbnUnICsgZGVzYylcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXG5cbiAgICB2YXIgaW5kZXggPSAkaXRlbXMuaW5kZXgoZS50YXJnZXQpXG5cbiAgICBpZiAoZS53aGljaCA9PSAzOCAmJiBpbmRleCA+IDApICAgICAgICAgICAgICAgICBpbmRleC0tICAgICAgICAgLy8gdXBcbiAgICBpZiAoZS53aGljaCA9PSA0MCAmJiBpbmRleCA8ICRpdGVtcy5sZW5ndGggLSAxKSBpbmRleCsrICAgICAgICAgLy8gZG93blxuICAgIGlmICghfmluZGV4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuXG4gICAgJGl0ZW1zLmVxKGluZGV4KS50cmlnZ2VyKCdmb2N1cycpXG4gIH1cblxuXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJywgKGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93blxuXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5kcm9wZG93bi5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG5cblxuICAvLyBEUk9QRE9XTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uZHJvcGRvd24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmRyb3Bkb3duID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQVBQTFkgVE8gU1RBTkRBUkQgRFJPUERPV04gRUxFTUVOVFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCBjbGVhck1lbnVzKVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSlcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24tbWVudScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBtb2RhbC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI21vZGFsc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIE1PREFMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBNb2RhbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zICAgICAgICAgICAgID0gb3B0aW9uc1xuICAgIHRoaXMuJGJvZHkgICAgICAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kZGlhbG9nICAgICAgICAgICAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcubW9kYWwtZGlhbG9nJylcbiAgICB0aGlzLiRiYWNrZHJvcCAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5pc1Nob3duICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkICAgICA9IG51bGxcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoICAgICAgPSAwXG4gICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3RlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5maW5kKCcubW9kYWwtY29udGVudCcpXG4gICAgICAgIC5sb2FkKHRoaXMub3B0aW9ucy5yZW1vdGUsICQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignbG9hZGVkLmJzLm1vZGFsJylcbiAgICAgICAgfSwgdGhpcykpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMFxuICBNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgTW9kYWwuREVGQVVMVFMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLmlzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdzaG93LmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAodGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gdHJ1ZVxuXG4gICAgdGhpcy5jaGVja1Njcm9sbGJhcigpXG4gICAgdGhpcy5zZXRTY3JvbGxiYXIoKVxuICAgIHRoaXMuJGJvZHkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJywgJC5wcm94eSh0aGlzLmhpZGUsIHRoaXMpKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9uKCdtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub25lKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhhdC4kZWxlbWVudCkpIHRoYXQuaWdub3JlQmFja2Ryb3BDbGljayA9IHRydWVcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGF0LiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJylcblxuICAgICAgaWYgKCF0aGF0LiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50XG4gICAgICAgIC5zaG93KClcbiAgICAgICAgLnNjcm9sbFRvcCgwKVxuXG4gICAgICB0aGF0LmFkanVzdERpYWxvZygpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcblxuICAgICAgdGhhdC5lbmZvcmNlRm9jdXMoKVxuXG4gICAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3duLmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgICB0cmFuc2l0aW9uID9cbiAgICAgICAgdGhhdC4kZGlhbG9nIC8vIHdhaXQgZm9yIG1vZGFsIHRvIHNsaWRlIGluXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBlID0gJC5FdmVudCgnaGlkZS5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICghdGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gZmFsc2VcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICAkKGRvY3VtZW50KS5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdpbicpXG4gICAgICAub2ZmKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJylcbiAgICAgIC5vZmYoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRkaWFsb2cub2ZmKCdtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KHRoaXMuaGlkZU1vZGFsLCB0aGlzKSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHRoaXMuaGlkZU1vZGFsKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJChkb2N1bWVudClcbiAgICAgIC5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbignZm9jdXNpbi5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiZcbiAgICAgICAgICAgICF0aGlzLiRlbGVtZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLndoaWNoID09IDI3ICYmIHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYnMubW9kYWwnLCAkLnByb3h5KHRoaXMuaGFuZGxlVXBkYXRlLCB0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRib2R5LnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJylcbiAgICAgIHRoYXQucmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGF0LnJlc2V0U2Nyb2xsYmFyKClcbiAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignaGlkZGVuLmJzLm1vZGFsJylcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJhY2tkcm9wICYmIHRoaXMuJGJhY2tkcm9wLnJlbW92ZSgpXG4gICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYmFja2Ryb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgYW5pbWF0ZSA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/ICdmYWRlJyA6ICcnXG5cbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgdmFyIGRvQW5pbWF0ZSA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIGFuaW1hdGVcblxuICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAuYWRkQ2xhc3MoJ21vZGFsLWJhY2tkcm9wICcgKyBhbmltYXRlKVxuICAgICAgICAuYXBwZW5kVG8odGhpcy4kYm9keSlcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHJldHVyblxuICAgICAgICB0aGlzLm9wdGlvbnMuYmFja2Ryb3AgPT0gJ3N0YXRpYydcbiAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMoKVxuICAgICAgICAgIDogdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuXG4gICAgICBpZiAoZG9BbmltYXRlKSB0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoJ2luJylcblxuICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuXG5cbiAgICAgIGRvQW5pbWF0ZSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2spXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2soKVxuXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duICYmIHRoaXMuJGJhY2tkcm9wKSB7XG4gICAgICB0aGlzLiRiYWNrZHJvcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQucmVtb3ZlQmFja2Ryb3AoKVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrUmVtb3ZlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKClcblxuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyB0aGVzZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG5cbiAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFkanVzdERpYWxvZygpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSB0aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAgIXRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZ1bGxXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgaWYgKCFmdWxsV2luZG93V2lkdGgpIHsgLy8gd29ya2Fyb3VuZCBmb3IgbWlzc2luZyB3aW5kb3cuaW5uZXJXaWR0aCBpbiBJRThcbiAgICAgIHZhciBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBmdWxsV2luZG93V2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KVxuICAgIH1cbiAgICB0aGlzLmJvZHlJc092ZXJmbG93aW5nID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCA8IGZ1bGxXaW5kb3dXaWR0aFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLm1lYXN1cmVTY3JvbGxiYXIoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9keVBhZCA9IHBhcnNlSW50KCh0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcpIHx8IDApLCAxMClcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0IHx8ICcnXG4gICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcpIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYm9keVBhZCArIHRoaXMuc2Nyb2xsYmFyV2lkdGgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCB0aGlzLm9yaWdpbmFsQm9keVBhZClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkgeyAvLyB0aHggd2Fsc2hcbiAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJ1xuICAgIHRoaXMuJGJvZHkuYXBwZW5kKHNjcm9sbERpdilcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGhcbiAgICB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKHNjcm9sbERpdilcbiAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGhcbiAgfVxuXG5cbiAgLy8gTU9EQUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uLCBfcmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLm1vZGFsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIE1vZGFsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLm1vZGFsJywgKGRhdGEgPSBuZXcgTW9kYWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXShfcmVsYXRlZFRhcmdldClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuc2hvdykgZGF0YS5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5tb2RhbFxuXG4gICQuZm4ubW9kYWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5tb2RhbC5Db25zdHJ1Y3RvciA9IE1vZGFsXG5cblxuICAvLyBNT0RBTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4ubW9kYWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLm1vZGFsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gTU9EQUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMubW9kYWwuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciBocmVmICAgID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgdmFyIG9wdGlvbiAgPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuXG4gICAgaWYgKCR0aGlzLmlzKCdhJykpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgJHRhcmdldC5vbmUoJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4gLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgJHRhcmdldC5vbmUoJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHRoaXMuaXMoJzp2aXNpYmxlJykgJiYgJHRoaXMudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfSlcbiAgICB9KVxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbiwgdGhpcylcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdG9vbHRpcC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Rvb2x0aXBcbiAqIEluc3BpcmVkIGJ5IHRoZSBvcmlnaW5hbCBqUXVlcnkudGlwc3kgYnkgSmFzb24gRnJhbWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlICAgICAgID0gbnVsbFxuICAgIHRoaXMub3B0aW9ucyAgICA9IG51bGxcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ICAgID0gbnVsbFxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG4gICAgdGhpcy5pblN0YXRlICAgID0gbnVsbFxuXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB2aWV3cG9ydDoge1xuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcbiAgICB0aGlzLnR5cGUgICAgICA9IHR5cGVcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6ICh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KSlcbiAgICB0aGlzLmluU3RhdGUgICA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXSBpbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHNlbGVjdG9yYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBpbml0aWFsaXppbmcgJyArIHRoaXMudHlwZSArICcgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhJylcbiAgICB9XG5cbiAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldXG5cbiAgICAgIGlmICh0cmlnZ2VyID09ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMudG9nZ2xlLCB0aGlzKSlcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xuICAgICAgICB2YXIgZXZlbnRJbiAgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VlbnRlcicgOiAnZm9jdXNpbidcbiAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlbGVhdmUnIDogJ2ZvY3Vzb3V0J1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiAgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmVudGVyLCB0aGlzKSlcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XG4gICAgICAodGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHsgdHJpZ2dlcjogJ21hbnVhbCcsIHNlbGVjdG9yOiAnJyB9KSkgOlxuICAgICAgdGhpcy5maXhUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmdldERlZmF1bHRzKCksIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKVxuXG4gICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHtcbiAgICAgIG9wdGlvbnMuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zICA9IHt9XG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSB8fCBzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykge1xuICAgICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNvdXQnID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVyblxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdvdXQnKSBzZWxmLmhpZGUoKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3cuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5zZXJ0ZWQuYnMuJyArIHRoaXMudHlwZSlcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCB2aWV3cG9ydERpbS50b3AgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gdmlld3BvcnREaW0ud2lkdGggID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50XG5cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSB0aGlzLmdldENhbGN1bGF0ZWRPZmZzZXQocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZVxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT0gJ291dCcpIHRoYXQubGVhdmUodGhhdClcbiAgICAgIH1cblxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICAkdGlwXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCAgID0gdGhpcy50aXAoKVxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMClcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMClcblxuICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85XG4gICAgaWYgKGlzTmFOKG1hcmdpblRvcCkpICBtYXJnaW5Ub3AgID0gMFxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcblxuICAgIG9mZnNldC50b3AgICs9IG1hcmdpblRvcFxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBpc1ZlcnRpY2FsICAgICAgICAgID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KVxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gaXNWZXJ0aWNhbCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KClcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnLCA1MCAqICgxIC0gZGVsdGEgLyBkaW1lbnNpb24pICsgJyUnKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlID0gdGhpcy5nZXRUaXRsZSgpXG5cbiAgICAkdGlwLmZpbmQoJy50b29sdGlwLWlubmVyJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgaW4gdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0JylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgJHRpcCA9ICQodGhpcy4kdGlwKVxuICAgIHZhciBlICAgID0gJC5FdmVudCgnaGlkZS5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpZiAodGhhdC5ob3ZlclN0YXRlICE9ICdpbicpICR0aXAuZGV0YWNoKClcbiAgICAgIGlmICh0aGF0LiRlbGVtZW50KSB7IC8vIFRPRE86IENoZWNrIHdoZXRoZXIgZ3VhcmRpbmcgdGhpcyBjb2RlIHdpdGggdGhpcyBgaWZgIGlzIHJlYWxseSBuZWNlc3NhcnkuXG4gICAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAgICAgLnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHRpcC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICR0aXBcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIGNvbXBsZXRlKClcblxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5maXhUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgaWYgKCRlLmF0dHIoJ3RpdGxlJykgfHwgdHlwZW9mICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSAhPSAnc3RyaW5nJykge1xuICAgICAgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScsICRlLmF0dHIoJ3RpdGxlJykgfHwgJycpLmF0dHIoJ3RpdGxlJywgJycpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgICRlbGVtZW50ICAgPSAkZWxlbWVudCB8fCB0aGlzLiRlbGVtZW50XG5cbiAgICB2YXIgZWwgICAgID0gJGVsZW1lbnRbMF1cbiAgICB2YXIgaXNCb2R5ID0gZWwudGFnTmFtZSA9PSAnQk9EWSdcblxuICAgIHZhciBlbFJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGlmIChlbFJlY3Qud2lkdGggPT0gbnVsbCkge1xuICAgICAgLy8gd2lkdGggYW5kIGhlaWdodCBhcmUgbWlzc2luZyBpbiBJRTgsIHNvIGNvbXB1dGUgdGhlbSBtYW51YWxseTsgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMTQwOTNcbiAgICAgIGVsUmVjdCA9ICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHsgd2lkdGg6IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0LCBoZWlnaHQ6IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wIH0pXG4gICAgfVxuICAgIHZhciBpc1N2ZyA9IHdpbmRvdy5TVkdFbGVtZW50ICYmIGVsIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnRcbiAgICAvLyBBdm9pZCB1c2luZyAkLm9mZnNldCgpIG9uIFNWR3Mgc2luY2UgaXQgZ2l2ZXMgaW5jb3JyZWN0IHJlc3VsdHMgaW4galF1ZXJ5IDMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjAyODBcbiAgICB2YXIgZWxPZmZzZXQgID0gaXNCb2R5ID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6IChpc1N2ZyA/IG51bGwgOiAkZWxlbWVudC5vZmZzZXQoKSlcbiAgICB2YXIgc2Nyb2xsICAgID0geyBzY3JvbGw6IGlzQm9keSA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgOiAkZWxlbWVudC5zY3JvbGxUb3AoKSB9XG4gICAgdmFyIG91dGVyRGltcyA9IGlzQm9keSA/IHsgd2lkdGg6ICQod2luZG93KS53aWR0aCgpLCBoZWlnaHQ6ICQod2luZG93KS5oZWlnaHQoKSB9IDogbnVsbFxuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldENhbGN1bGF0ZWRPZmZzZXQgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50ID09ICdib3R0b20nID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0LCAgIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgID8geyB0b3A6IHBvcy50b3AgLSBhY3R1YWxIZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6XG4gICAgICAgIC8qIHBsYWNlbWVudCA9PSAncmlnaHQnICovIHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCB9XG5cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHZhciBkZWx0YSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH1cbiAgICBpZiAoIXRoaXMuJHZpZXdwb3J0KSByZXR1cm4gZGVsdGFcblxuICAgIHZhciB2aWV3cG9ydFBhZGRpbmcgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgdGhpcy5vcHRpb25zLnZpZXdwb3J0LnBhZGRpbmcgfHwgMFxuICAgIHZhciB2aWV3cG9ydERpbWVuc2lvbnMgPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHZhciB0b3BFZGdlT2Zmc2V0ICAgID0gcG9zLnRvcCAtIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGxcbiAgICAgIHZhciBib3R0b21FZGdlT2Zmc2V0ID0gcG9zLnRvcCArIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGwgKyBhY3R1YWxIZWlnaHRcbiAgICAgIGlmICh0b3BFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLnRvcCkgeyAvLyB0b3Agb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCAtIHRvcEVkZ2VPZmZzZXRcbiAgICAgIH0gZWxzZSBpZiAoYm90dG9tRWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0KSB7IC8vIGJvdHRvbSBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlZnRFZGdlT2Zmc2V0ICA9IHBvcy5sZWZ0IC0gdmlld3BvcnRQYWRkaW5nXG4gICAgICB2YXIgcmlnaHRFZGdlT2Zmc2V0ID0gcG9zLmxlZnQgKyB2aWV3cG9ydFBhZGRpbmcgKyBhY3R1YWxXaWR0aFxuICAgICAgaWYgKGxlZnRFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLmxlZnQpIHsgLy8gbGVmdCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgLSBsZWZ0RWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChyaWdodEVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMucmlnaHQpIHsgLy8gcmlnaHQgb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0ICsgdmlld3BvcnREaW1lbnNpb25zLndpZHRoIC0gcmlnaHRFZGdlT2Zmc2V0XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbHRhXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGl0bGVcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICB0aXRsZSA9ICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKVxuICAgICAgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogIG8udGl0bGUpXG5cbiAgICByZXR1cm4gdGl0bGVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFVJRCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBkbyBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXG4gICAgd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG4gICAgcmV0dXJuIHByZWZpeFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudGlwID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kdGlwKSB7XG4gICAgICB0aGlzLiR0aXAgPSAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSlcbiAgICAgIGlmICh0aGlzLiR0aXAubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZSArICcgYHRlbXBsYXRlYCBvcHRpb24gbXVzdCBjb25zaXN0IG9mIGV4YWN0bHkgMSB0b3AtbGV2ZWwgZWxlbWVudCEnKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kdGlwXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcudG9vbHRpcC1hcnJvdycpKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gIXRoaXMuZW5hYmxlZFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBpZiAoZSkge1xuICAgICAgc2VsZiA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlKSB7XG4gICAgICBzZWxmLmluU3RhdGUuY2xpY2sgPSAhc2VsZi5pblN0YXRlLmNsaWNrXG4gICAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHNlbGYuZW50ZXIoc2VsZilcbiAgICAgIGVsc2Ugc2VsZi5sZWF2ZShzZWxmKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpID8gc2VsZi5sZWF2ZShzZWxmKSA6IHNlbGYuZW50ZXIoc2VsZilcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy5oaWRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSlcbiAgICAgIGlmICh0aGF0LiR0aXApIHtcbiAgICAgICAgdGhhdC4kdGlwLmRldGFjaCgpXG4gICAgICB9XG4gICAgICB0aGF0LiR0aXAgPSBudWxsXG4gICAgICB0aGF0LiRhcnJvdyA9IG51bGxcbiAgICAgIHRoYXQuJHZpZXdwb3J0ID0gbnVsbFxuICAgICAgdGhhdC4kZWxlbWVudCA9IG51bGxcbiAgICB9KVxuICB9XG5cblxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNwb3BvdmVyc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFBPUE9WRVIgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXQoJ3BvcG92ZXInLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKCEkLmZuLnRvb2x0aXApIHRocm93IG5ldyBFcnJvcignUG9wb3ZlciByZXF1aXJlcyB0b29sdGlwLmpzJylcblxuICBQb3BvdmVyLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFBvcG92ZXIuREVGQVVMVFMgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2PjwvZGl2PidcbiAgfSlcblxuXG4gIC8vIE5PVEU6IFBPUE9WRVIgRVhURU5EUyB0b29sdGlwLmpzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLnByb3RvdHlwZSlcblxuICBQb3BvdmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUU1xuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgICA9IHRoaXMuZ2V0VGl0bGUoKVxuICAgIHZhciBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KClcblxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci1jb250ZW50JykuY2hpbGRyZW4oKS5kZXRhY2goKS5lbmQoKVsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuICAgICAgdGhpcy5vcHRpb25zLmh0bWwgPyAodHlwZW9mIGNvbnRlbnQgPT0gJ3N0cmluZycgPyAnaHRtbCcgOiAnYXBwZW5kJykgOiAndGV4dCdcbiAgICBdKGNvbnRlbnQpXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIHRvcCBib3R0b20gbGVmdCByaWdodCBpbicpXG5cbiAgICAvLyBJRTggZG9lc24ndCBhY2NlcHQgaGlkaW5nIHZpYSB0aGUgYDplbXB0eWAgcHNldWRvIHNlbGVjdG9yLCB3ZSBoYXZlIHRvIGRvXG4gICAgLy8gdGhpcyBtYW51YWxseSBieSBjaGVja2luZyB0aGUgY29udGVudHMuXG4gICAgaWYgKCEkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaHRtbCgpKSAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaGlkZSgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5nZXRDb250ZW50KClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgcmV0dXJuICRlLmF0dHIoJ2RhdGEtY29udGVudCcpXG4gICAgICB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIG8uY29udGVudC5jYWxsKCRlWzBdKSA6XG4gICAgICAgICAgICBvLmNvbnRlbnQpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcbiAgfVxuXG5cbiAgLy8gUE9QT1ZFUiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicsIChkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnBvcG92ZXJcblxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5wb3BvdmVyLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG5cbiAgLy8gUE9QT1ZFUiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5wb3BvdmVyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5wb3BvdmVyID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBzY3JvbGxzcHkuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNzY3JvbGxzcHlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50ID0gJChlbGVtZW50KS5pcyhkb2N1bWVudC5ib2R5KSA/ICQod2luZG93KSA6ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLnNlbGVjdG9yICAgICAgID0gKHRoaXMub3B0aW9ucy50YXJnZXQgfHwgJycpICsgJyAubmF2IGxpID4gYSdcbiAgICB0aGlzLm9mZnNldHMgICAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cbiAgICB0aGlzLmFjdGl2ZVRhcmdldCAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ICAgPSAwXG5cbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwuYnMuc2Nyb2xsc3B5JywgJC5wcm94eSh0aGlzLnByb2Nlc3MsIHRoaXMpKVxuICAgIHRoaXMucmVmcmVzaCgpXG4gICAgdGhpcy5wcm9jZXNzKClcbiAgfVxuXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNydcblxuICBTY3JvbGxTcHkuREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAxMFxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KHRoaXMuJGJvZHlbMF0uc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ICAgICAgICAgID0gdGhpc1xuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcbiAgICB2YXIgb2Zmc2V0QmFzZSAgICA9IDBcblxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICA9IFtdXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG5cbiAgICBpZiAoISQuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSkpIHtcbiAgICAgIG9mZnNldE1ldGhvZCA9ICdwb3NpdGlvbidcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcbiAgICB9XG5cbiAgICB0aGlzLiRib2R5XG4gICAgICAuZmluZCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcbiAgICAgICAgdmFyIGhyZWYgID0gJGVsLmRhdGEoJ3RhcmdldCcpIHx8ICRlbC5hdHRyKCdocmVmJylcbiAgICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpXG5cbiAgICAgICAgcmV0dXJuICgkaHJlZlxuICAgICAgICAgICYmICRocmVmLmxlbmd0aFxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgJiYgW1skaHJlZltvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgaHJlZl1dKSB8fCBudWxsXG4gICAgICB9KVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXG4gICAgICB9KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG4gICAgdmFyIG1heFNjcm9sbCAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldHMgICAgICA9IHRoaXMub2Zmc2V0c1xuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcbiAgICB2YXIgYWN0aXZlVGFyZ2V0ID0gdGhpcy5hY3RpdmVUYXJnZXRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpXG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXG4gICAgICAgICYmIHNjcm9sbFRvcCA+PSBvZmZzZXRzW2ldXG4gICAgICAgICYmIChvZmZzZXRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkIHx8IHNjcm9sbFRvcCA8IG9mZnNldHNbaSArIDFdKVxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5jbGVhcigpXG5cbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcbiAgICAgICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICtcbiAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweVxuXG4gICQuZm4uc2Nyb2xsc3B5ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG5cblxuICAvLyBTQ1JPTExTUFkgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5zY3JvbGxzcHkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgLy8ganNjczplbmFibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgfVxuXG4gIFRhYi5WRVJTSU9OID0gJzMuMy43J1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGhpcyAgICA9IHRoaXMuZWxlbWVudFxuICAgIHZhciAkdWwgICAgICA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm5cblxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxuICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgfSlcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KVxuXG4gICAgJHByZXZpb3VzLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHNlbGVjdG9yKVxuXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3Nob3duLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmUnKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgJGFjdGl2ZS5sZW5ndGggJiYgdHJhbnNpdGlvbiA/XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUYWIuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93JylcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLCBjbGlja0hhbmRsZXIpXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHRoaXMuJHRhcmdldCA9ICQodGhpcy5vcHRpb25zLnRhcmdldClcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxuICAgICAgLm9uKCdjbGljay5icy5hZmZpeC5kYXRhLWFwaScsICAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKVxuXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5hZmZpeGVkICAgICAgPSBudWxsXG4gICAgdGhpcy51bnBpbiAgICAgICAgPSBudWxsXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXG5cbiAgICB0aGlzLmNoZWNrUG9zaXRpb24oKVxuICB9XG5cbiAgQWZmaXguVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQWZmaXguUkVTRVQgICAgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSdcblxuICBBZmZpeC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGFyZ2V0OiB3aW5kb3dcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pIHtcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICAgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpXG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgdGhpcy5hZmZpeGVkID09ICd0b3AnKSByZXR1cm4gc2Nyb2xsVG9wIDwgb2Zmc2V0VG9wID8gJ3RvcCcgOiBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xuICAgICAgaWYgKG9mZnNldFRvcCAhPSBudWxsKSByZXR1cm4gKHNjcm9sbFRvcCArIHRoaXMudW5waW4gPD0gcG9zaXRpb24udG9wKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICAgIHJldHVybiAoc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyAgID0gdGhpcy5hZmZpeGVkID09IG51bGxcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHRcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcbiAgICBpZiAob2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKGNvbGxpZGVyVG9wICsgY29sbGlkZXJIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgcmV0dXJuICdib3R0b20nXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXRcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcygnYWZmaXgnKVxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHJldHVybiAodGhpcy5waW5uZWRPZmZzZXQgPSBwb3NpdGlvbi50b3AgLSBzY3JvbGxUb3ApXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHJldHVyblxuXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0ICAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gTWF0aC5tYXgoJChkb2N1bWVudCkuaGVpZ2h0KCksICQoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSAgICBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCb3R0b20gPT0gJ2Z1bmN0aW9uJykgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbSh0aGlzLiRlbGVtZW50KVxuXG4gICAgdmFyIGFmZml4ID0gdGhpcy5nZXRTdGF0ZShzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpXG5cbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcbiAgICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgICAgdGhpcy51bnBpbiA9IGFmZml4ID09ICdib3R0b20nID8gdGhpcy5nZXRQaW5uZWRPZmZzZXQoKSA6IG51bGxcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXG4gICAgICAgIC50cmlnZ2VyKGFmZml4VHlwZS5yZXBsYWNlKCdhZmZpeCcsICdhZmZpeGVkJykgKyAnLmJzLmFmZml4JylcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cbiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcFxuXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gfCBGbGV4eSBoZWFkZXJcbi8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gfFxuLy8gfCBUaGlzIGpRdWVyeSBzY3JpcHQgaXMgd3JpdHRlbiBieVxuLy8gfFxuLy8gfCBNb3J0ZW4gTmlzc2VuXG4vLyB8IGhqZW1tZXNpZGVrb25nZW4uZGtcbi8vIHxcblxudmFyIGZsZXh5X2hlYWRlciA9IChmdW5jdGlvbiAoJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBwdWIgPSB7fSxcbiAgICAgICAgJGhlYWRlcl9zdGF0aWMgPSAkKCcuZmxleHktaGVhZGVyLS1zdGF0aWMnKSxcbiAgICAgICAgJGhlYWRlcl9zdGlja3kgPSAkKCcuZmxleHktaGVhZGVyLS1zdGlja3knKSxcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVwZGF0ZV9pbnRlcnZhbDogMTAwLFxuICAgICAgICAgICAgdG9sZXJhbmNlOiB7XG4gICAgICAgICAgICAgICAgdXB3YXJkOiAyMCxcbiAgICAgICAgICAgICAgICBkb3dud2FyZDogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmZzZXQ6IF9nZXRfb2Zmc2V0X2Zyb21fZWxlbWVudHNfYm90dG9tKCRoZWFkZXJfc3RhdGljKSxcbiAgICAgICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICAgICAgICBwaW5uZWQ6IFwiZmxleHktaGVhZGVyLS1waW5uZWRcIixcbiAgICAgICAgICAgICAgICB1bnBpbm5lZDogXCJmbGV4eS1oZWFkZXItLXVucGlubmVkXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2FzX3Njcm9sbGVkID0gZmFsc2UsXG4gICAgICAgIGxhc3RfZGlzdGFuY2VfZnJvbV90b3AgPSAwO1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVcbiAgICAgKi9cbiAgICBwdWIuaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpO1xuICAgICAgICByZWdpc3RlckJvb3RFdmVudEhhbmRsZXJzKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGJvb3QgZXZlbnQgaGFuZGxlcnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWdpc3RlckJvb3RFdmVudEhhbmRsZXJzKCkge1xuICAgICAgICAkaGVhZGVyX3N0aWNreS5hZGRDbGFzcyhvcHRpb25zLmNsYXNzZXMudW5waW5uZWQpO1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBpZiAod2FzX3Njcm9sbGVkKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRfd2FzX3Njcm9sbGVkKCk7XG5cbiAgICAgICAgICAgICAgICB3YXNfc2Nyb2xsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucy51cGRhdGVfaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJFdmVudEhhbmRsZXJzKCkge1xuICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB3YXNfc2Nyb2xsZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgb2Zmc2V0IGZyb20gZWxlbWVudCBib3R0b21cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBfZ2V0X29mZnNldF9mcm9tX2VsZW1lbnRzX2JvdHRvbSgkZWxlbWVudCkge1xuICAgICAgICB2YXIgZWxlbWVudF9oZWlnaHQgPSAkZWxlbWVudC5vdXRlckhlaWdodCh0cnVlKSxcbiAgICAgICAgICAgIGVsZW1lbnRfb2Zmc2V0ID0gJGVsZW1lbnQub2Zmc2V0KCkudG9wO1xuXG4gICAgICAgIHJldHVybiAoZWxlbWVudF9oZWlnaHQgKyBlbGVtZW50X29mZnNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9jdW1lbnQgd2FzIHNjcm9sbGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9jdW1lbnRfd2FzX3Njcm9sbGVkKCkge1xuICAgICAgICB2YXIgY3VycmVudF9kaXN0YW5jZV9mcm9tX3RvcCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcblxuICAgICAgICAvLyBJZiBwYXN0IG9mZnNldFxuICAgICAgICBpZiAoY3VycmVudF9kaXN0YW5jZV9mcm9tX3RvcCA+PSBvcHRpb25zLm9mZnNldCkge1xuXG4gICAgICAgICAgICAvLyBEb3dud2FyZHMgc2Nyb2xsXG4gICAgICAgICAgICBpZiAoY3VycmVudF9kaXN0YW5jZV9mcm9tX3RvcCA+IGxhc3RfZGlzdGFuY2VfZnJvbV90b3ApIHtcblxuICAgICAgICAgICAgICAgIC8vIE9iZXkgdGhlIGRvd253YXJkIHRvbGVyYW5jZVxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhjdXJyZW50X2Rpc3RhbmNlX2Zyb21fdG9wIC0gbGFzdF9kaXN0YW5jZV9mcm9tX3RvcCkgPD0gb3B0aW9ucy50b2xlcmFuY2UuZG93bndhcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRoZWFkZXJfc3RpY2t5LnJlbW92ZUNsYXNzKG9wdGlvbnMuY2xhc3Nlcy5waW5uZWQpLmFkZENsYXNzKG9wdGlvbnMuY2xhc3Nlcy51bnBpbm5lZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwd2FyZHMgc2Nyb2xsXG4gICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgIC8vIE9iZXkgdGhlIHVwd2FyZCB0b2xlcmFuY2VcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudF9kaXN0YW5jZV9mcm9tX3RvcCAtIGxhc3RfZGlzdGFuY2VfZnJvbV90b3ApIDw9IG9wdGlvbnMudG9sZXJhbmNlLnVwd2FyZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIG5vdCBzY3JvbGxlZCBwYXN0IHRoZSBkb2N1bWVudCB3aGljaCBpcyBwb3NzaWJsZSBvbiB0aGUgTWFjXG4gICAgICAgICAgICAgICAgaWYgKChjdXJyZW50X2Rpc3RhbmNlX2Zyb21fdG9wICsgJCh3aW5kb3cpLmhlaWdodCgpKSA8ICQoZG9jdW1lbnQpLmhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICRoZWFkZXJfc3RpY2t5LnJlbW92ZUNsYXNzKG9wdGlvbnMuY2xhc3Nlcy51bnBpbm5lZCkuYWRkQ2xhc3Mob3B0aW9ucy5jbGFzc2VzLnBpbm5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90IHBhc3Qgb2Zmc2V0XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJGhlYWRlcl9zdGlja3kucmVtb3ZlQ2xhc3Mob3B0aW9ucy5jbGFzc2VzLnBpbm5lZCkuYWRkQ2xhc3Mob3B0aW9ucy5jbGFzc2VzLnVucGlubmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RfZGlzdGFuY2VfZnJvbV90b3AgPSBjdXJyZW50X2Rpc3RhbmNlX2Zyb21fdG9wO1xuICAgIH1cblxuICAgIHJldHVybiBwdWI7XG59KShqUXVlcnkpO1xuIiwiLy8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyB8IEZsZXh5IG5hdmlnYXRpb25cbi8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gfFxuLy8gfCBUaGlzIGpRdWVyeSBzY3JpcHQgaXMgd3JpdHRlbiBieVxuLy8gfFxuLy8gfCBNb3J0ZW4gTmlzc2VuXG4vLyB8IGhqZW1tZXNpZGVrb25nZW4uZGtcbi8vIHxcblxudmFyIGZsZXh5X25hdmlnYXRpb24gPSAoZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgcHViID0ge30sXG4gICAgICAgIGxheW91dF9jbGFzc2VzID0ge1xuICAgICAgICAgICAgJ25hdmlnYXRpb24nOiAnLmZsZXh5LW5hdmlnYXRpb24nLFxuICAgICAgICAgICAgJ29iZnVzY2F0b3InOiAnLmZsZXh5LW5hdmlnYXRpb25fX29iZnVzY2F0b3InLFxuICAgICAgICAgICAgJ2Ryb3Bkb3duJzogJy5mbGV4eS1uYXZpZ2F0aW9uX19pdGVtLS1kcm9wZG93bicsXG4gICAgICAgICAgICAnZHJvcGRvd25fbWVnYW1lbnUnOiAnLmZsZXh5LW5hdmlnYXRpb25fX2l0ZW1fX2Ryb3Bkb3duLW1lZ2FtZW51JyxcblxuICAgICAgICAgICAgJ2lzX3VwZ3JhZGVkJzogJ2lzLXVwZ3JhZGVkJyxcbiAgICAgICAgICAgICduYXZpZ2F0aW9uX2hhc19tZWdhbWVudSc6ICdoYXMtbWVnYW1lbnUnLFxuICAgICAgICAgICAgJ2Ryb3Bkb3duX2hhc19tZWdhbWVudSc6ICdmbGV4eS1uYXZpZ2F0aW9uX19pdGVtLS1kcm9wZG93bi13aXRoLW1lZ2FtZW51JyxcbiAgICAgICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlXG4gICAgICovXG4gICAgcHViLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgcmVnaXN0ZXJCb290RXZlbnRIYW5kbGVycygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBib290IGV2ZW50IGhhbmRsZXJzXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJCb290RXZlbnRIYW5kbGVycygpIHtcblxuICAgICAgICAvLyBVcGdyYWRlXG4gICAgICAgIHVwZ3JhZGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBldmVudCBoYW5kbGVyc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpIHt9XG5cbiAgICAvKipcbiAgICAgKiBVcGdyYWRlIGVsZW1lbnRzLlxuICAgICAqIEFkZCBjbGFzc2VzIHRvIGVsZW1lbnRzLCBiYXNlZCB1cG9uIGF0dGFjaGVkIGNsYXNzZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBncmFkZSgpIHtcbiAgICAgICAgdmFyICRuYXZpZ2F0aW9ucyA9ICQobGF5b3V0X2NsYXNzZXMubmF2aWdhdGlvbik7XG5cbiAgICAgICAgLy8gTmF2aWdhdGlvbnNcbiAgICAgICAgaWYgKCRuYXZpZ2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkbmF2aWdhdGlvbnMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciAkbmF2aWdhdGlvbiA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICRtZWdhbWVudXMgPSAkbmF2aWdhdGlvbi5maW5kKGxheW91dF9jbGFzc2VzLmRyb3Bkb3duX21lZ2FtZW51KSxcbiAgICAgICAgICAgICAgICAgICAgJGRyb3Bkb3duX21lZ2FtZW51ID0gJG5hdmlnYXRpb24uZmluZChsYXlvdXRfY2xhc3Nlcy5kcm9wZG93bl9oYXNfbWVnYW1lbnUpO1xuXG4gICAgICAgICAgICAgICAgLy8gSGFzIGFscmVhZHkgYmVlbiB1cGdyYWRlZFxuICAgICAgICAgICAgICAgIGlmICgkbmF2aWdhdGlvbi5oYXNDbGFzcyhsYXlvdXRfY2xhc3Nlcy5pc191cGdyYWRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhhcyBtZWdhbWVudVxuICAgICAgICAgICAgICAgIGlmICgkbWVnYW1lbnVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJG5hdmlnYXRpb24uYWRkQ2xhc3MobGF5b3V0X2NsYXNzZXMubmF2aWdhdGlvbl9oYXNfbWVnYW1lbnUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biB0aHJvdWdoIGFsbCBtZWdhbWVudXNcbiAgICAgICAgICAgICAgICAgICAgJG1lZ2FtZW51cy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJG1lZ2FtZW51ID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNfb2JmdXNjYXRvciA9ICQoJ2h0bWwnKS5oYXNDbGFzcygnaGFzLW9iZnVzY2F0b3InKSA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJG1lZ2FtZW51LnBhcmVudHMobGF5b3V0X2NsYXNzZXMuZHJvcGRvd24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGxheW91dF9jbGFzc2VzLmRyb3Bkb3duX2hhc19tZWdhbWVudSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaG92ZXIoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc19vYmZ1c2NhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdG9yLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc19vYmZ1c2NhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmZ1c2NhdG9yLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJcyB1cGdyYWRlZFxuICAgICAgICAgICAgICAgICRuYXZpZ2F0aW9uLmFkZENsYXNzKGxheW91dF9jbGFzc2VzLmlzX3VwZ3JhZGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHB1Yjtcbn0pKGpRdWVyeSk7XG4iLCIvKiEgc2lkciAtIHYyLjIuMSAtIDIwMTYtMDItMTdcbiAqIGh0dHA6Ly93d3cuYmVycmlhcnQuY29tL3NpZHIvXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBBbGJlcnRvIFZhcmVsYTsgTGljZW5zZWQgTUlUICovXG5cbihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgYmFiZWxIZWxwZXJzID0ge307XG5cbiAgYmFiZWxIZWxwZXJzLmNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfTtcblxuICBiYWJlbEhlbHBlcnMuY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgYmFiZWxIZWxwZXJzO1xuXG4gIHZhciBzaWRyU3RhdHVzID0ge1xuICAgIG1vdmluZzogZmFsc2UsXG4gICAgb3BlbmVkOiBmYWxzZVxuICB9O1xuXG4gIHZhciBoZWxwZXIgPSB7XG4gICAgLy8gQ2hlY2sgZm9yIHZhbGlkcyB1cmxzXG4gICAgLy8gRnJvbSA6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTcxNzA5My9jaGVjay1pZi1hLWphdmFzY3JpcHQtc3RyaW5nLWlzLWFuLXVybFxuXG4gICAgaXNVcmw6IGZ1bmN0aW9uIGlzVXJsKHN0cikge1xuICAgICAgdmFyIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeKGh0dHBzPzpcXFxcL1xcXFwvKT8nICsgLy8gcHJvdG9jb2xcbiAgICAgICcoKChbYS16XFxcXGRdKFthLXpcXFxcZC1dKlthLXpcXFxcZF0pKilcXFxcLj8pK1thLXpdezIsfXwnICsgLy8gZG9tYWluIG5hbWVcbiAgICAgICcoKFxcXFxkezEsM31cXFxcLil7M31cXFxcZHsxLDN9KSknICsgLy8gT1IgaXAgKHY0KSBhZGRyZXNzXG4gICAgICAnKFxcXFw6XFxcXGQrKT8oXFxcXC9bLWEtelxcXFxkJV8ufitdKikqJyArIC8vIHBvcnQgYW5kIHBhdGhcbiAgICAgICcoXFxcXD9bOyZhLXpcXFxcZCVfLn4rPS1dKik/JyArIC8vIHF1ZXJ5IHN0cmluZ1xuICAgICAgJyhcXFxcI1stYS16XFxcXGRfXSopPyQnLCAnaScpOyAvLyBmcmFnbWVudCBsb2NhdG9yXG5cbiAgICAgIGlmIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyBBZGQgc2lkciBwcmVmaXhlc1xuICAgIGFkZFByZWZpeGVzOiBmdW5jdGlvbiBhZGRQcmVmaXhlcygkZWxlbWVudCkge1xuICAgICAgdGhpcy5hZGRQcmVmaXgoJGVsZW1lbnQsICdpZCcpO1xuICAgICAgdGhpcy5hZGRQcmVmaXgoJGVsZW1lbnQsICdjbGFzcycpO1xuICAgICAgJGVsZW1lbnQucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICB9LFxuICAgIGFkZFByZWZpeDogZnVuY3Rpb24gYWRkUHJlZml4KCRlbGVtZW50LCBhdHRyaWJ1dGUpIHtcbiAgICAgIHZhciB0b1JlcGxhY2UgPSAkZWxlbWVudC5hdHRyKGF0dHJpYnV0ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdG9SZXBsYWNlID09PSAnc3RyaW5nJyAmJiB0b1JlcGxhY2UgIT09ICcnICYmIHRvUmVwbGFjZSAhPT0gJ3NpZHItaW5uZXInKSB7XG4gICAgICAgICRlbGVtZW50LmF0dHIoYXR0cmlidXRlLCB0b1JlcGxhY2UucmVwbGFjZSgvKFtBLVphLXowLTlfLlxcLV0rKS9nLCAnc2lkci0nICsgYXR0cmlidXRlICsgJy0kMScpKTtcbiAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvLyBDaGVjayBpZiB0cmFuc2l0aW9ucyBpcyBzdXBwb3J0ZWRcbiAgICB0cmFuc2l0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICBzdHlsZSA9IGJvZHkuc3R5bGUsXG4gICAgICAgICAgc3VwcG9ydGVkID0gZmFsc2UsXG4gICAgICAgICAgcHJvcGVydHkgPSAndHJhbnNpdGlvbic7XG5cbiAgICAgIGlmIChwcm9wZXJ0eSBpbiBzdHlsZSkge1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcHJlZml4ZXMgPSBbJ21veicsICd3ZWJraXQnLCAnbycsICdtcyddLFxuICAgICAgICAgICAgICBwcmVmaXggPSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuICAgICAgICAgIHN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICAgICAgICAgICAgaWYgKHByZWZpeCArIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0oKTtcbiAgICAgICAgICBwcm9wZXJ0eSA9IHN1cHBvcnRlZCA/ICctJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJy0nICsgcHJvcGVydHkudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1cHBvcnRlZDogc3VwcG9ydGVkLFxuICAgICAgICBwcm9wZXJ0eTogcHJvcGVydHlcbiAgICAgIH07XG4gICAgfSgpXG4gIH07XG5cbiAgdmFyICQkMiA9IGpRdWVyeTtcblxuICB2YXIgYm9keUFuaW1hdGlvbkNsYXNzID0gJ3NpZHItYW5pbWF0aW5nJztcbiAgdmFyIG9wZW5BY3Rpb24gPSAnb3Blbic7XG4gIHZhciBjbG9zZUFjdGlvbiA9ICdjbG9zZSc7XG4gIHZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCBvVHJhbnNpdGlvbkVuZCBtc1RyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCc7XG4gIHZhciBNZW51ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lbnUobmFtZSkge1xuICAgICAgYmFiZWxIZWxwZXJzLmNsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbnUpO1xuXG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5pdGVtID0gJCQyKCcjJyArIG5hbWUpO1xuICAgICAgdGhpcy5vcGVuQ2xhc3MgPSBuYW1lID09PSAnc2lkcicgPyAnc2lkci1vcGVuJyA6ICdzaWRyLW9wZW4gJyArIG5hbWUgKyAnLW9wZW4nO1xuICAgICAgdGhpcy5tZW51V2lkdGggPSB0aGlzLml0ZW0ub3V0ZXJXaWR0aCh0cnVlKTtcbiAgICAgIHRoaXMuc3BlZWQgPSB0aGlzLml0ZW0uZGF0YSgnc3BlZWQnKTtcbiAgICAgIHRoaXMuc2lkZSA9IHRoaXMuaXRlbS5kYXRhKCdzaWRlJyk7XG4gICAgICB0aGlzLmRpc3BsYWNlID0gdGhpcy5pdGVtLmRhdGEoJ2Rpc3BsYWNlJyk7XG4gICAgICB0aGlzLnRpbWluZyA9IHRoaXMuaXRlbS5kYXRhKCd0aW1pbmcnKTtcbiAgICAgIHRoaXMubWV0aG9kID0gdGhpcy5pdGVtLmRhdGEoJ21ldGhvZCcpO1xuICAgICAgdGhpcy5vbk9wZW5DYWxsYmFjayA9IHRoaXMuaXRlbS5kYXRhKCdvbk9wZW4nKTtcbiAgICAgIHRoaXMub25DbG9zZUNhbGxiYWNrID0gdGhpcy5pdGVtLmRhdGEoJ29uQ2xvc2UnKTtcbiAgICAgIHRoaXMub25PcGVuRW5kQ2FsbGJhY2sgPSB0aGlzLml0ZW0uZGF0YSgnb25PcGVuRW5kJyk7XG4gICAgICB0aGlzLm9uQ2xvc2VFbmRDYWxsYmFjayA9IHRoaXMuaXRlbS5kYXRhKCdvbkNsb3NlRW5kJyk7XG4gICAgICB0aGlzLmJvZHkgPSAkJDIodGhpcy5pdGVtLmRhdGEoJ2JvZHknKSk7XG4gICAgfVxuXG4gICAgYmFiZWxIZWxwZXJzLmNyZWF0ZUNsYXNzKE1lbnUsIFt7XG4gICAgICBrZXk6ICdnZXRBbmltYXRpb24nLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFuaW1hdGlvbihhY3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHt9LFxuICAgICAgICAgICAgcHJvcCA9IHRoaXMuc2lkZTtcblxuICAgICAgICBpZiAoYWN0aW9uID09PSAnb3BlbicgJiYgZWxlbWVudCA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgYW5pbWF0aW9uW3Byb3BdID0gdGhpcy5tZW51V2lkdGggKyAncHgnO1xuICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ2Nsb3NlJyAmJiBlbGVtZW50ID09PSAnbWVudScpIHtcbiAgICAgICAgICBhbmltYXRpb25bcHJvcF0gPSAnLScgKyB0aGlzLm1lbnVXaWR0aCArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5pbWF0aW9uW3Byb3BdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbmltYXRpb247XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAncHJlcGFyZUJvZHknLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVCb2R5KGFjdGlvbikge1xuICAgICAgICB2YXIgcHJvcCA9IGFjdGlvbiA9PT0gJ29wZW4nID8gJ2hpZGRlbicgOiAnJztcblxuICAgICAgICAvLyBQcmVwYXJlIHBhZ2UgaWYgY29udGFpbmVyIGlzIGJvZHlcbiAgICAgICAgaWYgKHRoaXMuYm9keS5pcygnYm9keScpKSB7XG4gICAgICAgICAgdmFyICRodG1sID0gJCQyKCdodG1sJyksXG4gICAgICAgICAgICAgIHNjcm9sbFRvcCA9ICRodG1sLnNjcm9sbFRvcCgpO1xuXG4gICAgICAgICAgJGh0bWwuY3NzKCdvdmVyZmxvdy14JywgcHJvcCkuc2Nyb2xsVG9wKHNjcm9sbFRvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvcGVuQm9keScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbkJvZHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc3BsYWNlKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25zID0gaGVscGVyLnRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAkYm9keSA9IHRoaXMuYm9keTtcblxuICAgICAgICAgIGlmICh0cmFuc2l0aW9ucy5zdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICRib2R5LmNzcyh0cmFuc2l0aW9ucy5wcm9wZXJ0eSwgdGhpcy5zaWRlICsgJyAnICsgdGhpcy5zcGVlZCAvIDEwMDAgKyAncyAnICsgdGhpcy50aW1pbmcpLmNzcyh0aGlzLnNpZGUsIDApLmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiAkYm9keS53aWR0aCgpLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkYm9keS5jc3ModGhpcy5zaWRlLCB0aGlzLm1lbnVXaWR0aCArICdweCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYm9keUFuaW1hdGlvbiA9IHRoaXMuZ2V0QW5pbWF0aW9uKG9wZW5BY3Rpb24sICdib2R5Jyk7XG5cbiAgICAgICAgICAgICRib2R5LmNzcyh7XG4gICAgICAgICAgICAgIHdpZHRoOiAkYm9keS53aWR0aCgpLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgfSkuYW5pbWF0ZShib2R5QW5pbWF0aW9uLCB7XG4gICAgICAgICAgICAgIHF1ZXVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuc3BlZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ29uQ2xvc2VCb2R5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlQm9keSgpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25zID0gaGVscGVyLnRyYW5zaXRpb25zLFxuICAgICAgICAgICAgcmVzZXRTdHlsZXMgPSB7XG4gICAgICAgICAgd2lkdGg6ICcnLFxuICAgICAgICAgIHBvc2l0aW9uOiAnJyxcbiAgICAgICAgICByaWdodDogJycsXG4gICAgICAgICAgbGVmdDogJydcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbnMuc3VwcG9ydGVkKSB7XG4gICAgICAgICAgcmVzZXRTdHlsZXNbdHJhbnNpdGlvbnMucHJvcGVydHldID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJvZHkuY3NzKHJlc2V0U3R5bGVzKS51bmJpbmQodHJhbnNpdGlvbkVuZEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjbG9zZUJvZHknLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlQm9keSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5kaXNwbGFjZSkge1xuICAgICAgICAgIGlmIChoZWxwZXIudHJhbnNpdGlvbnMuc3VwcG9ydGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJvZHkuY3NzKHRoaXMuc2lkZSwgMCkub25lKHRyYW5zaXRpb25FbmRFdmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5vbkNsb3NlQm9keSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBib2R5QW5pbWF0aW9uID0gdGhpcy5nZXRBbmltYXRpb24oY2xvc2VBY3Rpb24sICdib2R5Jyk7XG5cbiAgICAgICAgICAgIHRoaXMuYm9keS5hbmltYXRlKGJvZHlBbmltYXRpb24sIHtcbiAgICAgICAgICAgICAgcXVldWU6IGZhbHNlLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5zcGVlZCxcbiAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VCb2R5KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ21vdmVCb2R5JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlQm9keShhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gb3BlbkFjdGlvbikge1xuICAgICAgICAgIHRoaXMub3BlbkJvZHkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNsb3NlQm9keSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25PcGVuTWVudScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuTWVudShjYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcblxuICAgICAgICBzaWRyU3RhdHVzLm1vdmluZyA9IGZhbHNlO1xuICAgICAgICBzaWRyU3RhdHVzLm9wZW5lZCA9IG5hbWU7XG5cbiAgICAgICAgdGhpcy5pdGVtLnVuYmluZCh0cmFuc2l0aW9uRW5kRXZlbnQpO1xuXG4gICAgICAgIHRoaXMuYm9keS5yZW1vdmVDbGFzcyhib2R5QW5pbWF0aW9uQ2xhc3MpLmFkZENsYXNzKHRoaXMub3BlbkNsYXNzKTtcblxuICAgICAgICB0aGlzLm9uT3BlbkVuZENhbGxiYWNrKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb3Blbk1lbnUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW5NZW51KGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuaXRlbTtcblxuICAgICAgICBpZiAoaGVscGVyLnRyYW5zaXRpb25zLnN1cHBvcnRlZCkge1xuICAgICAgICAgICRpdGVtLmNzcyh0aGlzLnNpZGUsIDApLm9uZSh0cmFuc2l0aW9uRW5kRXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5vbk9wZW5NZW51KGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWVudUFuaW1hdGlvbiA9IHRoaXMuZ2V0QW5pbWF0aW9uKG9wZW5BY3Rpb24sICdtZW51Jyk7XG5cbiAgICAgICAgICAkaXRlbS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKS5hbmltYXRlKG1lbnVBbmltYXRpb24sIHtcbiAgICAgICAgICAgIHF1ZXVlOiBmYWxzZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0aGlzLnNwZWVkLFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICBfdGhpczIub25PcGVuTWVudShjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdvbkNsb3NlTWVudScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbG9zZU1lbnUoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5pdGVtLmNzcyh7XG4gICAgICAgICAgbGVmdDogJycsXG4gICAgICAgICAgcmlnaHQ6ICcnXG4gICAgICAgIH0pLnVuYmluZCh0cmFuc2l0aW9uRW5kRXZlbnQpO1xuICAgICAgICAkJDIoJ2h0bWwnKS5jc3MoJ292ZXJmbG93LXgnLCAnJyk7XG5cbiAgICAgICAgc2lkclN0YXR1cy5tb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgc2lkclN0YXR1cy5vcGVuZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmJvZHkucmVtb3ZlQ2xhc3MoYm9keUFuaW1hdGlvbkNsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wZW5DbGFzcyk7XG5cbiAgICAgICAgdGhpcy5vbkNsb3NlRW5kQ2FsbGJhY2soKTtcblxuICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2sobmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjbG9zZU1lbnUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTWVudShjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbTtcblxuICAgICAgICBpZiAoaGVscGVyLnRyYW5zaXRpb25zLnN1cHBvcnRlZCkge1xuICAgICAgICAgIGl0ZW0uY3NzKHRoaXMuc2lkZSwgJycpLm9uZSh0cmFuc2l0aW9uRW5kRXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMy5vbkNsb3NlTWVudShjYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1lbnVBbmltYXRpb24gPSB0aGlzLmdldEFuaW1hdGlvbihjbG9zZUFjdGlvbiwgJ21lbnUnKTtcblxuICAgICAgICAgIGl0ZW0uYW5pbWF0ZShtZW51QW5pbWF0aW9uLCB7XG4gICAgICAgICAgICBxdWV1ZTogZmFsc2UsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5zcGVlZCxcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLm9uQ2xvc2VNZW51KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdtb3ZlTWVudScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZU1lbnUoYWN0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmJvZHkuYWRkQ2xhc3MoYm9keUFuaW1hdGlvbkNsYXNzKTtcblxuICAgICAgICBpZiAoYWN0aW9uID09PSBvcGVuQWN0aW9uKSB7XG4gICAgICAgICAgdGhpcy5vcGVuTWVudShjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jbG9zZU1lbnUoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnbW92ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZShhY3Rpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIExvY2sgc2lkclxuICAgICAgICBzaWRyU3RhdHVzLm1vdmluZyA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5wcmVwYXJlQm9keShhY3Rpb24pO1xuICAgICAgICB0aGlzLm1vdmVCb2R5KGFjdGlvbik7XG4gICAgICAgIHRoaXMubW92ZU1lbnUoYWN0aW9uLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb3BlbicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAvLyBDaGVjayBpZiBpcyBhbHJlYWR5IG9wZW5lZCBvciBtb3ZpbmdcbiAgICAgICAgaWYgKHNpZHJTdGF0dXMub3BlbmVkID09PSB0aGlzLm5hbWUgfHwgc2lkclN0YXR1cy5tb3ZpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhbm90aGVyIG1lbnUgb3BlbmVkIGNsb3NlIGZpcnN0XG4gICAgICAgIGlmIChzaWRyU3RhdHVzLm9wZW5lZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgYWxyZWFkeU9wZW5lZE1lbnUgPSBuZXcgTWVudShzaWRyU3RhdHVzLm9wZW5lZCk7XG5cbiAgICAgICAgICBhbHJlYWR5T3BlbmVkTWVudS5jbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczQub3BlbihjYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vdmUoJ29wZW4nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgLy8gb25PcGVuIGNhbGxiYWNrXG4gICAgICAgIHRoaXMub25PcGVuQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjbG9zZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoY2FsbGJhY2spIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXMgYWxyZWFkeSBjbG9zZWQgb3IgbW92aW5nXG4gICAgICAgIGlmIChzaWRyU3RhdHVzLm9wZW5lZCAhPT0gdGhpcy5uYW1lIHx8IHNpZHJTdGF0dXMubW92aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tb3ZlKCdjbG9zZScsIGNhbGxiYWNrKTtcblxuICAgICAgICAvLyBvbkNsb3NlIGNhbGxiYWNrXG4gICAgICAgIHRoaXMub25DbG9zZUNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAndG9nZ2xlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHNpZHJTdGF0dXMub3BlbmVkID09PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9wZW4oY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBNZW51O1xuICB9KCk7XG5cbiAgdmFyICQkMSA9IGpRdWVyeTtcblxuICBmdW5jdGlvbiBleGVjdXRlKGFjdGlvbiwgbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2lkciA9IG5ldyBNZW51KG5hbWUpO1xuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ29wZW4nOlxuICAgICAgICBzaWRyLm9wZW4oY2FsbGJhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Nsb3NlJzpcbiAgICAgICAgc2lkci5jbG9zZShjYWxsYmFjayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9nZ2xlJzpcbiAgICAgICAgc2lkci50b2dnbGUoY2FsbGJhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgICQkMS5lcnJvcignTWV0aG9kICcgKyBhY3Rpb24gKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zaWRyJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgJCA9IGpRdWVyeTtcbiAgdmFyIHB1YmxpY01ldGhvZHMgPSBbJ29wZW4nLCAnY2xvc2UnLCAndG9nZ2xlJ107XG4gIHZhciBtZXRob2ROYW1lO1xuICB2YXIgbWV0aG9kcyA9IHt9O1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gZ2V0TWV0aG9kKG1ldGhvZE5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBDaGVjayBhcmd1bWVudHNcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG5hbWU7XG4gICAgICAgIG5hbWUgPSAnc2lkcic7XG4gICAgICB9IGVsc2UgaWYgKCFuYW1lKSB7XG4gICAgICAgIG5hbWUgPSAnc2lkcic7XG4gICAgICB9XG5cbiAgICAgIGV4ZWN1dGUobWV0aG9kTmFtZSwgbmFtZSwgY2FsbGJhY2spO1xuICAgIH07XG4gIH07XG4gIGZvciAoaSA9IDA7IGkgPCBwdWJsaWNNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWV0aG9kTmFtZSA9IHB1YmxpY01ldGhvZHNbaV07XG4gICAgbWV0aG9kc1ttZXRob2ROYW1lXSA9IGdldE1ldGhvZChtZXRob2ROYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpZHIobWV0aG9kKSB7XG4gICAgaWYgKG1ldGhvZCA9PT0gJ3N0YXR1cycpIHtcbiAgICAgIHJldHVybiBzaWRyU3RhdHVzO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kc1ttZXRob2RdKSB7XG4gICAgICByZXR1cm4gbWV0aG9kc1ttZXRob2RdLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJyB8fCAhbWV0aG9kKSB7XG4gICAgICByZXR1cm4gbWV0aG9kcy50b2dnbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJC5lcnJvcignTWV0aG9kICcgKyBtZXRob2QgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zaWRyJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyICQkMyA9IGpRdWVyeTtcblxuICBmdW5jdGlvbiBmaWxsQ29udGVudCgkc2lkZU1lbnUsIHNldHRpbmdzKSB7XG4gICAgLy8gVGhlIG1lbnUgY29udGVudFxuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Muc291cmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgbmV3Q29udGVudCA9IHNldHRpbmdzLnNvdXJjZShuYW1lKTtcblxuICAgICAgJHNpZGVNZW51Lmh0bWwobmV3Q29udGVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0dGluZ3Muc291cmNlID09PSAnc3RyaW5nJyAmJiBoZWxwZXIuaXNVcmwoc2V0dGluZ3Muc291cmNlKSkge1xuICAgICAgJCQzLmdldChzZXR0aW5ncy5zb3VyY2UsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICRzaWRlTWVudS5odG1sKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0dGluZ3Muc291cmNlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGh0bWxDb250ZW50ID0gJycsXG4gICAgICAgICAgc2VsZWN0b3JzID0gc2V0dGluZ3Muc291cmNlLnNwbGl0KCcsJyk7XG5cbiAgICAgICQkMy5lYWNoKHNlbGVjdG9ycywgZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIGh0bWxDb250ZW50ICs9ICc8ZGl2IGNsYXNzPVwic2lkci1pbm5lclwiPicgKyAkJDMoZWxlbWVudCkuaHRtbCgpICsgJzwvZGl2Pic7XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVuYW1pbmcgaWRzIGFuZCBjbGFzc2VzXG4gICAgICBpZiAoc2V0dGluZ3MucmVuYW1pbmcpIHtcbiAgICAgICAgdmFyICRodG1sQ29udGVudCA9ICQkMygnPGRpdiAvPicpLmh0bWwoaHRtbENvbnRlbnQpO1xuXG4gICAgICAgICRodG1sQ29udGVudC5maW5kKCcqJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkJDMoZWxlbWVudCk7XG5cbiAgICAgICAgICBoZWxwZXIuYWRkUHJlZml4ZXMoJGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaHRtbENvbnRlbnQgPSAkaHRtbENvbnRlbnQuaHRtbCgpO1xuICAgICAgfVxuXG4gICAgICAkc2lkZU1lbnUuaHRtbChodG1sQ29udGVudCk7XG4gICAgfSBlbHNlIGlmIChzZXR0aW5ncy5zb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICQkMy5lcnJvcignSW52YWxpZCBTaWRyIFNvdXJjZScpO1xuICAgIH1cblxuICAgIHJldHVybiAkc2lkZU1lbnU7XG4gIH1cblxuICBmdW5jdGlvbiBmblNpZHIob3B0aW9ucykge1xuICAgIHZhciB0cmFuc2l0aW9ucyA9IGhlbHBlci50cmFuc2l0aW9ucyxcbiAgICAgICAgc2V0dGluZ3MgPSAkJDMuZXh0ZW5kKHtcbiAgICAgIG5hbWU6ICdzaWRyJywgLy8gTmFtZSBmb3IgdGhlICdzaWRyJ1xuICAgICAgc3BlZWQ6IDIwMCwgLy8gQWNjZXB0cyBzdGFuZGFyZCBqUXVlcnkgZWZmZWN0cyBzcGVlZHMgKGkuZS4gZmFzdCwgbm9ybWFsIG9yIG1pbGxpc2Vjb25kcylcbiAgICAgIHNpZGU6ICdsZWZ0JywgLy8gQWNjZXB0cyAnbGVmdCcgb3IgJ3JpZ2h0J1xuICAgICAgc291cmNlOiBudWxsLCAvLyBPdmVycmlkZSB0aGUgc291cmNlIG9mIHRoZSBjb250ZW50LlxuICAgICAgcmVuYW1pbmc6IHRydWUsIC8vIFRoZSBpZHMgYW5kIGNsYXNzZXMgd2lsbCBiZSBwcmVwZW5kZWQgd2l0aCBhIHByZWZpeCB3aGVuIGxvYWRpbmcgZXhpc3RlbnQgY29udGVudFxuICAgICAgYm9keTogJ2JvZHknLCAvLyBQYWdlIGNvbnRhaW5lciBzZWxlY3RvcixcbiAgICAgIGRpc3BsYWNlOiB0cnVlLCAvLyBEaXNwbGFjZSB0aGUgYm9keSBjb250ZW50IG9yIG5vdFxuICAgICAgdGltaW5nOiAnZWFzZScsIC8vIFRpbWluZyBmdW5jdGlvbiBmb3IgQ1NTIHRyYW5zaXRpb25zXG4gICAgICBtZXRob2Q6ICd0b2dnbGUnLCAvLyBUaGUgbWV0aG9kIHRvIGNhbGwgd2hlbiBlbGVtZW50IGlzIGNsaWNrZWRcbiAgICAgIGJpbmQ6ICd0b3VjaHN0YXJ0IGNsaWNrJywgLy8gVGhlIGV2ZW50KHMpIHRvIHRyaWdnZXIgdGhlIG1lbnVcbiAgICAgIG9uT3BlbjogZnVuY3Rpb24gb25PcGVuKCkge30sXG4gICAgICAvLyBDYWxsYmFjayB3aGVuIHNpZHIgc3RhcnQgb3BlbmluZ1xuICAgICAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICAgICAgLy8gQ2FsbGJhY2sgd2hlbiBzaWRyIHN0YXJ0IGNsb3NpbmdcbiAgICAgIG9uT3BlbkVuZDogZnVuY3Rpb24gb25PcGVuRW5kKCkge30sXG4gICAgICAvLyBDYWxsYmFjayB3aGVuIHNpZHIgZW5kIG9wZW5pbmdcbiAgICAgIG9uQ2xvc2VFbmQ6IGZ1bmN0aW9uIG9uQ2xvc2VFbmQoKSB7fSAvLyBDYWxsYmFjayB3aGVuIHNpZHIgZW5kIGNsb3NpbmdcblxuICAgIH0sIG9wdGlvbnMpLFxuICAgICAgICBuYW1lID0gc2V0dGluZ3MubmFtZSxcbiAgICAgICAgJHNpZGVNZW51ID0gJCQzKCcjJyArIG5hbWUpO1xuXG4gICAgLy8gSWYgdGhlIHNpZGUgbWVudSBkbyBub3QgZXhpc3QgY3JlYXRlIGl0XG4gICAgaWYgKCRzaWRlTWVudS5sZW5ndGggPT09IDApIHtcbiAgICAgICRzaWRlTWVudSA9ICQkMygnPGRpdiAvPicpLmF0dHIoJ2lkJywgbmFtZSkuYXBwZW5kVG8oJCQzKCdib2R5JykpO1xuICAgIH1cblxuICAgIC8vIEFkZCB0cmFuc2l0aW9uIHRvIG1lbnUgaWYgYXJlIHN1cHBvcnRlZFxuICAgIGlmICh0cmFuc2l0aW9ucy5zdXBwb3J0ZWQpIHtcbiAgICAgICRzaWRlTWVudS5jc3ModHJhbnNpdGlvbnMucHJvcGVydHksIHNldHRpbmdzLnNpZGUgKyAnICcgKyBzZXR0aW5ncy5zcGVlZCAvIDEwMDAgKyAncyAnICsgc2V0dGluZ3MudGltaW5nKTtcbiAgICB9XG5cbiAgICAvLyBBZGRpbmcgc3R5bGVzIGFuZCBvcHRpb25zXG4gICAgJHNpZGVNZW51LmFkZENsYXNzKCdzaWRyJykuYWRkQ2xhc3Moc2V0dGluZ3Muc2lkZSkuZGF0YSh7XG4gICAgICBzcGVlZDogc2V0dGluZ3Muc3BlZWQsXG4gICAgICBzaWRlOiBzZXR0aW5ncy5zaWRlLFxuICAgICAgYm9keTogc2V0dGluZ3MuYm9keSxcbiAgICAgIGRpc3BsYWNlOiBzZXR0aW5ncy5kaXNwbGFjZSxcbiAgICAgIHRpbWluZzogc2V0dGluZ3MudGltaW5nLFxuICAgICAgbWV0aG9kOiBzZXR0aW5ncy5tZXRob2QsXG4gICAgICBvbk9wZW46IHNldHRpbmdzLm9uT3BlbixcbiAgICAgIG9uQ2xvc2U6IHNldHRpbmdzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW5FbmQ6IHNldHRpbmdzLm9uT3BlbkVuZCxcbiAgICAgIG9uQ2xvc2VFbmQ6IHNldHRpbmdzLm9uQ2xvc2VFbmRcbiAgICB9KTtcblxuICAgICRzaWRlTWVudSA9IGZpbGxDb250ZW50KCRzaWRlTWVudSwgc2V0dGluZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkJDModGhpcyksXG4gICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ3NpZHInKSxcbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG5cbiAgICAgIC8vIElmIHRoZSBwbHVnaW4gaGFzbid0IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgc2lkclN0YXR1cy5tb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgc2lkclN0YXR1cy5vcGVuZWQgPSBmYWxzZTtcblxuICAgICAgICAkdGhpcy5kYXRhKCdzaWRyJywgbmFtZSk7XG5cbiAgICAgICAgJHRoaXMuYmluZChzZXR0aW5ncy5iaW5kLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgaWYgKCFmbGFnKSB7XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpZHIoc2V0dGluZ3MubWV0aG9kLCBuYW1lKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGpRdWVyeS5zaWRyID0gc2lkcjtcbiAgalF1ZXJ5LmZuLnNpZHIgPSBmblNpZHI7XG5cbn0oKSk7IiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQWpheE1vbml0b3IsIEJhciwgRG9jdW1lbnRNb25pdG9yLCBFbGVtZW50TW9uaXRvciwgRWxlbWVudFRyYWNrZXIsIEV2ZW50TGFnTW9uaXRvciwgRXZlbnRlZCwgRXZlbnRzLCBOb1RhcmdldEVycm9yLCBQYWNlLCBSZXF1ZXN0SW50ZXJjZXB0LCBTT1VSQ0VfS0VZUywgU2NhbGVyLCBTb2NrZXRSZXF1ZXN0VHJhY2tlciwgWEhSUmVxdWVzdFRyYWNrZXIsIGFuaW1hdGlvbiwgYXZnQW1wbGl0dWRlLCBiYXIsIGNhbmNlbEFuaW1hdGlvbiwgY2FuY2VsQW5pbWF0aW9uRnJhbWUsIGRlZmF1bHRPcHRpb25zLCBleHRlbmQsIGV4dGVuZE5hdGl2ZSwgZ2V0RnJvbURPTSwgZ2V0SW50ZXJjZXB0LCBoYW5kbGVQdXNoU3RhdGUsIGlnbm9yZVN0YWNrLCBpbml0LCBub3csIG9wdGlvbnMsIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgcmVzdWx0LCBydW5BbmltYXRpb24sIHNjYWxlcnMsIHNob3VsZElnbm9yZVVSTCwgc2hvdWxkVHJhY2ssIHNvdXJjZSwgc291cmNlcywgdW5pU2NhbGVyLCBfV2ViU29ja2V0LCBfWERvbWFpblJlcXVlc3QsIF9YTUxIdHRwUmVxdWVzdCwgX2ksIF9pbnRlcmNlcHQsIF9sZW4sIF9wdXNoU3RhdGUsIF9yZWYsIF9yZWYxLCBfcmVwbGFjZVN0YXRlLFxuICAgIF9fc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBfX2luZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjYXRjaHVwVGltZTogMTAwLFxuICAgIGluaXRpYWxSYXRlOiAuMDMsXG4gICAgbWluVGltZTogMjUwLFxuICAgIGdob3N0VGltZTogMTAwLFxuICAgIG1heFByb2dyZXNzUGVyRnJhbWU6IDIwLFxuICAgIGVhc2VGYWN0b3I6IDEuMjUsXG4gICAgc3RhcnRPblBhZ2VMb2FkOiB0cnVlLFxuICAgIHJlc3RhcnRPblB1c2hTdGF0ZTogdHJ1ZSxcbiAgICByZXN0YXJ0T25SZXF1ZXN0QWZ0ZXI6IDUwMCxcbiAgICB0YXJnZXQ6ICdib2R5JyxcbiAgICBlbGVtZW50czoge1xuICAgICAgY2hlY2tJbnRlcnZhbDogMTAwLFxuICAgICAgc2VsZWN0b3JzOiBbJ2JvZHknXVxuICAgIH0sXG4gICAgZXZlbnRMYWc6IHtcbiAgICAgIG1pblNhbXBsZXM6IDEwLFxuICAgICAgc2FtcGxlQ291bnQ6IDMsXG4gICAgICBsYWdUaHJlc2hvbGQ6IDNcbiAgICB9LFxuICAgIGFqYXg6IHtcbiAgICAgIHRyYWNrTWV0aG9kczogWydHRVQnXSxcbiAgICAgIHRyYWNrV2ViU29ja2V0czogdHJ1ZSxcbiAgICAgIGlnbm9yZVVSTHM6IFtdXG4gICAgfVxuICB9O1xuXG4gIG5vdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBfcmVmO1xuICAgIHJldHVybiAoX3JlZiA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwZXJmb3JtYW5jZSAhPT0gbnVsbCA/IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09IFwiZnVuY3Rpb25cIiA/IHBlcmZvcm1hbmNlLm5vdygpIDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsID8gX3JlZiA6ICsobmV3IERhdGUpO1xuICB9O1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgaWYgKHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PSBudWxsKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZuLCA1MCk7XG4gICAgfTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuICB9XG5cbiAgcnVuQW5pbWF0aW9uID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgbGFzdCwgdGljaztcbiAgICBsYXN0ID0gbm93KCk7XG4gICAgdGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRpZmY7XG4gICAgICBkaWZmID0gbm93KCkgLSBsYXN0O1xuICAgICAgaWYgKGRpZmYgPj0gMzMpIHtcbiAgICAgICAgbGFzdCA9IG5vdygpO1xuICAgICAgICByZXR1cm4gZm4oZGlmZiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCh0aWNrLCAzMyAtIGRpZmYpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRpY2soKTtcbiAgfTtcblxuICByZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncywga2V5LCBvYmo7XG4gICAgb2JqID0gYXJndW1lbnRzWzBdLCBrZXkgPSBhcmd1bWVudHNbMV0sIGFyZ3MgPSAzIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IFtdO1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XS5hcHBseShvYmosIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICB9O1xuXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXksIG91dCwgc291cmNlLCBzb3VyY2VzLCB2YWwsIF9pLCBfbGVuO1xuICAgIG91dCA9IGFyZ3VtZW50c1swXSwgc291cmNlcyA9IDIgPD0gYXJndW1lbnRzLmxlbmd0aCA/IF9fc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBzb3VyY2VzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VzW19pXTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKCFfX2hhc1Byb3AuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgIHZhbCA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIGlmICgob3V0W2tleV0gIT0gbnVsbCkgJiYgdHlwZW9mIG91dFtrZXldID09PSAnb2JqZWN0JyAmJiAodmFsICE9IG51bGwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBleHRlbmQob3V0W2tleV0sIHZhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFtrZXldID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIGF2Z0FtcGxpdHVkZSA9IGZ1bmN0aW9uKGFycikge1xuICAgIHZhciBjb3VudCwgc3VtLCB2LCBfaSwgX2xlbjtcbiAgICBzdW0gPSBjb3VudCA9IDA7XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBhcnIubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgIHYgPSBhcnJbX2ldO1xuICAgICAgc3VtICs9IE1hdGguYWJzKHYpO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIHN1bSAvIGNvdW50O1xuICB9O1xuXG4gIGdldEZyb21ET00gPSBmdW5jdGlvbihrZXksIGpzb24pIHtcbiAgICB2YXIgZGF0YSwgZSwgZWw7XG4gICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICBrZXkgPSAnb3B0aW9ucyc7XG4gICAgfVxuICAgIGlmIChqc29uID09IG51bGwpIHtcbiAgICAgIGpzb24gPSB0cnVlO1xuICAgIH1cbiAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1wYWNlLVwiICsga2V5ICsgXCJdXCIpO1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YSA9IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGFjZS1cIiArIGtleSk7XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgZSA9IF9lcnJvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsID8gY29uc29sZS5lcnJvcihcIkVycm9yIHBhcnNpbmcgaW5saW5lIHBhY2Ugb3B0aW9uc1wiLCBlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG5cbiAgRXZlbnRlZCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBFdmVudGVkKCkge31cblxuICAgIEV2ZW50ZWQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIsIGN0eCwgb25jZSkge1xuICAgICAgdmFyIF9iYXNlO1xuICAgICAgaWYgKG9uY2UgPT0gbnVsbCkge1xuICAgICAgICBvbmNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5iaW5kaW5ncyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICgoX2Jhc2UgPSB0aGlzLmJpbmRpbmdzKVtldmVudF0gPT0gbnVsbCkge1xuICAgICAgICBfYmFzZVtldmVudF0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgY3R4OiBjdHgsXG4gICAgICAgIG9uY2U6IG9uY2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBFdmVudGVkLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIsIGN0eCkge1xuICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnQsIGhhbmRsZXIsIGN0eCwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIEV2ZW50ZWQucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICB2YXIgaSwgX3JlZiwgX3Jlc3VsdHM7XG4gICAgICBpZiAoKChfcmVmID0gdGhpcy5iaW5kaW5ncykgIT0gbnVsbCA/IF9yZWZbZXZlbnRdIDogdm9pZCAwKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzLmJpbmRpbmdzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdzW2V2ZW50XVtpXS5oYW5kbGVyID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuYmluZGluZ3NbZXZlbnRdLnNwbGljZShpLCAxKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goaSsrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFdmVudGVkLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncywgY3R4LCBldmVudCwgaGFuZGxlciwgaSwgb25jZSwgX3JlZiwgX3JlZjEsIF9yZXN1bHRzO1xuICAgICAgZXZlbnQgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgICAgaWYgKChfcmVmID0gdGhpcy5iaW5kaW5ncykgIT0gbnVsbCA/IF9yZWZbZXZlbnRdIDogdm9pZCAwKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICAgIF9yZWYxID0gdGhpcy5iaW5kaW5nc1tldmVudF1baV0sIGhhbmRsZXIgPSBfcmVmMS5oYW5kbGVyLCBjdHggPSBfcmVmMS5jdHgsIG9uY2UgPSBfcmVmMS5vbmNlO1xuICAgICAgICAgIGhhbmRsZXIuYXBwbHkoY3R4ICE9IG51bGwgPyBjdHggOiB0aGlzLCBhcmdzKTtcbiAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKGkrKyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEV2ZW50ZWQ7XG5cbiAgfSkoKTtcblxuICBQYWNlID0gd2luZG93LlBhY2UgfHwge307XG5cbiAgd2luZG93LlBhY2UgPSBQYWNlO1xuXG4gIGV4dGVuZChQYWNlLCBFdmVudGVkLnByb3RvdHlwZSk7XG5cbiAgb3B0aW9ucyA9IFBhY2Uub3B0aW9ucyA9IGV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIHdpbmRvdy5wYWNlT3B0aW9ucywgZ2V0RnJvbURPTSgpKTtcblxuICBfcmVmID0gWydhamF4JywgJ2RvY3VtZW50JywgJ2V2ZW50TGFnJywgJ2VsZW1lbnRzJ107XG4gIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgIHNvdXJjZSA9IF9yZWZbX2ldO1xuICAgIGlmIChvcHRpb25zW3NvdXJjZV0gPT09IHRydWUpIHtcbiAgICAgIG9wdGlvbnNbc291cmNlXSA9IGRlZmF1bHRPcHRpb25zW3NvdXJjZV07XG4gICAgfVxuICB9XG5cbiAgTm9UYXJnZXRFcnJvciA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTm9UYXJnZXRFcnJvciwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIE5vVGFyZ2V0RXJyb3IoKSB7XG4gICAgICBfcmVmMSA9IE5vVGFyZ2V0RXJyb3IuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gX3JlZjE7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vVGFyZ2V0RXJyb3I7XG5cbiAgfSkoRXJyb3IpO1xuXG4gIEJhciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICB9XG5cbiAgICBCYXIucHJvdG90eXBlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0YXJnZXRFbGVtZW50O1xuICAgICAgaWYgKHRoaXMuZWwgPT0gbnVsbCkge1xuICAgICAgICB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgIGlmICghdGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBOb1RhcmdldEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5lbC5jbGFzc05hbWUgPSBcInBhY2UgcGFjZS1hY3RpdmVcIjtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKC9wYWNlLWRvbmUvZywgJycpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArPSAnIHBhY2UtcnVubmluZyc7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJwYWNlLXByb2dyZXNzXCI+XFxuICA8ZGl2IGNsYXNzPVwicGFjZS1wcm9ncmVzcy1pbm5lclwiPjwvZGl2PlxcbjwvZGl2PlxcbjxkaXYgY2xhc3M9XCJwYWNlLWFjdGl2aXR5XCI+PC9kaXY+JztcbiAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQuZmlyc3RDaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgdGFyZ2V0RWxlbWVudC5pbnNlcnRCZWZvcmUodGhpcy5lbCwgdGFyZ2V0RWxlbWVudC5maXJzdENoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5lbDtcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbDtcbiAgICAgIGVsID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZSgncGFjZS1hY3RpdmUnLCAnJyk7XG4gICAgICBlbC5jbGFzc05hbWUgKz0gJyBwYWNlLWluYWN0aXZlJztcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUucmVwbGFjZSgncGFjZS1ydW5uaW5nJywgJycpO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICs9ICcgcGFjZS1kb25lJztcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihwcm9nKSB7XG4gICAgICB0aGlzLnByb2dyZXNzID0gcHJvZztcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICAgIH07XG5cbiAgICBCYXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5nZXRFbGVtZW50KCkpO1xuICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgIE5vVGFyZ2V0RXJyb3IgPSBfZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5lbCA9IHZvaWQgMDtcbiAgICB9O1xuXG4gICAgQmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbCwga2V5LCBwcm9ncmVzc1N0ciwgdHJhbnNmb3JtLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy50YXJnZXQpID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZWwgPSB0aGlzLmdldEVsZW1lbnQoKTtcbiAgICAgIHRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyB0aGlzLnByb2dyZXNzICsgXCIlLCAwLCAwKVwiO1xuICAgICAgX3JlZjIgPSBbJ3dlYmtpdFRyYW5zZm9ybScsICdtc1RyYW5zZm9ybScsICd0cmFuc2Zvcm0nXTtcbiAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICBrZXkgPSBfcmVmMltfal07XG4gICAgICAgIGVsLmNoaWxkcmVuWzBdLnN0eWxlW2tleV0gPSB0cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMubGFzdFJlbmRlcmVkUHJvZ3Jlc3MgfHwgdGhpcy5sYXN0UmVuZGVyZWRQcm9ncmVzcyB8IDAgIT09IHRoaXMucHJvZ3Jlc3MgfCAwKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9ncmVzcy10ZXh0JywgXCJcIiArICh0aGlzLnByb2dyZXNzIHwgMCkgKyBcIiVcIik7XG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzID49IDEwMCkge1xuICAgICAgICAgIHByb2dyZXNzU3RyID0gJzk5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9ncmVzc1N0ciA9IHRoaXMucHJvZ3Jlc3MgPCAxMCA/IFwiMFwiIDogXCJcIjtcbiAgICAgICAgICBwcm9ncmVzc1N0ciArPSB0aGlzLnByb2dyZXNzIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBlbC5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3MnLCBcIlwiICsgcHJvZ3Jlc3NTdHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubGFzdFJlbmRlcmVkUHJvZ3Jlc3MgPSB0aGlzLnByb2dyZXNzO1xuICAgIH07XG5cbiAgICBCYXIucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzID49IDEwMDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhcjtcblxuICB9KSgpO1xuXG4gIEV2ZW50cyA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBFdmVudHMoKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzID0ge307XG4gICAgfVxuXG4gICAgRXZlbnRzLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gICAgICB2YXIgYmluZGluZywgX2osIF9sZW4xLCBfcmVmMiwgX3Jlc3VsdHM7XG4gICAgICBpZiAodGhpcy5iaW5kaW5nc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIF9yZWYyID0gdGhpcy5iaW5kaW5nc1tuYW1lXTtcbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgICAgYmluZGluZyA9IF9yZWYyW19qXTtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKGJpbmRpbmcuY2FsbCh0aGlzLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEV2ZW50cy5wcm90b3R5cGUub24gPSBmdW5jdGlvbihuYW1lLCBmbikge1xuICAgICAgdmFyIF9iYXNlO1xuICAgICAgaWYgKChfYmFzZSA9IHRoaXMuYmluZGluZ3MpW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgX2Jhc2VbbmFtZV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzW25hbWVdLnB1c2goZm4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gRXZlbnRzO1xuXG4gIH0pKCk7XG5cbiAgX1hNTEh0dHBSZXF1ZXN0ID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0O1xuXG4gIF9YRG9tYWluUmVxdWVzdCA9IHdpbmRvdy5YRG9tYWluUmVxdWVzdDtcblxuICBfV2ViU29ja2V0ID0gd2luZG93LldlYlNvY2tldDtcblxuICBleHRlbmROYXRpdmUgPSBmdW5jdGlvbih0bywgZnJvbSkge1xuICAgIHZhciBlLCBrZXksIF9yZXN1bHRzO1xuICAgIF9yZXN1bHRzID0gW107XG4gICAgZm9yIChrZXkgaW4gZnJvbS5wcm90b3R5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICgodG9ba2V5XSA9PSBudWxsKSAmJiB0eXBlb2YgZnJvbVtrZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLCBrZXksIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJvbS5wcm90b3R5cGVba2V5XTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godG9ba2V5XSA9IGZyb20ucHJvdG90eXBlW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgICBlID0gX2Vycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3Jlc3VsdHM7XG4gIH07XG5cbiAgaWdub3JlU3RhY2sgPSBbXTtcblxuICBQYWNlLmlnbm9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzLCBmbiwgcmV0O1xuICAgIGZuID0gYXJndW1lbnRzWzBdLCBhcmdzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICBpZ25vcmVTdGFjay51bnNoaWZ0KCdpZ25vcmUnKTtcbiAgICByZXQgPSBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICBpZ25vcmVTdGFjay5zaGlmdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgUGFjZS50cmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzLCBmbiwgcmV0O1xuICAgIGZuID0gYXJndW1lbnRzWzBdLCBhcmdzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICBpZ25vcmVTdGFjay51bnNoaWZ0KCd0cmFjaycpO1xuICAgIHJldCA9IGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIGlnbm9yZVN0YWNrLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBzaG91bGRUcmFjayA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBfcmVmMjtcbiAgICBpZiAobWV0aG9kID09IG51bGwpIHtcbiAgICAgIG1ldGhvZCA9ICdHRVQnO1xuICAgIH1cbiAgICBpZiAoaWdub3JlU3RhY2tbMF0gPT09ICd0cmFjaycpIHtcbiAgICAgIHJldHVybiAnZm9yY2UnO1xuICAgIH1cbiAgICBpZiAoIWlnbm9yZVN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLmFqYXgpIHtcbiAgICAgIGlmIChtZXRob2QgPT09ICdzb2NrZXQnICYmIG9wdGlvbnMuYWpheC50cmFja1dlYlNvY2tldHMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKF9yZWYyID0gbWV0aG9kLnRvVXBwZXJDYXNlKCksIF9faW5kZXhPZi5jYWxsKG9wdGlvbnMuYWpheC50cmFja01ldGhvZHMsIF9yZWYyKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUmVxdWVzdEludGVyY2VwdCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVxdWVzdEludGVyY2VwdCwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIFJlcXVlc3RJbnRlcmNlcHQoKSB7XG4gICAgICB2YXIgbW9uaXRvclhIUixcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgUmVxdWVzdEludGVyY2VwdC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIG1vbml0b3JYSFIgPSBmdW5jdGlvbihyZXEpIHtcbiAgICAgICAgdmFyIF9vcGVuO1xuICAgICAgICBfb3BlbiA9IHJlcS5vcGVuO1xuICAgICAgICByZXR1cm4gcmVxLm9wZW4gPSBmdW5jdGlvbih0eXBlLCB1cmwsIGFzeW5jKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFRyYWNrKHR5cGUpKSB7XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdyZXF1ZXN0Jywge1xuICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgcmVxdWVzdDogcmVxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9vcGVuLmFwcGx5KHJlcSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbihmbGFncykge1xuICAgICAgICB2YXIgcmVxO1xuICAgICAgICByZXEgPSBuZXcgX1hNTEh0dHBSZXF1ZXN0KGZsYWdzKTtcbiAgICAgICAgbW9uaXRvclhIUihyZXEpO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV4dGVuZE5hdGl2ZSh3aW5kb3cuWE1MSHR0cFJlcXVlc3QsIF9YTUxIdHRwUmVxdWVzdCk7XG4gICAgICB9IGNhdGNoIChfZXJyb3IpIHt9XG4gICAgICBpZiAoX1hEb21haW5SZXF1ZXN0ICE9IG51bGwpIHtcbiAgICAgICAgd2luZG93LlhEb21haW5SZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJlcTtcbiAgICAgICAgICByZXEgPSBuZXcgX1hEb21haW5SZXF1ZXN0O1xuICAgICAgICAgIG1vbml0b3JYSFIocmVxKTtcbiAgICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGV4dGVuZE5hdGl2ZSh3aW5kb3cuWERvbWFpblJlcXVlc3QsIF9YRG9tYWluUmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKF9lcnJvcikge31cbiAgICAgIH1cbiAgICAgIGlmICgoX1dlYlNvY2tldCAhPSBudWxsKSAmJiBvcHRpb25zLmFqYXgudHJhY2tXZWJTb2NrZXRzKSB7XG4gICAgICAgIHdpbmRvdy5XZWJTb2NrZXQgPSBmdW5jdGlvbih1cmwsIHByb3RvY29scykge1xuICAgICAgICAgIHZhciByZXE7XG4gICAgICAgICAgaWYgKHByb3RvY29scyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXEgPSBuZXcgX1dlYlNvY2tldCh1cmwsIHByb3RvY29scyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcSA9IG5ldyBfV2ViU29ja2V0KHVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRUcmFjaygnc29ja2V0JykpIHtcbiAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3JlcXVlc3QnLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdzb2NrZXQnLFxuICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgcHJvdG9jb2xzOiBwcm90b2NvbHMsXG4gICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXE7XG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZXh0ZW5kTmF0aXZlKHdpbmRvdy5XZWJTb2NrZXQsIF9XZWJTb2NrZXQpO1xuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHt9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlcXVlc3RJbnRlcmNlcHQ7XG5cbiAgfSkoRXZlbnRzKTtcblxuICBfaW50ZXJjZXB0ID0gbnVsbDtcblxuICBnZXRJbnRlcmNlcHQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2ludGVyY2VwdCA9PSBudWxsKSB7XG4gICAgICBfaW50ZXJjZXB0ID0gbmV3IFJlcXVlc3RJbnRlcmNlcHQ7XG4gICAgfVxuICAgIHJldHVybiBfaW50ZXJjZXB0O1xuICB9O1xuXG4gIHNob3VsZElnbm9yZVVSTCA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciBwYXR0ZXJuLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgIF9yZWYyID0gb3B0aW9ucy5hamF4Lmlnbm9yZVVSTHM7XG4gICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICBwYXR0ZXJuID0gX3JlZjJbX2pdO1xuICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodXJsLmluZGV4T2YocGF0dGVybikgIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLnRlc3QodXJsKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBnZXRJbnRlcmNlcHQoKS5vbigncmVxdWVzdCcsIGZ1bmN0aW9uKF9hcmcpIHtcbiAgICB2YXIgYWZ0ZXIsIGFyZ3MsIHJlcXVlc3QsIHR5cGUsIHVybDtcbiAgICB0eXBlID0gX2FyZy50eXBlLCByZXF1ZXN0ID0gX2FyZy5yZXF1ZXN0LCB1cmwgPSBfYXJnLnVybDtcbiAgICBpZiAoc2hvdWxkSWdub3JlVVJMKHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFQYWNlLnJ1bm5pbmcgJiYgKG9wdGlvbnMucmVzdGFydE9uUmVxdWVzdEFmdGVyICE9PSBmYWxzZSB8fCBzaG91bGRUcmFjayh0eXBlKSA9PT0gJ2ZvcmNlJykpIHtcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBhZnRlciA9IG9wdGlvbnMucmVzdGFydE9uUmVxdWVzdEFmdGVyIHx8IDA7XG4gICAgICBpZiAodHlwZW9mIGFmdGVyID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgYWZ0ZXIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGlsbEFjdGl2ZSwgX2osIF9sZW4xLCBfcmVmMiwgX3JlZjMsIF9yZXN1bHRzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3NvY2tldCcpIHtcbiAgICAgICAgICBzdGlsbEFjdGl2ZSA9IHJlcXVlc3QucmVhZHlTdGF0ZSA8IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RpbGxBY3RpdmUgPSAoMCA8IChfcmVmMiA9IHJlcXVlc3QucmVhZHlTdGF0ZSkgJiYgX3JlZjIgPCA0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RpbGxBY3RpdmUpIHtcbiAgICAgICAgICBQYWNlLnJlc3RhcnQoKTtcbiAgICAgICAgICBfcmVmMyA9IFBhY2Uuc291cmNlcztcbiAgICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYzLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgICAgc291cmNlID0gX3JlZjNbX2pdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFqYXhNb25pdG9yKSB7XG4gICAgICAgICAgICAgIHNvdXJjZS53YXRjaC5hcHBseShzb3VyY2UsIGFyZ3MpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgICB9XG4gICAgICB9LCBhZnRlcik7XG4gICAgfVxuICB9KTtcblxuICBBamF4TW9uaXRvciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBBamF4TW9uaXRvcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgICBnZXRJbnRlcmNlcHQoKS5vbigncmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMud2F0Y2guYXBwbHkoX3RoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBBamF4TW9uaXRvci5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbihfYXJnKSB7XG4gICAgICB2YXIgcmVxdWVzdCwgdHJhY2tlciwgdHlwZSwgdXJsO1xuICAgICAgdHlwZSA9IF9hcmcudHlwZSwgcmVxdWVzdCA9IF9hcmcucmVxdWVzdCwgdXJsID0gX2FyZy51cmw7XG4gICAgICBpZiAoc2hvdWxkSWdub3JlVVJMKHVybCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICdzb2NrZXQnKSB7XG4gICAgICAgIHRyYWNrZXIgPSBuZXcgU29ja2V0UmVxdWVzdFRyYWNrZXIocmVxdWVzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja2VyID0gbmV3IFhIUlJlcXVlc3RUcmFja2VyKHJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMucHVzaCh0cmFja2VyKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFqYXhNb25pdG9yO1xuXG4gIH0pKCk7XG5cbiAgWEhSUmVxdWVzdFRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gWEhSUmVxdWVzdFRyYWNrZXIocmVxdWVzdCkge1xuICAgICAgdmFyIGV2ZW50LCBzaXplLCBfaiwgX2xlbjEsIF9vbnJlYWR5c3RhdGVjaGFuZ2UsIF9yZWYyLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIGlmICh3aW5kb3cuUHJvZ3Jlc3NFdmVudCAhPSBudWxsKSB7XG4gICAgICAgIHNpemUgPSBudWxsO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgaWYgKGV2dC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSAxMDAgKiBldnQubG9hZGVkIC8gZXZ0LnRvdGFsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSBfdGhpcy5wcm9ncmVzcyArICgxMDAgLSBfdGhpcy5wcm9ncmVzcykgLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICBfcmVmMiA9IFsnbG9hZCcsICdhYm9ydCcsICd0aW1lb3V0JywgJ2Vycm9yJ107XG4gICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgIGV2ZW50ID0gX3JlZjJbX2pdO1xuICAgICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvZ3Jlc3MgPSAxMDA7XG4gICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfb25yZWFkeXN0YXRlY2hhbmdlID0gcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2U7XG4gICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIF9yZWYzO1xuICAgICAgICAgIGlmICgoX3JlZjMgPSByZXF1ZXN0LnJlYWR5U3RhdGUpID09PSAwIHx8IF9yZWYzID09PSA0KSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gMykge1xuICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3MgPSA1MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBfb25yZWFkeXN0YXRlY2hhbmdlID09PSBcImZ1bmN0aW9uXCIgPyBfb25yZWFkeXN0YXRlY2hhbmdlLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFhIUlJlcXVlc3RUcmFja2VyO1xuXG4gIH0pKCk7XG5cbiAgU29ja2V0UmVxdWVzdFRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gU29ja2V0UmVxdWVzdFRyYWNrZXIocmVxdWVzdCkge1xuICAgICAgdmFyIGV2ZW50LCBfaiwgX2xlbjEsIF9yZWYyLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIF9yZWYyID0gWydlcnJvcicsICdvcGVuJ107XG4gICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMi5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgZXZlbnQgPSBfcmVmMltfal07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnByb2dyZXNzID0gMTAwO1xuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFNvY2tldFJlcXVlc3RUcmFja2VyO1xuXG4gIH0pKCk7XG5cbiAgRWxlbWVudE1vbml0b3IgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudE1vbml0b3Iob3B0aW9ucykge1xuICAgICAgdmFyIHNlbGVjdG9yLCBfaiwgX2xlbjEsIF9yZWYyO1xuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgICBpZiAob3B0aW9ucy5zZWxlY3RvcnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdG9ycyA9IFtdO1xuICAgICAgfVxuICAgICAgX3JlZjIgPSBvcHRpb25zLnNlbGVjdG9ycztcbiAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICBzZWxlY3RvciA9IF9yZWYyW19qXTtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5wdXNoKG5ldyBFbGVtZW50VHJhY2tlcihzZWxlY3RvcikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBFbGVtZW50TW9uaXRvcjtcblxuICB9KSgpO1xuXG4gIEVsZW1lbnRUcmFja2VyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEVsZW1lbnRUcmFja2VyKHNlbGVjdG9yKSB7XG4gICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICAgIHRoaXMuY2hlY2soKTtcbiAgICB9XG5cbiAgICBFbGVtZW50VHJhY2tlci5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb25lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmNoZWNrKCk7XG4gICAgICAgIH0pLCBvcHRpb25zLmVsZW1lbnRzLmNoZWNrSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFbGVtZW50VHJhY2tlci5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3MgPSAxMDA7XG4gICAgfTtcblxuICAgIHJldHVybiBFbGVtZW50VHJhY2tlcjtcblxuICB9KSgpO1xuXG4gIERvY3VtZW50TW9uaXRvciA9IChmdW5jdGlvbigpIHtcbiAgICBEb2N1bWVudE1vbml0b3IucHJvdG90eXBlLnN0YXRlcyA9IHtcbiAgICAgIGxvYWRpbmc6IDAsXG4gICAgICBpbnRlcmFjdGl2ZTogNTAsXG4gICAgICBjb21wbGV0ZTogMTAwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIERvY3VtZW50TW9uaXRvcigpIHtcbiAgICAgIHZhciBfb25yZWFkeXN0YXRlY2hhbmdlLCBfcmVmMixcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IChfcmVmMiA9IHRoaXMuc3RhdGVzW2RvY3VtZW50LnJlYWR5U3RhdGVdKSAhPSBudWxsID8gX3JlZjIgOiAxMDA7XG4gICAgICBfb25yZWFkeXN0YXRlY2hhbmdlID0gZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlO1xuICAgICAgZG9jdW1lbnQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZXNbZG9jdW1lbnQucmVhZHlTdGF0ZV0gIT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzLnByb2dyZXNzID0gX3RoaXMuc3RhdGVzW2RvY3VtZW50LnJlYWR5U3RhdGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlb2YgX29ucmVhZHlzdGF0ZWNoYW5nZSA9PT0gXCJmdW5jdGlvblwiID8gX29ucmVhZHlzdGF0ZWNoYW5nZS5hcHBseShudWxsLCBhcmd1bWVudHMpIDogdm9pZCAwO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gRG9jdW1lbnRNb25pdG9yO1xuXG4gIH0pKCk7XG5cbiAgRXZlbnRMYWdNb25pdG9yID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEV2ZW50TGFnTW9uaXRvcigpIHtcbiAgICAgIHZhciBhdmcsIGludGVydmFsLCBsYXN0LCBwb2ludHMsIHNhbXBsZXMsXG4gICAgICAgIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgICAgYXZnID0gMDtcbiAgICAgIHNhbXBsZXMgPSBbXTtcbiAgICAgIHBvaW50cyA9IDA7XG4gICAgICBsYXN0ID0gbm93KCk7XG4gICAgICBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlmZjtcbiAgICAgICAgZGlmZiA9IG5vdygpIC0gbGFzdCAtIDUwO1xuICAgICAgICBsYXN0ID0gbm93KCk7XG4gICAgICAgIHNhbXBsZXMucHVzaChkaWZmKTtcbiAgICAgICAgaWYgKHNhbXBsZXMubGVuZ3RoID4gb3B0aW9ucy5ldmVudExhZy5zYW1wbGVDb3VudCkge1xuICAgICAgICAgIHNhbXBsZXMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICBhdmcgPSBhdmdBbXBsaXR1ZGUoc2FtcGxlcyk7XG4gICAgICAgIGlmICgrK3BvaW50cyA+PSBvcHRpb25zLmV2ZW50TGFnLm1pblNhbXBsZXMgJiYgYXZnIDwgb3B0aW9ucy5ldmVudExhZy5sYWdUaHJlc2hvbGQpIHtcbiAgICAgICAgICBfdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnByb2dyZXNzID0gMTAwICogKDMgLyAoYXZnICsgMykpO1xuICAgICAgICB9XG4gICAgICB9LCA1MCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEV2ZW50TGFnTW9uaXRvcjtcblxuICB9KSgpO1xuXG4gIFNjYWxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBTY2FsZXIoc291cmNlKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRoaXMubGFzdCA9IHRoaXMuc2luY2VMYXN0VXBkYXRlID0gMDtcbiAgICAgIHRoaXMucmF0ZSA9IG9wdGlvbnMuaW5pdGlhbFJhdGU7XG4gICAgICB0aGlzLmNhdGNodXAgPSAwO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMubGFzdFByb2dyZXNzID0gMDtcbiAgICAgIGlmICh0aGlzLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSByZXN1bHQodGhpcy5zb3VyY2UsICdwcm9ncmVzcycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNjYWxlci5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKGZyYW1lVGltZSwgdmFsKSB7XG4gICAgICB2YXIgc2NhbGluZztcbiAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICB2YWwgPSByZXN1bHQodGhpcy5zb3VyY2UsICdwcm9ncmVzcycpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA+PSAxMDApIHtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWwgPT09IHRoaXMubGFzdCkge1xuICAgICAgICB0aGlzLnNpbmNlTGFzdFVwZGF0ZSArPSBmcmFtZVRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5zaW5jZUxhc3RVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLnJhdGUgPSAodmFsIC0gdGhpcy5sYXN0KSAvIHRoaXMuc2luY2VMYXN0VXBkYXRlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2F0Y2h1cCA9ICh2YWwgLSB0aGlzLnByb2dyZXNzKSAvIG9wdGlvbnMuY2F0Y2h1cFRpbWU7XG4gICAgICAgIHRoaXMuc2luY2VMYXN0VXBkYXRlID0gMDtcbiAgICAgICAgdGhpcy5sYXN0ID0gdmFsO1xuICAgICAgfVxuICAgICAgaWYgKHZhbCA+IHRoaXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgdGhpcy5wcm9ncmVzcyArPSB0aGlzLmNhdGNodXAgKiBmcmFtZVRpbWU7XG4gICAgICB9XG4gICAgICBzY2FsaW5nID0gMSAtIE1hdGgucG93KHRoaXMucHJvZ3Jlc3MgLyAxMDAsIG9wdGlvbnMuZWFzZUZhY3Rvcik7XG4gICAgICB0aGlzLnByb2dyZXNzICs9IHNjYWxpbmcgKiB0aGlzLnJhdGUgKiBmcmFtZVRpbWU7XG4gICAgICB0aGlzLnByb2dyZXNzID0gTWF0aC5taW4odGhpcy5sYXN0UHJvZ3Jlc3MgKyBvcHRpb25zLm1heFByb2dyZXNzUGVyRnJhbWUsIHRoaXMucHJvZ3Jlc3MpO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IE1hdGgubWF4KDAsIHRoaXMucHJvZ3Jlc3MpO1xuICAgICAgdGhpcy5wcm9ncmVzcyA9IE1hdGgubWluKDEwMCwgdGhpcy5wcm9ncmVzcyk7XG4gICAgICB0aGlzLmxhc3RQcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3M7XG4gICAgICByZXR1cm4gdGhpcy5wcm9ncmVzcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNjYWxlcjtcblxuICB9KSgpO1xuXG4gIHNvdXJjZXMgPSBudWxsO1xuXG4gIHNjYWxlcnMgPSBudWxsO1xuXG4gIGJhciA9IG51bGw7XG5cbiAgdW5pU2NhbGVyID0gbnVsbDtcblxuICBhbmltYXRpb24gPSBudWxsO1xuXG4gIGNhbmNlbEFuaW1hdGlvbiA9IG51bGw7XG5cbiAgUGFjZS5ydW5uaW5nID0gZmFsc2U7XG5cbiAgaGFuZGxlUHVzaFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG9wdGlvbnMucmVzdGFydE9uUHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gUGFjZS5yZXN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgIT0gbnVsbCkge1xuICAgIF9wdXNoU3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGU7XG4gICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVQdXNoU3RhdGUoKTtcbiAgICAgIHJldHVybiBfcHVzaFN0YXRlLmFwcGx5KHdpbmRvdy5oaXN0b3J5LCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAod2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlICE9IG51bGwpIHtcbiAgICBfcmVwbGFjZVN0YXRlID0gd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlUHVzaFN0YXRlKCk7XG4gICAgICByZXR1cm4gX3JlcGxhY2VTdGF0ZS5hcHBseSh3aW5kb3cuaGlzdG9yeSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgU09VUkNFX0tFWVMgPSB7XG4gICAgYWpheDogQWpheE1vbml0b3IsXG4gICAgZWxlbWVudHM6IEVsZW1lbnRNb25pdG9yLFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE1vbml0b3IsXG4gICAgZXZlbnRMYWc6IEV2ZW50TGFnTW9uaXRvclxuICB9O1xuXG4gIChpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUsIF9qLCBfaywgX2xlbjEsIF9sZW4yLCBfcmVmMiwgX3JlZjMsIF9yZWY0O1xuICAgIFBhY2Uuc291cmNlcyA9IHNvdXJjZXMgPSBbXTtcbiAgICBfcmVmMiA9IFsnYWpheCcsICdlbGVtZW50cycsICdkb2N1bWVudCcsICdldmVudExhZyddO1xuICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYyLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgdHlwZSA9IF9yZWYyW19qXTtcbiAgICAgIGlmIChvcHRpb25zW3R5cGVdICE9PSBmYWxzZSkge1xuICAgICAgICBzb3VyY2VzLnB1c2gobmV3IFNPVVJDRV9LRVlTW3R5cGVdKG9wdGlvbnNbdHlwZV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgX3JlZjQgPSAoX3JlZjMgPSBvcHRpb25zLmV4dHJhU291cmNlcykgIT0gbnVsbCA/IF9yZWYzIDogW107XG4gICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjQubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7XG4gICAgICBzb3VyY2UgPSBfcmVmNFtfa107XG4gICAgICBzb3VyY2VzLnB1c2gobmV3IHNvdXJjZShvcHRpb25zKSk7XG4gICAgfVxuICAgIFBhY2UuYmFyID0gYmFyID0gbmV3IEJhcjtcbiAgICBzY2FsZXJzID0gW107XG4gICAgcmV0dXJuIHVuaVNjYWxlciA9IG5ldyBTY2FsZXI7XG4gIH0pKCk7XG5cbiAgUGFjZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgUGFjZS50cmlnZ2VyKCdzdG9wJyk7XG4gICAgUGFjZS5ydW5uaW5nID0gZmFsc2U7XG4gICAgYmFyLmRlc3Ryb3koKTtcbiAgICBjYW5jZWxBbmltYXRpb24gPSB0cnVlO1xuICAgIGlmIChhbmltYXRpb24gIT0gbnVsbCkge1xuICAgICAgaWYgKHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgICBhbmltYXRpb24gPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdCgpO1xuICB9O1xuXG4gIFBhY2UucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIFBhY2UudHJpZ2dlcigncmVzdGFydCcpO1xuICAgIFBhY2Uuc3RvcCgpO1xuICAgIHJldHVybiBQYWNlLnN0YXJ0KCk7XG4gIH07XG5cbiAgUGFjZS5nbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydDtcbiAgICBQYWNlLnJ1bm5pbmcgPSB0cnVlO1xuICAgIGJhci5yZW5kZXIoKTtcbiAgICBzdGFydCA9IG5vdygpO1xuICAgIGNhbmNlbEFuaW1hdGlvbiA9IGZhbHNlO1xuICAgIHJldHVybiBhbmltYXRpb24gPSBydW5BbmltYXRpb24oZnVuY3Rpb24oZnJhbWVUaW1lLCBlbnF1ZXVlTmV4dEZyYW1lKSB7XG4gICAgICB2YXIgYXZnLCBjb3VudCwgZG9uZSwgZWxlbWVudCwgZWxlbWVudHMsIGksIGosIHJlbWFpbmluZywgc2NhbGVyLCBzY2FsZXJMaXN0LCBzdW0sIF9qLCBfaywgX2xlbjEsIF9sZW4yLCBfcmVmMjtcbiAgICAgIHJlbWFpbmluZyA9IDEwMCAtIGJhci5wcm9ncmVzcztcbiAgICAgIGNvdW50ID0gc3VtID0gMDtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChpID0gX2ogPSAwLCBfbGVuMSA9IHNvdXJjZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBpID0gKytfaikge1xuICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICBzY2FsZXJMaXN0ID0gc2NhbGVyc1tpXSAhPSBudWxsID8gc2NhbGVyc1tpXSA6IHNjYWxlcnNbaV0gPSBbXTtcbiAgICAgICAgZWxlbWVudHMgPSAoX3JlZjIgPSBzb3VyY2UuZWxlbWVudHMpICE9IG51bGwgPyBfcmVmMiA6IFtzb3VyY2VdO1xuICAgICAgICBmb3IgKGogPSBfayA9IDAsIF9sZW4yID0gZWxlbWVudHMubGVuZ3RoOyBfayA8IF9sZW4yOyBqID0gKytfaykge1xuICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50c1tqXTtcbiAgICAgICAgICBzY2FsZXIgPSBzY2FsZXJMaXN0W2pdICE9IG51bGwgPyBzY2FsZXJMaXN0W2pdIDogc2NhbGVyTGlzdFtqXSA9IG5ldyBTY2FsZXIoZWxlbWVudCk7XG4gICAgICAgICAgZG9uZSAmPSBzY2FsZXIuZG9uZTtcbiAgICAgICAgICBpZiAoc2NhbGVyLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIHN1bSArPSBzY2FsZXIudGljayhmcmFtZVRpbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhdmcgPSBzdW0gLyBjb3VudDtcbiAgICAgIGJhci51cGRhdGUodW5pU2NhbGVyLnRpY2soZnJhbWVUaW1lLCBhdmcpKTtcbiAgICAgIGlmIChiYXIuZG9uZSgpIHx8IGRvbmUgfHwgY2FuY2VsQW5pbWF0aW9uKSB7XG4gICAgICAgIGJhci51cGRhdGUoMTAwKTtcbiAgICAgICAgUGFjZS50cmlnZ2VyKCdkb25lJyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGJhci5maW5pc2goKTtcbiAgICAgICAgICBQYWNlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gUGFjZS50cmlnZ2VyKCdoaWRlJyk7XG4gICAgICAgIH0sIE1hdGgubWF4KG9wdGlvbnMuZ2hvc3RUaW1lLCBNYXRoLm1heChvcHRpb25zLm1pblRpbWUgLSAobm93KCkgLSBzdGFydCksIDApKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZW5xdWV1ZU5leHRGcmFtZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFBhY2Uuc3RhcnQgPSBmdW5jdGlvbihfb3B0aW9ucykge1xuICAgIGV4dGVuZChvcHRpb25zLCBfb3B0aW9ucyk7XG4gICAgUGFjZS5ydW5uaW5nID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgYmFyLnJlbmRlcigpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgTm9UYXJnZXRFcnJvciA9IF9lcnJvcjtcbiAgICB9XG4gICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFjZScpKSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dChQYWNlLnN0YXJ0LCA1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFBhY2UudHJpZ2dlcignc3RhcnQnKTtcbiAgICAgIHJldHVybiBQYWNlLmdvKCk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydwYWNlJ10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFBhY2U7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBQYWNlO1xuICB9IGVsc2Uge1xuICAgIGlmIChvcHRpb25zLnN0YXJ0T25QYWdlTG9hZCkge1xuICAgICAgUGFjZS5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG59KS5jYWxsKHRoaXMpO1xuIiwiLyohXG4qIFRhYmxlU29ydGVyIChGT1JLKSAyLjE4LjMgbWluIC0gQ2xpZW50LXNpZGUgdGFibGUgc29ydGluZyB3aXRoIGVhc2UhXG4qIENvcHlyaWdodCAoYykgMjAwNyBDaHJpc3RpYW4gQmFjaDsgZm9yayBtYWludGFpbmVkIGJ5IFJvYiBHYXJyaXNvblxuKi9cbiFmdW5jdGlvbihoKXtoLmV4dGVuZCh7dGFibGVzb3J0ZXI6bmV3IGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZigpe3ZhciBiPWFyZ3VtZW50c1swXSxhPTE8YXJndW1lbnRzLmxlbmd0aD9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOmI7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUubG9nKWNvbnNvbGVbL2Vycm9yL2kudGVzdChiKT9cImVycm9yXCI6L3dhcm4vaS50ZXN0KGIpP1wid2FyblwiOlwibG9nXCJdKGEpO2Vsc2UgYWxlcnQoYSl9ZnVuY3Rpb24gdShiLGEpe2YoYitcIiAoXCIrKChuZXcgRGF0ZSkuZ2V0VGltZSgpLWEuZ2V0VGltZSgpKStcIm1zKVwiKX1mdW5jdGlvbiBtKGIpe2Zvcih2YXIgYSBpbiBiKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHQoYixhLGMpe2lmKCFhKXJldHVyblwiXCI7dmFyIGUsZD1iLmNvbmZpZyxsPWQudGV4dEV4dHJhY3Rpb258fFwiXCIsZj1cIlwiLGY9XCJiYXNpY1wiPT09bD9oKGEpLmF0dHIoZC50ZXh0QXR0cmlidXRlKXx8IGEudGV4dENvbnRlbnR8fGEuaW5uZXJUZXh0fHxoKGEpLnRleHQoKXx8XCJcIjpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbD9sKGEsYixjKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YoZT1nLmdldENvbHVtbkRhdGEoYixsLGMpKT9lKGEsYixjKTphLnRleHRDb250ZW50fHxhLmlubmVyVGV4dHx8aChhKS50ZXh0KCl8fFwiXCI7cmV0dXJuIGgudHJpbShmKX1mdW5jdGlvbiBxKGIpe3ZhciBhLGMsZT1iLmNvbmZpZyxkPWUuJHRib2RpZXM9ZS4kdGFibGUuY2hpbGRyZW4oXCJ0Ym9keTpub3QoLlwiK2UuY3NzSW5mb0Jsb2NrK1wiKVwiKSxsLHYsayxuLHAsdyxtLHIscyxEPTAseT1cIlwiLHo9ZC5sZW5ndGg7aWYoMD09PXopcmV0dXJuIGUuZGVidWc/ZihcIldhcm5pbmc6ICpFbXB0eSB0YWJsZSEqIE5vdCBidWlsZGluZyBhIHBhcnNlciBjYWNoZVwiKTpcIlwiO2UuZGVidWcmJihzPW5ldyBEYXRlLGYoXCJEZXRlY3RpbmcgcGFyc2VycyBmb3IgZWFjaCBjb2x1bW5cIikpO2E9W107Zm9yKGM9W107RDx6Oyl7bD1kW0RdLnJvd3M7IGlmKGxbRF0pZm9yKHY9ZS5jb2x1bW5zLGs9MDtrPHY7aysrKXtuPWUuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInK2srJ1wiXTpsYXN0Jyk7cD1nLmdldENvbHVtbkRhdGEoYixlLmhlYWRlcnMsayk7cj1nLmdldFBhcnNlckJ5SWQoZy5nZXREYXRhKG4scCxcImV4dHJhY3RvclwiKSk7bT1nLmdldFBhcnNlckJ5SWQoZy5nZXREYXRhKG4scCxcInNvcnRlclwiKSk7dz1cImZhbHNlXCI9PT1nLmdldERhdGEobixwLFwicGFyc2VyXCIpO2UuZW1wdGllc1trXT0oZy5nZXREYXRhKG4scCxcImVtcHR5XCIpfHxlLmVtcHR5VG98fChlLmVtcHR5VG9Cb3R0b20/XCJib3R0b21cIjpcInRvcFwiKSkudG9Mb3dlckNhc2UoKTtlLnN0cmluZ3Nba109KGcuZ2V0RGF0YShuLHAsXCJzdHJpbmdcIil8fGUuc3RyaW5nVG98fFwibWF4XCIpLnRvTG93ZXJDYXNlKCk7dyYmKG09Zy5nZXRQYXJzZXJCeUlkKFwibm8tcGFyc2VyXCIpKTtyfHwocj0hMSk7aWYoIW0pYTp7bj1iO3A9bDt3PS0xO209aztmb3IodmFyIEM9dm9pZCAwLCBMPXZvaWQgMCxNPWcucGFyc2Vycy5sZW5ndGgseD0hMSxBPVwiXCIsQz0hMDtcIlwiPT09QSYmQzspdysrLHBbd10/KHg9cFt3XS5jZWxsc1ttXSxBPXQobix4LG0pLEw9aCh4KSxuLmNvbmZpZy5kZWJ1ZyYmZihcIkNoZWNraW5nIGlmIHZhbHVlIHdhcyBlbXB0eSBvbiByb3cgXCIrdytcIiwgY29sdW1uOiBcIittKyc6IFwiJytBKydcIicpKTpDPSExO2Zvcig7MDw9LS1NOylpZigoQz1nLnBhcnNlcnNbTV0pJiZcInRleHRcIiE9PUMuaWQmJkMuaXMmJkMuaXMoQSxuLHgsTCkpe209QzticmVhayBhfW09Zy5nZXRQYXJzZXJCeUlkKFwidGV4dFwiKX1lLmRlYnVnJiYoeSs9XCJjb2x1bW46XCIraytcIjsgZXh0cmFjdG9yOlwiK3IuaWQrXCI7IHBhcnNlcjpcIittLmlkK1wiOyBzdHJpbmc6XCIrZS5zdHJpbmdzW2tdK1wiOyBlbXB0eTogXCIrZS5lbXB0aWVzW2tdK1wiXFxuXCIpO2Nba109bTthW2tdPXJ9RCs9Yy5sZW5ndGg/ejoxfWUuZGVidWcmJihmKHk/eTpcIk5vIHBhcnNlcnMgZGV0ZWN0ZWRcIiksdShcIkNvbXBsZXRlZCBkZXRlY3RpbmcgcGFyc2Vyc1wiLCBzKSk7ZS5wYXJzZXJzPWM7ZS5leHRyYWN0b3JzPWF9ZnVuY3Rpb24geihiKXt2YXIgYSxjLGUsZCxsLHYsayxuLHAsbSxCLHI9Yi5jb25maWcscz1yLiR0YWJsZS5jaGlsZHJlbihcInRib2R5XCIpLHE9ci5leHRyYWN0b3JzLHk9ci5wYXJzZXJzO3IuY2FjaGU9e307ci50b3RhbFJvd3M9MDtpZigheSlyZXR1cm4gci5kZWJ1Zz9mKFwiV2FybmluZzogKkVtcHR5IHRhYmxlISogTm90IGJ1aWxkaW5nIGEgY2FjaGVcIik6XCJcIjtyLmRlYnVnJiYobj1uZXcgRGF0ZSk7ci5zaG93UHJvY2Vzc2luZyYmZy5pc1Byb2Nlc3NpbmcoYiwhMCk7Zm9yKGw9MDtsPHMubGVuZ3RoO2wrKylpZihCPVtdLGE9ci5jYWNoZVtsXT17bm9ybWFsaXplZDpbXX0sIXMuZXEobCkuaGFzQ2xhc3Moci5jc3NJbmZvQmxvY2spKXtwPXNbbF0mJnNbbF0ucm93cy5sZW5ndGh8fDA7Zm9yKGU9MDtlPHA7KytlKWlmKG09e2NoaWxkOltdfSx2PWgoc1tsXS5yb3dzW2VdKSxrPVtdLHYuaGFzQ2xhc3Moci5jc3NDaGlsZFJvdykmJiAwIT09ZSljPWEubm9ybWFsaXplZC5sZW5ndGgtMSxhLm5vcm1hbGl6ZWRbY11bci5jb2x1bW5zXS4kcm93PWEubm9ybWFsaXplZFtjXVtyLmNvbHVtbnNdLiRyb3cuYWRkKHYpLHYucHJldigpLmhhc0NsYXNzKHIuY3NzQ2hpbGRSb3cpfHx2LnByZXYoKS5hZGRDbGFzcyhnLmNzcy5jc3NIYXNDaGlsZCksbS5jaGlsZFtjXT1oLnRyaW0odlswXS50ZXh0Q29udGVudHx8dlswXS5pbm5lclRleHR8fHYudGV4dCgpfHxcIlwiKTtlbHNle20uJHJvdz12O20ub3JkZXI9ZTtmb3IoZD0wO2Q8ci5jb2x1bW5zOysrZClcInVuZGVmaW5lZFwiPT09dHlwZW9mIHlbZF0/ci5kZWJ1ZyYmZihcIk5vIHBhcnNlciBmb3VuZCBmb3IgY2VsbDpcIix2WzBdLmNlbGxzW2RdLFwiZG9lcyBpdCBoYXZlIGEgaGVhZGVyP1wiKTooYz10KGIsdlswXS5jZWxsc1tkXSxkKSxjPVwidW5kZWZpbmVkXCI9PT10eXBlb2YgcVtkXS5pZD9jOnFbZF0uZm9ybWF0KGMsYix2WzBdLmNlbGxzW2RdLGQpLGM9XCJuby1wYXJzZXJcIj09PXlbZF0uaWQ/IFwiXCI6eVtkXS5mb3JtYXQoYyxiLHZbMF0uY2VsbHNbZF0sZCksay5wdXNoKHIuaWdub3JlQ2FzZSYmXCJzdHJpbmdcIj09PXR5cGVvZiBjP2MudG9Mb3dlckNhc2UoKTpjKSxcIm51bWVyaWNcIj09PSh5W2RdLnR5cGV8fFwiXCIpLnRvTG93ZXJDYXNlKCkmJihCW2RdPU1hdGgubWF4KE1hdGguYWJzKGMpfHwwLEJbZF18fDApKSk7a1tyLmNvbHVtbnNdPW07YS5ub3JtYWxpemVkLnB1c2goayl9YS5jb2xNYXg9QjtyLnRvdGFsUm93cys9YS5ub3JtYWxpemVkLmxlbmd0aH1yLnNob3dQcm9jZXNzaW5nJiZnLmlzUHJvY2Vzc2luZyhiKTtyLmRlYnVnJiZ1KFwiQnVpbGRpbmcgY2FjaGUgZm9yIFwiK3ArXCIgcm93c1wiLG4pfWZ1bmN0aW9uIEEoYixhKXt2YXIgYz1iLmNvbmZpZyxlPWMud2lkZ2V0T3B0aW9ucyxkPWIudEJvZGllcyxsPVtdLGY9Yy5jYWNoZSxrLG4scCx3LHEscjtpZihtKGYpKXJldHVybiBjLmFwcGVuZGVyP2MuYXBwZW5kZXIoYixsKTpiLmlzVXBkYXRpbmc/Yy4kdGFibGUudHJpZ2dlcihcInVwZGF0ZUNvbXBsZXRlXCIsIGIpOlwiXCI7Yy5kZWJ1ZyYmKHI9bmV3IERhdGUpO2ZvcihxPTA7cTxkLmxlbmd0aDtxKyspaWYoaz1oKGRbcV0pLGsubGVuZ3RoJiYhay5oYXNDbGFzcyhjLmNzc0luZm9CbG9jaykpe3A9Zy5wcm9jZXNzVGJvZHkoYixrLCEwKTtrPWZbcV0ubm9ybWFsaXplZDtuPWsubGVuZ3RoO2Zvcih3PTA7dzxuO3crKylsLnB1c2goa1t3XVtjLmNvbHVtbnNdLiRyb3cpLGMuYXBwZW5kZXImJighYy5wYWdlcnx8Yy5wYWdlci5yZW1vdmVSb3dzJiZlLnBhZ2VyX3JlbW92ZVJvd3N8fGMucGFnZXIuYWpheCl8fHAuYXBwZW5kKGtbd11bYy5jb2x1bW5zXS4kcm93KTtnLnByb2Nlc3NUYm9keShiLHAsITEpfWMuYXBwZW5kZXImJmMuYXBwZW5kZXIoYixsKTtjLmRlYnVnJiZ1KFwiUmVidWlsdCB0YWJsZVwiLHIpO2F8fGMuYXBwZW5kZXJ8fGcuYXBwbHlXaWRnZXQoYik7Yi5pc1VwZGF0aW5nJiZjLiR0YWJsZS50cmlnZ2VyKFwidXBkYXRlQ29tcGxldGVcIixiKX1mdW5jdGlvbiBGKGIpe3JldHVybi9eZC9pLnRlc3QoYil8fCAxPT09Yn1mdW5jdGlvbiBFKGIpe3ZhciBhLGMsZSxkLGwsdixrLG49Yi5jb25maWc7bi5oZWFkZXJMaXN0PVtdO24uaGVhZGVyQ29udGVudD1bXTtuLmRlYnVnJiYoaz1uZXcgRGF0ZSk7bi5jb2x1bW5zPWcuY29tcHV0ZUNvbHVtbkluZGV4KG4uJHRhYmxlLmNoaWxkcmVuKFwidGhlYWQsIHRmb290XCIpLmNoaWxkcmVuKFwidHJcIikpO2Q9bi5jc3NJY29uPyc8aSBjbGFzcz1cIicrKG4uY3NzSWNvbj09PWcuY3NzLmljb24/Zy5jc3MuaWNvbjpuLmNzc0ljb24rXCIgXCIrZy5jc3MuaWNvbikrJ1wiPjwvaT4nOlwiXCI7bi4kaGVhZGVycz1oKGIpLmZpbmQobi5zZWxlY3RvckhlYWRlcnMpLmVhY2goZnVuY3Rpb24oayl7Yz1oKHRoaXMpO2E9Zy5nZXRDb2x1bW5EYXRhKGIsbi5oZWFkZXJzLGssITApO24uaGVhZGVyQ29udGVudFtrXT1oKHRoaXMpLmh0bWwoKTtcIlwiIT09bi5oZWFkZXJUZW1wbGF0ZSYmKGw9bi5oZWFkZXJUZW1wbGF0ZS5yZXBsYWNlKC9cXHtjb250ZW50XFx9L2csaCh0aGlzKS5odG1sKCkpLnJlcGxhY2UoL1xce2ljb25cXH0vZywgZCksbi5vblJlbmRlclRlbXBsYXRlJiYoZT1uLm9uUmVuZGVyVGVtcGxhdGUuYXBwbHkoYyxbayxsXSkpJiZcInN0cmluZ1wiPT09dHlwZW9mIGUmJihsPWUpLGgodGhpcykuaHRtbCgnPGRpdiBjbGFzcz1cIicrZy5jc3MuaGVhZGVySW4rJ1wiPicrbCtcIjwvZGl2PlwiKSk7bi5vblJlbmRlckhlYWRlciYmbi5vblJlbmRlckhlYWRlci5hcHBseShjLFtrLG4sbi4kdGFibGVdKTt0aGlzLmNvbHVtbj1wYXJzZUludChoKHRoaXMpLmF0dHIoXCJkYXRhLWNvbHVtblwiKSwxMCk7dGhpcy5vcmRlcj1GKGcuZ2V0RGF0YShjLGEsXCJzb3J0SW5pdGlhbE9yZGVyXCIpfHxuLnNvcnRJbml0aWFsT3JkZXIpP1sxLDAsMl06WzAsMSwyXTt0aGlzLmNvdW50PS0xO3RoaXMubG9ja2VkT3JkZXI9ITE7dj1nLmdldERhdGEoYyxhLFwibG9ja2VkT3JkZXJcIil8fCExO1widW5kZWZpbmVkXCIhPT10eXBlb2YgdiYmITEhPT12JiYodGhpcy5vcmRlcj10aGlzLmxvY2tlZE9yZGVyPUYodik/WzEsMSwxXTpbMCwwLDBdKTtjLmFkZENsYXNzKGcuY3NzLmhlYWRlcisgXCIgXCIrbi5jc3NIZWFkZXIpO24uaGVhZGVyTGlzdFtrXT10aGlzO2MucGFyZW50KCkuYWRkQ2xhc3MoZy5jc3MuaGVhZGVyUm93K1wiIFwiK24uY3NzSGVhZGVyUm93KS5hdHRyKFwicm9sZVwiLFwicm93XCIpO24udGFiSW5kZXgmJmMuYXR0cihcInRhYmluZGV4XCIsMCl9KS5hdHRyKHtzY29wZTpcImNvbFwiLHJvbGU6XCJjb2x1bW5oZWFkZXJcIn0pO0goYik7bi5kZWJ1ZyYmKHUoXCJCdWlsdCBoZWFkZXJzOlwiLGspLGYobi4kaGVhZGVycykpfWZ1bmN0aW9uIEkoYixhLGMpe3ZhciBlPWIuY29uZmlnO2UuJHRhYmxlLmZpbmQoZS5zZWxlY3RvclJlbW92ZSkucmVtb3ZlKCk7cShiKTt6KGIpO0ooZS4kdGFibGUsYSxjKX1mdW5jdGlvbiBIKGIpe3ZhciBhLGMsZSxkPWIuY29uZmlnO2QuJGhlYWRlcnMuZWFjaChmdW5jdGlvbihsLGYpe2M9aChmKTtlPWcuZ2V0Q29sdW1uRGF0YShiLGQuaGVhZGVycyxsLCEwKTthPVwiZmFsc2VcIj09PWcuZ2V0RGF0YShmLGUsXCJzb3J0ZXJcIil8fFwiZmFsc2VcIj09PWcuZ2V0RGF0YShmLCBlLFwicGFyc2VyXCIpO2Yuc29ydERpc2FibGVkPWE7Y1thP1wiYWRkQ2xhc3NcIjpcInJlbW92ZUNsYXNzXCJdKFwic29ydGVyLWZhbHNlXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJcIithKTtiLmlkJiYoYT9jLnJlbW92ZUF0dHIoXCJhcmlhLWNvbnRyb2xzXCIpOmMuYXR0cihcImFyaWEtY29udHJvbHNcIixiLmlkKSl9KX1mdW5jdGlvbiBHKGIpe3ZhciBhLGMsZT1iLmNvbmZpZyxkPWUuc29ydExpc3QsbD1kLmxlbmd0aCxmPWcuY3NzLnNvcnROb25lK1wiIFwiK2UuY3NzTm9uZSxrPVtnLmNzcy5zb3J0QXNjK1wiIFwiK2UuY3NzQXNjLGcuY3NzLnNvcnREZXNjK1wiIFwiK2UuY3NzRGVzY10sbj1bZS5jc3NJY29uQXNjLGUuY3NzSWNvbkRlc2MsZS5jc3NJY29uTm9uZV0scD1bXCJhc2NlbmRpbmdcIixcImRlc2NlbmRpbmdcIl0sbT1oKGIpLmZpbmQoXCJ0Zm9vdCB0clwiKS5jaGlsZHJlbigpLmFkZChlLiRleHRyYUhlYWRlcnMpLnJlbW92ZUNsYXNzKGsuam9pbihcIiBcIikpO2UuJGhlYWRlcnMucmVtb3ZlQ2xhc3Moay5qb2luKFwiIFwiKSkuYWRkQ2xhc3MoZikuYXR0cihcImFyaWEtc29ydFwiLCBcIm5vbmVcIikuZmluZChcIi5cIitlLmNzc0ljb24pLnJlbW92ZUNsYXNzKG4uam9pbihcIiBcIikpLmFkZENsYXNzKG5bMl0pO2ZvcihhPTA7YTxsO2ErKylpZigyIT09ZFthXVsxXSYmKGI9ZS4kaGVhZGVycy5ub3QoXCIuc29ydGVyLWZhbHNlXCIpLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJytkW2FdWzBdKydcIl0nKygxPT09bD9cIjpsYXN0XCI6XCJcIikpLGIubGVuZ3RoKSl7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKyliW2NdLnNvcnREaXNhYmxlZHx8Yi5lcShjKS5yZW1vdmVDbGFzcyhmKS5hZGRDbGFzcyhrW2RbYV1bMV1dKS5hdHRyKFwiYXJpYS1zb3J0XCIscFtkW2FdWzFdXSkuZmluZChcIi5cIitlLmNzc0ljb24pLnJlbW92ZUNsYXNzKG5bMl0pLmFkZENsYXNzKG5bZFthXVsxXV0pO20ubGVuZ3RoJiZtLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJytkW2FdWzBdKydcIl0nKS5yZW1vdmVDbGFzcyhmKS5hZGRDbGFzcyhrW2RbYV1bMV1dKX1lLiRoZWFkZXJzLm5vdChcIi5zb3J0ZXItZmFsc2VcIikuZWFjaChmdW5jdGlvbigpe3ZhciBiPSBoKHRoaXMpLGE9dGhpcy5vcmRlclsodGhpcy5jb3VudCsxKSUoZS5zb3J0UmVzZXQ/MzoyKV0sYT1iLnRleHQoKStcIjogXCIrZy5sYW5ndWFnZVtiLmhhc0NsYXNzKGcuY3NzLnNvcnRBc2MpP1wic29ydEFzY1wiOmIuaGFzQ2xhc3MoZy5jc3Muc29ydERlc2MpP1wic29ydERlc2NcIjpcInNvcnROb25lXCJdK2cubGFuZ3VhZ2VbMD09PWE/XCJuZXh0QXNjXCI6MT09PWE/XCJuZXh0RGVzY1wiOlwibmV4dE5vbmVcIl07Yi5hdHRyKFwiYXJpYS1sYWJlbFwiLGEpfSl9ZnVuY3Rpb24gUShiKXt2YXIgYSxjLGU9Yi5jb25maWc7ZS53aWR0aEZpeGVkJiYwPT09ZS4kdGFibGUuY2hpbGRyZW4oXCJjb2xncm91cFwiKS5sZW5ndGgmJihhPWgoXCI8Y29sZ3JvdXA+XCIpLGM9aChiKS53aWR0aCgpLGgoYi50Qm9kaWVzKS5ub3QoXCIuXCIrZS5jc3NJbmZvQmxvY2spLmZpbmQoXCJ0cjpmaXJzdFwiKS5jaGlsZHJlbihcIjp2aXNpYmxlXCIpLmVhY2goZnVuY3Rpb24oKXthLmFwcGVuZChoKFwiPGNvbD5cIikuY3NzKFwid2lkdGhcIixwYXJzZUludChoKHRoaXMpLndpZHRoKCkvIGMqMUUzLDEwKS8xMCtcIiVcIikpfSksZS4kdGFibGUucHJlcGVuZChhKSl9ZnVuY3Rpb24gUihiLGEpe3ZhciBjLGUsZCxsLGcsaz1iLmNvbmZpZyxmPWF8fGsuc29ydExpc3Q7ay5zb3J0TGlzdD1bXTtoLmVhY2goZixmdW5jdGlvbihiLGEpe2w9cGFyc2VJbnQoYVswXSwxMCk7aWYoZD1rLiRoZWFkZXJzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJytsKydcIl06bGFzdCcpWzBdKXtlPShlPShcIlwiK2FbMV0pLm1hdGNoKC9eKDF8ZHxzfG98bikvKSk/ZVswXTpcIlwiO3N3aXRjaChlKXtjYXNlIFwiMVwiOmNhc2UgXCJkXCI6ZT0xO2JyZWFrO2Nhc2UgXCJzXCI6ZT1nfHwwO2JyZWFrO2Nhc2UgXCJvXCI6Yz1kLm9yZGVyWyhnfHwwKSUoay5zb3J0UmVzZXQ/MzoyKV07ZT0wPT09Yz8xOjE9PT1jPzA6MjticmVhaztjYXNlIFwiblwiOmQuY291bnQrPTE7ZT1kLm9yZGVyW2QuY291bnQlKGsuc29ydFJlc2V0PzM6MildO2JyZWFrO2RlZmF1bHQ6ZT0wfWc9MD09PWI/ZTpnO2M9W2wscGFyc2VJbnQoZSwxMCl8fDBdOyBrLnNvcnRMaXN0LnB1c2goYyk7ZT1oLmluQXJyYXkoY1sxXSxkLm9yZGVyKTtkLmNvdW50PTA8PWU/ZTpjWzFdJShrLnNvcnRSZXNldD8zOjIpfX0pfWZ1bmN0aW9uIFMoYixhKXtyZXR1cm4gYiYmYlthXT9iW2FdLnR5cGV8fFwiXCI6XCJcIn1mdW5jdGlvbiBOKGIsYSxjKXtpZihiLmlzVXBkYXRpbmcpcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtOKGIsYSxjKX0sNTApO3ZhciBlLGQsbCxmLGs9Yi5jb25maWcsbj0hY1trLnNvcnRNdWx0aVNvcnRLZXldLHA9ay4kdGFibGU7cC50cmlnZ2VyKFwic29ydFN0YXJ0XCIsYik7YS5jb3VudD1jW2suc29ydFJlc2V0S2V5XT8yOihhLmNvdW50KzEpJShrLnNvcnRSZXNldD8zOjIpO2suc29ydFJlc3RhcnQmJihkPWEsay4kaGVhZGVycy5lYWNoKGZ1bmN0aW9uKCl7dGhpcz09PWR8fCFuJiZoKHRoaXMpLmlzKFwiLlwiK2cuY3NzLnNvcnREZXNjK1wiLC5cIitnLmNzcy5zb3J0QXNjKXx8KHRoaXMuY291bnQ9LTEpfSkpO2Q9cGFyc2VJbnQoaChhKS5hdHRyKFwiZGF0YS1jb2x1bW5cIiksIDEwKTtpZihuKXtrLnNvcnRMaXN0PVtdO2lmKG51bGwhPT1rLnNvcnRGb3JjZSlmb3IoZT1rLnNvcnRGb3JjZSxsPTA7bDxlLmxlbmd0aDtsKyspZVtsXVswXSE9PWQmJmsuc29ydExpc3QucHVzaChlW2xdKTtlPWEub3JkZXJbYS5jb3VudF07aWYoMj5lJiYoay5zb3J0TGlzdC5wdXNoKFtkLGVdKSwxPGEuY29sU3BhbikpZm9yKGw9MTtsPGEuY29sU3BhbjtsKyspay5zb3J0TGlzdC5wdXNoKFtkK2wsZV0pfWVsc2V7aWYoay5zb3J0QXBwZW5kJiYxPGsuc29ydExpc3QubGVuZ3RoKWZvcihsPTA7bDxrLnNvcnRBcHBlbmQubGVuZ3RoO2wrKylmPWcuaXNWYWx1ZUluQXJyYXkoay5zb3J0QXBwZW5kW2xdWzBdLGsuc29ydExpc3QpLDA8PWYmJmsuc29ydExpc3Quc3BsaWNlKGYsMSk7aWYoMDw9Zy5pc1ZhbHVlSW5BcnJheShkLGsuc29ydExpc3QpKWZvcihsPTA7bDxrLnNvcnRMaXN0Lmxlbmd0aDtsKyspZj1rLnNvcnRMaXN0W2xdLGU9ay4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicrIGZbMF0rJ1wiXTpsYXN0JylbMF0sZlswXT09PWQmJihmWzFdPWUub3JkZXJbYS5jb3VudF0sMj09PWZbMV0mJihrLnNvcnRMaXN0LnNwbGljZShsLDEpLGUuY291bnQ9LTEpKTtlbHNlIGlmKGU9YS5vcmRlclthLmNvdW50XSwyPmUmJihrLnNvcnRMaXN0LnB1c2goW2QsZV0pLDE8YS5jb2xTcGFuKSlmb3IobD0xO2w8YS5jb2xTcGFuO2wrKylrLnNvcnRMaXN0LnB1c2goW2QrbCxlXSl9aWYobnVsbCE9PWsuc29ydEFwcGVuZClmb3IoZT1rLnNvcnRBcHBlbmQsbD0wO2w8ZS5sZW5ndGg7bCsrKWVbbF1bMF0hPT1kJiZrLnNvcnRMaXN0LnB1c2goZVtsXSk7cC50cmlnZ2VyKFwic29ydEJlZ2luXCIsYik7c2V0VGltZW91dChmdW5jdGlvbigpe0coYik7SyhiKTtBKGIpO3AudHJpZ2dlcihcInNvcnRFbmRcIixiKX0sMSl9ZnVuY3Rpb24gSyhiKXt2YXIgYSxjLGUsZCxsLGYsayxoLHAsdyxxLHI9MCxzPWIuY29uZmlnLHQ9cy50ZXh0U29ydGVyfHxcIlwiLHk9cy5zb3J0TGlzdCx4PXkubGVuZ3RoLHo9IGIudEJvZGllcy5sZW5ndGg7aWYoIXMuc2VydmVyU2lkZVNvcnRpbmcmJiFtKHMuY2FjaGUpKXtzLmRlYnVnJiYobD1uZXcgRGF0ZSk7Zm9yKGM9MDtjPHo7YysrKWY9cy5jYWNoZVtjXS5jb2xNYXgsaz1zLmNhY2hlW2NdLm5vcm1hbGl6ZWQsay5zb3J0KGZ1bmN0aW9uKGMsbCl7Zm9yKGE9MDthPHg7YSsrKXtkPXlbYV1bMF07aD15W2FdWzFdO3I9MD09PWg7aWYocy5zb3J0U3RhYmxlJiZjW2RdPT09bFtkXSYmMT09PXgpYnJlYWs7KGU9L24vaS50ZXN0KFMocy5wYXJzZXJzLGQpKSkmJnMuc3RyaW5nc1tkXT8oZT1cImJvb2xlYW5cIj09PXR5cGVvZiBzLnN0cmluZ1tzLnN0cmluZ3NbZF1dPyhyPzE6LTEpKihzLnN0cmluZ1tzLnN0cmluZ3NbZF1dPy0xOjEpOnMuc3RyaW5nc1tkXT9zLnN0cmluZ1tzLnN0cmluZ3NbZF1dfHwwOjAscD1zLm51bWJlclNvcnRlcj9zLm51bWJlclNvcnRlcihjW2RdLGxbZF0scixmW2RdLGIpOmdbXCJzb3J0TnVtZXJpY1wiKyhyP1wiQXNjXCI6XCJEZXNjXCIpXShjW2RdLCBsW2RdLGUsZltkXSxkLGIpKToodz1yP2M6bCxxPXI/bDpjLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIHQ/dCh3W2RdLHFbZF0scixkLGIpOlwib2JqZWN0XCI9PT10eXBlb2YgdCYmdC5oYXNPd25Qcm9wZXJ0eShkKT90W2RdKHdbZF0scVtkXSxyLGQsYik6Z1tcInNvcnROYXR1cmFsXCIrKHI/XCJBc2NcIjpcIkRlc2NcIildKGNbZF0sbFtkXSxkLGIscykpO2lmKHApcmV0dXJuIHB9cmV0dXJuIGNbcy5jb2x1bW5zXS5vcmRlci1sW3MuY29sdW1uc10ub3JkZXJ9KTtzLmRlYnVnJiZ1KFwiU29ydGluZyBvbiBcIit5LnRvU3RyaW5nKCkrXCIgYW5kIGRpciBcIitoK1wiIHRpbWVcIixsKX19ZnVuY3Rpb24gTyhiLGEpe3ZhciBjPWJbMF07Yy5pc1VwZGF0aW5nJiZiLnRyaWdnZXIoXCJ1cGRhdGVDb21wbGV0ZVwiLGMpO2guaXNGdW5jdGlvbihhKSYmYShiWzBdKX1mdW5jdGlvbiBKKGIsYSxjKXt2YXIgZT1iWzBdLmNvbmZpZy5zb3J0TGlzdDshMSE9PWEmJiFiWzBdLmlzUHJvY2Vzc2luZyYmZS5sZW5ndGg/Yi50cmlnZ2VyKFwic29ydG9uXCIsIFtlLGZ1bmN0aW9uKCl7TyhiLGMpfSwhMF0pOihPKGIsYyksZy5hcHBseVdpZGdldChiWzBdLCExKSl9ZnVuY3Rpb24gUChiKXt2YXIgYT1iLmNvbmZpZyxjPWEuJHRhYmxlO2MudW5iaW5kKFwic29ydFJlc2V0IHVwZGF0ZSB1cGRhdGVSb3dzIHVwZGF0ZUNlbGwgdXBkYXRlQWxsIGFkZFJvd3MgdXBkYXRlQ29tcGxldGUgc29ydG9uIGFwcGVuZENhY2hlIHVwZGF0ZUNhY2hlIGFwcGx5V2lkZ2V0SWQgYXBwbHlXaWRnZXRzIHJlZnJlc2hXaWRnZXRzIGRlc3Ryb3kgbW91c2V1cCBtb3VzZWxlYXZlIFwiLnNwbGl0KFwiIFwiKS5qb2luKGEubmFtZXNwYWNlK1wiIFwiKSkuYmluZChcInNvcnRSZXNldFwiK2EubmFtZXNwYWNlLGZ1bmN0aW9uKGMsZCl7Yy5zdG9wUHJvcGFnYXRpb24oKTthLnNvcnRMaXN0PVtdO0coYik7SyhiKTtBKGIpO2guaXNGdW5jdGlvbihkKSYmZChiKX0pLmJpbmQoXCJ1cGRhdGVBbGxcIithLm5hbWVzcGFjZSxmdW5jdGlvbihjLGQsbCl7Yy5zdG9wUHJvcGFnYXRpb24oKTtiLmlzVXBkYXRpbmc9ICEwO2cucmVmcmVzaFdpZGdldHMoYiwhMCwhMCk7Zy5yZXN0b3JlSGVhZGVycyhiKTtFKGIpO2cuYmluZEV2ZW50cyhiLGEuJGhlYWRlcnMsITApO1AoYik7SShiLGQsbCl9KS5iaW5kKFwidXBkYXRlXCIrYS5uYW1lc3BhY2UrXCIgdXBkYXRlUm93c1wiK2EubmFtZXNwYWNlLGZ1bmN0aW9uKGEsYyxsKXthLnN0b3BQcm9wYWdhdGlvbigpO2IuaXNVcGRhdGluZz0hMDtIKGIpO0koYixjLGwpfSkuYmluZChcInVwZGF0ZUNlbGxcIithLm5hbWVzcGFjZSxmdW5jdGlvbihlLGQsbCxnKXtlLnN0b3BQcm9wYWdhdGlvbigpO2IuaXNVcGRhdGluZz0hMDtjLmZpbmQoYS5zZWxlY3RvclJlbW92ZSkucmVtb3ZlKCk7dmFyIGssZixwO2Y9Yy5maW5kKFwidGJvZHlcIik7cD1oKGQpO2U9Zi5pbmRleChoLmZuLmNsb3Nlc3Q/cC5jbG9zZXN0KFwidGJvZHlcIik6cC5wYXJlbnRzKFwidGJvZHlcIikuZmlsdGVyKFwiOmZpcnN0XCIpKTtrPWguZm4uY2xvc2VzdD9wLmNsb3Nlc3QoXCJ0clwiKTpwLnBhcmVudHMoXCJ0clwiKS5maWx0ZXIoXCI6Zmlyc3RcIik7IGQ9cFswXTtmLmxlbmd0aCYmMDw9ZSYmKGY9Zi5lcShlKS5maW5kKFwidHJcIikuaW5kZXgoaykscD1wLmluZGV4KCksYS5jYWNoZVtlXS5ub3JtYWxpemVkW2ZdW2EuY29sdW1uc10uJHJvdz1rLGs9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhLmV4dHJhY3RvcnNbcF0uaWQ/dChiLGQscCk6YS5leHRyYWN0b3JzW3BdLmZvcm1hdCh0KGIsZCxwKSxiLGQscCksZD1cIm5vLXBhcnNlclwiPT09YS5wYXJzZXJzW3BdLmlkP1wiXCI6YS5wYXJzZXJzW3BdLmZvcm1hdChrLGIsZCxwKSxhLmNhY2hlW2VdLm5vcm1hbGl6ZWRbZl1bcF09YS5pZ25vcmVDYXNlJiZcInN0cmluZ1wiPT09dHlwZW9mIGQ/ZC50b0xvd2VyQ2FzZSgpOmQsXCJudW1lcmljXCI9PT0oYS5wYXJzZXJzW3BdLnR5cGV8fFwiXCIpLnRvTG93ZXJDYXNlKCkmJihhLmNhY2hlW2VdLmNvbE1heFtwXT1NYXRoLm1heChNYXRoLmFicyhkKXx8MCxhLmNhY2hlW2VdLmNvbE1heFtwXXx8MCkpLEooYyxsLGcpKX0pLmJpbmQoXCJhZGRSb3dzXCIrYS5uYW1lc3BhY2UsIGZ1bmN0aW9uKGUsZCxsLGcpe2Uuc3RvcFByb3BhZ2F0aW9uKCk7Yi5pc1VwZGF0aW5nPSEwO2lmKG0oYS5jYWNoZSkpSChiKSxJKGIsbCxnKTtlbHNle2Q9aChkKS5hdHRyKFwicm9sZVwiLFwicm93XCIpO3ZhciBrLGYscCx1LEIscj1kLmZpbHRlcihcInRyXCIpLmxlbmd0aCxzPWMuZmluZChcInRib2R5XCIpLmluZGV4KGQucGFyZW50cyhcInRib2R5XCIpLmZpbHRlcihcIjpmaXJzdFwiKSk7YS5wYXJzZXJzJiZhLnBhcnNlcnMubGVuZ3RofHxxKGIpO2ZvcihlPTA7ZTxyO2UrKyl7Zj1kW2VdLmNlbGxzLmxlbmd0aDtCPVtdO3U9e2NoaWxkOltdLCRyb3c6ZC5lcShlKSxvcmRlcjphLmNhY2hlW3NdLm5vcm1hbGl6ZWQubGVuZ3RofTtmb3Ioaz0wO2s8ZjtrKyspcD1cInVuZGVmaW5lZFwiPT09dHlwZW9mIGEuZXh0cmFjdG9yc1trXS5pZD90KGIsZFtlXS5jZWxsc1trXSxrKTphLmV4dHJhY3RvcnNba10uZm9ybWF0KHQoYixkW2VdLmNlbGxzW2tdLGspLGIsZFtlXS5jZWxsc1trXSxrKSxwPVwibm8tcGFyc2VyXCI9PT0gYS5wYXJzZXJzW2tdLmlkP1wiXCI6YS5wYXJzZXJzW2tdLmZvcm1hdChwLGIsZFtlXS5jZWxsc1trXSxrKSxCW2tdPWEuaWdub3JlQ2FzZSYmXCJzdHJpbmdcIj09PXR5cGVvZiBwP3AudG9Mb3dlckNhc2UoKTpwLFwibnVtZXJpY1wiPT09KGEucGFyc2Vyc1trXS50eXBlfHxcIlwiKS50b0xvd2VyQ2FzZSgpJiYoYS5jYWNoZVtzXS5jb2xNYXhba109TWF0aC5tYXgoTWF0aC5hYnMoQltrXSl8fDAsYS5jYWNoZVtzXS5jb2xNYXhba118fDApKTtCLnB1c2godSk7YS5jYWNoZVtzXS5ub3JtYWxpemVkLnB1c2goQil9SihjLGwsZyl9fSkuYmluZChcInVwZGF0ZUNvbXBsZXRlXCIrYS5uYW1lc3BhY2UsZnVuY3Rpb24oKXtiLmlzVXBkYXRpbmc9ITF9KS5iaW5kKFwic29ydG9uXCIrYS5uYW1lc3BhY2UsZnVuY3Rpb24oYSxkLGwsZil7dmFyIGs9Yi5jb25maWc7YS5zdG9wUHJvcGFnYXRpb24oKTtjLnRyaWdnZXIoXCJzb3J0U3RhcnRcIix0aGlzKTtSKGIsZCk7RyhiKTtrLmRlbGF5SW5pdCYmbShrLmNhY2hlKSYmIHooYik7Yy50cmlnZ2VyKFwic29ydEJlZ2luXCIsdGhpcyk7SyhiKTtBKGIsZik7Yy50cmlnZ2VyKFwic29ydEVuZFwiLHRoaXMpO2cuYXBwbHlXaWRnZXQoYik7aC5pc0Z1bmN0aW9uKGwpJiZsKGIpfSkuYmluZChcImFwcGVuZENhY2hlXCIrYS5uYW1lc3BhY2UsZnVuY3Rpb24oYSxjLGcpe2Euc3RvcFByb3BhZ2F0aW9uKCk7QShiLGcpO2guaXNGdW5jdGlvbihjKSYmYyhiKX0pLmJpbmQoXCJ1cGRhdGVDYWNoZVwiK2EubmFtZXNwYWNlLGZ1bmN0aW9uKGMsZCl7YS5wYXJzZXJzJiZhLnBhcnNlcnMubGVuZ3RofHxxKGIpO3ooYik7aC5pc0Z1bmN0aW9uKGQpJiZkKGIpfSkuYmluZChcImFwcGx5V2lkZ2V0SWRcIithLm5hbWVzcGFjZSxmdW5jdGlvbihjLGQpe2Muc3RvcFByb3BhZ2F0aW9uKCk7Zy5nZXRXaWRnZXRCeUlkKGQpLmZvcm1hdChiLGEsYS53aWRnZXRPcHRpb25zKX0pLmJpbmQoXCJhcHBseVdpZGdldHNcIithLm5hbWVzcGFjZSxmdW5jdGlvbihhLGMpe2Euc3RvcFByb3BhZ2F0aW9uKCk7Zy5hcHBseVdpZGdldChiLCBjKX0pLmJpbmQoXCJyZWZyZXNoV2lkZ2V0c1wiK2EubmFtZXNwYWNlLGZ1bmN0aW9uKGEsYyxsKXthLnN0b3BQcm9wYWdhdGlvbigpO2cucmVmcmVzaFdpZGdldHMoYixjLGwpfSkuYmluZChcImRlc3Ryb3lcIithLm5hbWVzcGFjZSxmdW5jdGlvbihhLGMsbCl7YS5zdG9wUHJvcGFnYXRpb24oKTtnLmRlc3Ryb3koYixjLGwpfSkuYmluZChcInJlc2V0VG9Mb2FkU3RhdGVcIithLm5hbWVzcGFjZSxmdW5jdGlvbigpe2cucmVmcmVzaFdpZGdldHMoYiwhMCwhMCk7YT1oLmV4dGVuZCghMCxnLmRlZmF1bHRzLGEub3JpZ2luYWxTZXR0aW5ncyk7Yi5oYXNJbml0aWFsaXplZD0hMTtnLnNldHVwKGIsYSl9KX12YXIgZz10aGlzO2cudmVyc2lvbj1cIjIuMTguM1wiO2cucGFyc2Vycz1bXTtnLndpZGdldHM9W107Zy5kZWZhdWx0cz17dGhlbWU6XCJkZWZhdWx0XCIsd2lkdGhGaXhlZDohMSxzaG93UHJvY2Vzc2luZzohMSxoZWFkZXJUZW1wbGF0ZTpcIntjb250ZW50fVwiLG9uUmVuZGVyVGVtcGxhdGU6bnVsbCwgb25SZW5kZXJIZWFkZXI6bnVsbCxjYW5jZWxTZWxlY3Rpb246ITAsdGFiSW5kZXg6ITAsZGF0ZUZvcm1hdDpcIm1tZGR5eXl5XCIsc29ydE11bHRpU29ydEtleTpcInNoaWZ0S2V5XCIsc29ydFJlc2V0S2V5OlwiY3RybEtleVwiLHVzTnVtYmVyRm9ybWF0OiEwLGRlbGF5SW5pdDohMSxzZXJ2ZXJTaWRlU29ydGluZzohMSxoZWFkZXJzOnt9LGlnbm9yZUNhc2U6ITAsc29ydEZvcmNlOm51bGwsc29ydExpc3Q6W10sc29ydEFwcGVuZDpudWxsLHNvcnRTdGFibGU6ITEsc29ydEluaXRpYWxPcmRlcjpcImFzY1wiLHNvcnRMb2NhbGVDb21wYXJlOiExLHNvcnRSZXNldDohMSxzb3J0UmVzdGFydDohMSxlbXB0eVRvOlwiYm90dG9tXCIsc3RyaW5nVG86XCJtYXhcIix0ZXh0RXh0cmFjdGlvbjpcImJhc2ljXCIsdGV4dEF0dHJpYnV0ZTpcImRhdGEtdGV4dFwiLHRleHRTb3J0ZXI6bnVsbCxudW1iZXJTb3J0ZXI6bnVsbCx3aWRnZXRzOltdLHdpZGdldE9wdGlvbnM6e3plYnJhOltcImV2ZW5cIixcIm9kZFwiXX0saW5pdFdpZGdldHM6ITAsIHdpZGdldENsYXNzOlwid2lkZ2V0LXtuYW1lfVwiLGluaXRpYWxpemVkOm51bGwsdGFibGVDbGFzczpcIlwiLGNzc0FzYzpcIlwiLGNzc0Rlc2M6XCJcIixjc3NOb25lOlwiXCIsY3NzSGVhZGVyOlwiXCIsY3NzSGVhZGVyUm93OlwiXCIsY3NzUHJvY2Vzc2luZzpcIlwiLGNzc0NoaWxkUm93OlwidGFibGVzb3J0ZXItY2hpbGRSb3dcIixjc3NJY29uOlwidGFibGVzb3J0ZXItaWNvblwiLGNzc0ljb25Ob25lOlwiXCIsY3NzSWNvbkFzYzpcIlwiLGNzc0ljb25EZXNjOlwiXCIsY3NzSW5mb0Jsb2NrOlwidGFibGVzb3J0ZXItaW5mb09ubHlcIixjc3NBbGxvd0NsaWNrczpcInRhYmxlc29ydGVyLWFsbG93Q2xpY2tzXCIsc2VsZWN0b3JIZWFkZXJzOlwiPiB0aGVhZCB0aCwgPiB0aGVhZCB0ZFwiLHNlbGVjdG9yU29ydDpcInRoLCB0ZFwiLHNlbGVjdG9yUmVtb3ZlOlwiLnJlbW92ZS1tZVwiLGRlYnVnOiExLGhlYWRlckxpc3Q6W10sZW1wdGllczp7fSxzdHJpbmdzOnt9LHBhcnNlcnM6W119O2cuY3NzPXt0YWJsZTpcInRhYmxlc29ydGVyXCIsY3NzSGFzQ2hpbGQ6XCJ0YWJsZXNvcnRlci1oYXNDaGlsZFJvd1wiLCBjaGlsZFJvdzpcInRhYmxlc29ydGVyLWNoaWxkUm93XCIsaGVhZGVyOlwidGFibGVzb3J0ZXItaGVhZGVyXCIsaGVhZGVyUm93OlwidGFibGVzb3J0ZXItaGVhZGVyUm93XCIsaGVhZGVySW46XCJ0YWJsZXNvcnRlci1oZWFkZXItaW5uZXJcIixpY29uOlwidGFibGVzb3J0ZXItaWNvblwiLGluZm86XCJ0YWJsZXNvcnRlci1pbmZvT25seVwiLHByb2Nlc3Npbmc6XCJ0YWJsZXNvcnRlci1wcm9jZXNzaW5nXCIsc29ydEFzYzpcInRhYmxlc29ydGVyLWhlYWRlckFzY1wiLHNvcnREZXNjOlwidGFibGVzb3J0ZXItaGVhZGVyRGVzY1wiLHNvcnROb25lOlwidGFibGVzb3J0ZXItaGVhZGVyVW5Tb3J0ZWRcIn07Zy5sYW5ndWFnZT17c29ydEFzYzpcIkFzY2VuZGluZyBzb3J0IGFwcGxpZWQsIFwiLHNvcnREZXNjOlwiRGVzY2VuZGluZyBzb3J0IGFwcGxpZWQsIFwiLHNvcnROb25lOlwiTm8gc29ydCBhcHBsaWVkLCBcIixuZXh0QXNjOlwiYWN0aXZhdGUgdG8gYXBwbHkgYW4gYXNjZW5kaW5nIHNvcnRcIixuZXh0RGVzYzpcImFjdGl2YXRlIHRvIGFwcGx5IGEgZGVzY2VuZGluZyBzb3J0XCIsIG5leHROb25lOlwiYWN0aXZhdGUgdG8gcmVtb3ZlIHRoZSBzb3J0XCJ9O2cubG9nPWY7Zy5iZW5jaG1hcms9dTtnLmNvbnN0cnVjdD1mdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGE9aC5leHRlbmQoITAse30sZy5kZWZhdWx0cyxiKTthLm9yaWdpbmFsU2V0dGluZ3M9YjshdGhpcy5oYXNJbml0aWFsaXplZCYmZy5idWlsZFRhYmxlJiZcIlRBQkxFXCIhPT10aGlzLnRhZ05hbWU/Zy5idWlsZFRhYmxlKHRoaXMsYSk6Zy5zZXR1cCh0aGlzLGEpfSl9O2cuc2V0dXA9ZnVuY3Rpb24oYixhKXtpZighYnx8IWIudEhlYWR8fDA9PT1iLnRCb2RpZXMubGVuZ3RofHwhMD09PWIuaGFzSW5pdGlhbGl6ZWQpcmV0dXJuIGEuZGVidWc/ZihcIkVSUk9SOiBzdG9wcGluZyBpbml0aWFsaXphdGlvbiEgTm8gdGFibGUsIHRoZWFkLCB0Ym9keSBvciB0YWJsZXNvcnRlciBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkXCIpOlwiXCI7dmFyIGM9XCJcIixlPWgoYiksZD1oLm1ldGFkYXRhOyBiLmhhc0luaXRpYWxpemVkPSExO2IuaXNQcm9jZXNzaW5nPSEwO2IuY29uZmlnPWE7aC5kYXRhKGIsXCJ0YWJsZXNvcnRlclwiLGEpO2EuZGVidWcmJmguZGF0YShiLFwic3RhcnRvdmVyYWxsdGltZXJcIixuZXcgRGF0ZSk7YS5zdXBwb3J0c0RhdGFPYmplY3Q9ZnVuY3Rpb24oYSl7YVswXT1wYXJzZUludChhWzBdLDEwKTtyZXR1cm4gMTxhWzBdfHwxPT09YVswXSYmNDw9cGFyc2VJbnQoYVsxXSwxMCl9KGguZm4uanF1ZXJ5LnNwbGl0KFwiLlwiKSk7YS5zdHJpbmc9e21heDoxLG1pbjotMSxlbXB0eW1pbjoxLGVtcHR5bWF4Oi0xLHplcm86MCxub25lOjAsXCJudWxsXCI6MCx0b3A6ITAsYm90dG9tOiExfTthLmVtcHR5VG89YS5lbXB0eVRvLnRvTG93ZXJDYXNlKCk7YS5zdHJpbmdUbz1hLnN0cmluZ1RvLnRvTG93ZXJDYXNlKCk7L3RhYmxlc29ydGVyXFwtLy50ZXN0KGUuYXR0cihcImNsYXNzXCIpKXx8KGM9XCJcIiE9PWEudGhlbWU/XCIgdGFibGVzb3J0ZXItXCIrYS50aGVtZTpcIlwiKTthLnRhYmxlPWI7YS4kdGFibGU9IGUuYWRkQ2xhc3MoZy5jc3MudGFibGUrXCIgXCIrYS50YWJsZUNsYXNzK2MpLmF0dHIoXCJyb2xlXCIsXCJncmlkXCIpO2EuJGhlYWRlcnM9ZS5maW5kKGEuc2VsZWN0b3JIZWFkZXJzKTthLm5hbWVzcGFjZT1hLm5hbWVzcGFjZT9cIi5cIithLm5hbWVzcGFjZS5yZXBsYWNlKC9cXFcvZyxcIlwiKTpcIi50YWJsZXNvcnRlclwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnNsaWNlKDIpO2EuJHRhYmxlLmNoaWxkcmVuKCkuY2hpbGRyZW4oXCJ0clwiKS5hdHRyKFwicm9sZVwiLFwicm93XCIpO2EuJHRib2RpZXM9ZS5jaGlsZHJlbihcInRib2R5Om5vdCguXCIrYS5jc3NJbmZvQmxvY2srXCIpXCIpLmF0dHIoe1wiYXJpYS1saXZlXCI6XCJwb2xpdGVcIixcImFyaWEtcmVsZXZhbnRcIjpcImFsbFwifSk7YS4kdGFibGUuY2hpbGRyZW4oXCJjYXB0aW9uXCIpLmxlbmd0aCYmKGM9YS4kdGFibGUuY2hpbGRyZW4oXCJjYXB0aW9uXCIpWzBdLGMuaWR8fChjLmlkPWEubmFtZXNwYWNlLnNsaWNlKDEpK1wiY2FwdGlvblwiKSxhLiR0YWJsZS5hdHRyKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGMuaWQpKTthLndpZGdldEluaXQ9e307YS50ZXh0RXh0cmFjdGlvbj1hLiR0YWJsZS5hdHRyKFwiZGF0YS10ZXh0LWV4dHJhY3Rpb25cIil8fGEudGV4dEV4dHJhY3Rpb258fFwiYmFzaWNcIjtFKGIpO1EoYik7cShiKTthLnRvdGFsUm93cz0wO2EuZGVsYXlJbml0fHx6KGIpO2cuYmluZEV2ZW50cyhiLGEuJGhlYWRlcnMsITApO1AoYik7YS5zdXBwb3J0c0RhdGFPYmplY3QmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZS5kYXRhKCkuc29ydGxpc3Q/YS5zb3J0TGlzdD1lLmRhdGEoKS5zb3J0bGlzdDpkJiZlLm1ldGFkYXRhKCkmJmUubWV0YWRhdGEoKS5zb3J0bGlzdCYmKGEuc29ydExpc3Q9ZS5tZXRhZGF0YSgpLnNvcnRsaXN0KTtnLmFwcGx5V2lkZ2V0KGIsITApOzA8YS5zb3J0TGlzdC5sZW5ndGg/ZS50cmlnZ2VyKFwic29ydG9uXCIsW2Euc29ydExpc3Qse30sIWEuaW5pdFdpZGdldHMsITBdKTooRyhiKSxhLmluaXRXaWRnZXRzJiZnLmFwcGx5V2lkZ2V0KGIsITEpKTthLnNob3dQcm9jZXNzaW5nJiYgZS51bmJpbmQoXCJzb3J0QmVnaW5cIithLm5hbWVzcGFjZStcIiBzb3J0RW5kXCIrYS5uYW1lc3BhY2UpLmJpbmQoXCJzb3J0QmVnaW5cIithLm5hbWVzcGFjZStcIiBzb3J0RW5kXCIrYS5uYW1lc3BhY2UsZnVuY3Rpb24oYyl7Y2xlYXJUaW1lb3V0KGEucHJvY2Vzc1RpbWVyKTtnLmlzUHJvY2Vzc2luZyhiKTtcInNvcnRCZWdpblwiPT09Yy50eXBlJiYoYS5wcm9jZXNzVGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2cuaXNQcm9jZXNzaW5nKGIsITApfSw1MDApKX0pO2IuaGFzSW5pdGlhbGl6ZWQ9ITA7Yi5pc1Byb2Nlc3Npbmc9ITE7YS5kZWJ1ZyYmZy5iZW5jaG1hcmsoXCJPdmVyYWxsIGluaXRpYWxpemF0aW9uIHRpbWVcIixoLmRhdGEoYixcInN0YXJ0b3ZlcmFsbHRpbWVyXCIpKTtlLnRyaWdnZXIoXCJ0YWJsZXNvcnRlci1pbml0aWFsaXplZFwiLGIpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmluaXRpYWxpemVkJiZhLmluaXRpYWxpemVkKGIpfTtnLmdldENvbHVtbkRhdGE9ZnVuY3Rpb24oYixhLGMsIGUpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmbnVsbCE9PWEpe2I9aChiKVswXTt2YXIgZDtiPWIuY29uZmlnO2lmKGFbY10pcmV0dXJuIGU/YVtjXTphW2IuJGhlYWRlcnMuaW5kZXgoYi4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicrYysnXCJdOmxhc3QnKSldO2ZvcihkIGluIGEpaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiYoZT1iLiRoZWFkZXJzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJytjKydcIl06bGFzdCcpLmZpbHRlcihkKS5hZGQoYi4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicrYysnXCJdOmxhc3QnKS5maW5kKGQpKSxlLmxlbmd0aCkpcmV0dXJuIGFbZF19fTtnLmNvbXB1dGVDb2x1bW5JbmRleD1mdW5jdGlvbihiKXt2YXIgYT1bXSxjPTAsZSxkLGcsZixrLG4scCxtLHUscjtmb3IoZT0wO2U8Yi5sZW5ndGg7ZSsrKWZvcihrPWJbZV0uY2VsbHMsZD0wO2Q8ay5sZW5ndGg7ZCsrKXtnPWtbZF07Zj1oKGcpO249Zy5wYXJlbnROb2RlLnJvd0luZGV4OyBmLmluZGV4KCk7cD1nLnJvd1NwYW58fDE7bT1nLmNvbFNwYW58fDE7XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhW25dJiYoYVtuXT1bXSk7Zm9yKGc9MDtnPGFbbl0ubGVuZ3RoKzE7ZysrKWlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYVtuXVtnXSl7dT1nO2JyZWFrfWM9TWF0aC5tYXgodSxjKTtmLmF0dHIoe1wiZGF0YS1jb2x1bW5cIjp1fSk7Zm9yKGc9bjtnPG4rcDtnKyspZm9yKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYVtnXSYmKGFbZ109W10pLHI9YVtnXSxmPXU7Zjx1K207ZisrKXJbZl09XCJ4XCJ9cmV0dXJuIGMrMX07Zy5pc1Byb2Nlc3Npbmc9ZnVuY3Rpb24oYixhLGMpe2I9aChiKTt2YXIgZT1iWzBdLmNvbmZpZyxkPWN8fGIuZmluZChcIi5cIitnLmNzcy5oZWFkZXIpO2E/KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmMDxlLnNvcnRMaXN0Lmxlbmd0aCYmKGQ9ZC5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zb3J0RGlzYWJsZWQ/ITE6MDw9Zy5pc1ZhbHVlSW5BcnJheShwYXJzZUZsb2F0KGgodGhpcykuYXR0cihcImRhdGEtY29sdW1uXCIpKSwgZS5zb3J0TGlzdCl9KSksYi5hZGQoZCkuYWRkQ2xhc3MoZy5jc3MucHJvY2Vzc2luZytcIiBcIitlLmNzc1Byb2Nlc3NpbmcpKTpiLmFkZChkKS5yZW1vdmVDbGFzcyhnLmNzcy5wcm9jZXNzaW5nK1wiIFwiK2UuY3NzUHJvY2Vzc2luZyl9O2cucHJvY2Vzc1Rib2R5PWZ1bmN0aW9uKGIsYSxjKXtiPWgoYilbMF07aWYoYylyZXR1cm4gYi5pc1Byb2Nlc3Npbmc9ITAsYS5iZWZvcmUoJzxzcGFuIGNsYXNzPVwidGFibGVzb3J0ZXItc2F2ZW15cGxhY2VcIi8+JyksYz1oLmZuLmRldGFjaD9hLmRldGFjaCgpOmEucmVtb3ZlKCk7Yz1oKGIpLmZpbmQoXCJzcGFuLnRhYmxlc29ydGVyLXNhdmVteXBsYWNlXCIpO2EuaW5zZXJ0QWZ0ZXIoYyk7Yy5yZW1vdmUoKTtiLmlzUHJvY2Vzc2luZz0hMX07Zy5jbGVhclRhYmxlQm9keT1mdW5jdGlvbihiKXtoKGIpWzBdLmNvbmZpZy4kdGJvZGllcy5jaGlsZHJlbigpLmRldGFjaCgpfTtnLmJpbmRFdmVudHM9ZnVuY3Rpb24oYixhLGMpe2I9aChiKVswXTt2YXIgZSwgZD1iLmNvbmZpZzshMCE9PWMmJihkLiRleHRyYUhlYWRlcnM9ZC4kZXh0cmFIZWFkZXJzP2QuJGV4dHJhSGVhZGVycy5hZGQoYSk6YSk7YS5maW5kKGQuc2VsZWN0b3JTb3J0KS5hZGQoYS5maWx0ZXIoZC5zZWxlY3RvclNvcnQpKS51bmJpbmQoW1wibW91c2Vkb3duXCIsXCJtb3VzZXVwXCIsXCJzb3J0XCIsXCJrZXl1cFwiLFwiXCJdLmpvaW4oZC5uYW1lc3BhY2UrXCIgXCIpKS5iaW5kKFtcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwic29ydFwiLFwia2V5dXBcIixcIlwiXS5qb2luKGQubmFtZXNwYWNlK1wiIFwiKSxmdW5jdGlvbihjLGcpe3ZhciBmO2Y9Yy50eXBlO2lmKCEoMSE9PShjLndoaWNofHxjLmJ1dHRvbikmJiEvc29ydHxrZXl1cC8udGVzdChmKXx8XCJrZXl1cFwiPT09ZiYmMTMhPT1jLndoaWNofHxcIm1vdXNldXBcIj09PWYmJiEwIT09ZyYmMjUwPChuZXcgRGF0ZSkuZ2V0VGltZSgpLWUpKXtpZihcIm1vdXNlZG93blwiPT09ZilyZXR1cm4gZT0obmV3IERhdGUpLmdldFRpbWUoKSwvKGlucHV0fHNlbGVjdHxidXR0b258dGV4dGFyZWEpL2kudGVzdChjLnRhcmdldC50YWdOYW1lKXx8IGgoYy50YXJnZXQpLmNsb3Nlc3QoXCJ0ZCx0aFwiKS5oYXNDbGFzcyhkLmNzc0FsbG93Q2xpY2tzKT9cIlwiOiFkLmNhbmNlbFNlbGVjdGlvbjtkLmRlbGF5SW5pdCYmbShkLmNhY2hlKSYmeihiKTtmPWguZm4uY2xvc2VzdD9oKHRoaXMpLmNsb3Nlc3QoXCJ0aCwgdGRcIilbMF06L1RIfFRELy50ZXN0KHRoaXMudGFnTmFtZSk/dGhpczpoKHRoaXMpLnBhcmVudHMoXCJ0aCwgdGRcIilbMF07Zj1kLiRoZWFkZXJzW2EuaW5kZXgoZildO2Yuc29ydERpc2FibGVkfHxOKGIsZixjKX19KTtkLmNhbmNlbFNlbGVjdGlvbiYmYS5hdHRyKFwidW5zZWxlY3RhYmxlXCIsXCJvblwiKS5iaW5kKFwic2VsZWN0c3RhcnRcIiwhMSkuY3NzKHtcInVzZXItc2VsZWN0XCI6XCJub25lXCIsTW96VXNlclNlbGVjdDpcIm5vbmVcIn0pfTtnLnJlc3RvcmVIZWFkZXJzPWZ1bmN0aW9uKGIpe3ZhciBhPWgoYilbMF0uY29uZmlnO2EuJHRhYmxlLmZpbmQoYS5zZWxlY3RvckhlYWRlcnMpLmVhY2goZnVuY3Rpb24oYil7aCh0aGlzKS5maW5kKFwiLlwiKyBnLmNzcy5oZWFkZXJJbikubGVuZ3RoJiZoKHRoaXMpLmh0bWwoYS5oZWFkZXJDb250ZW50W2JdKX0pfTtnLmRlc3Ryb3k9ZnVuY3Rpb24oYixhLGMpe2I9aChiKVswXTtpZihiLmhhc0luaXRpYWxpemVkKXtnLnJlZnJlc2hXaWRnZXRzKGIsITAsITApO3ZhciBlPWgoYiksZD1iLmNvbmZpZyxmPWUuZmluZChcInRoZWFkOmZpcnN0XCIpLG09Zi5maW5kKFwidHIuXCIrZy5jc3MuaGVhZGVyUm93KS5yZW1vdmVDbGFzcyhnLmNzcy5oZWFkZXJSb3crXCIgXCIrZC5jc3NIZWFkZXJSb3cpLGs9ZS5maW5kKFwidGZvb3Q6Zmlyc3QgPiB0clwiKS5jaGlsZHJlbihcInRoLCB0ZFwiKTshMT09PWEmJjA8PWguaW5BcnJheShcInVpdGhlbWVcIixkLndpZGdldHMpJiYoZS50cmlnZ2VyKFwiYXBwbHlXaWRnZXRJZFwiLFtcInVpdGhlbWVcIl0pLGUudHJpZ2dlcihcImFwcGx5V2lkZ2V0SWRcIixbXCJ6ZWJyYVwiXSkpO2YuZmluZChcInRyXCIpLm5vdChtKS5yZW1vdmUoKTtlLnJlbW92ZURhdGEoXCJ0YWJsZXNvcnRlclwiKS51bmJpbmQoXCJzb3J0UmVzZXQgdXBkYXRlIHVwZGF0ZUFsbCB1cGRhdGVSb3dzIHVwZGF0ZUNlbGwgYWRkUm93cyB1cGRhdGVDb21wbGV0ZSBzb3J0b24gYXBwZW5kQ2FjaGUgdXBkYXRlQ2FjaGUgYXBwbHlXaWRnZXRJZCBhcHBseVdpZGdldHMgcmVmcmVzaFdpZGdldHMgZGVzdHJveSBtb3VzZXVwIG1vdXNlbGVhdmUga2V5cHJlc3Mgc29ydEJlZ2luIHNvcnRFbmQgcmVzZXRUb0xvYWRTdGF0ZSBcIi5zcGxpdChcIiBcIikuam9pbihkLm5hbWVzcGFjZSsgXCIgXCIpKTtkLiRoZWFkZXJzLmFkZChrKS5yZW1vdmVDbGFzcyhbZy5jc3MuaGVhZGVyLGQuY3NzSGVhZGVyLGQuY3NzQXNjLGQuY3NzRGVzYyxnLmNzcy5zb3J0QXNjLGcuY3NzLnNvcnREZXNjLGcuY3NzLnNvcnROb25lXS5qb2luKFwiIFwiKSkucmVtb3ZlQXR0cihcImRhdGEtY29sdW1uXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWxhYmVsXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpO20uZmluZChkLnNlbGVjdG9yU29ydCkudW5iaW5kKFtcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwia2V5cHJlc3NcIixcIlwiXS5qb2luKGQubmFtZXNwYWNlK1wiIFwiKSk7Zy5yZXN0b3JlSGVhZGVycyhiKTtlLnRvZ2dsZUNsYXNzKGcuY3NzLnRhYmxlK1wiIFwiK2QudGFibGVDbGFzcytcIiB0YWJsZXNvcnRlci1cIitkLnRoZW1lLCExPT09YSk7Yi5oYXNJbml0aWFsaXplZD0hMTtkZWxldGUgYi5jb25maWcuY2FjaGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMmJmMoYil9fTtnLnJlZ2V4PXtjaHVuazovKF4oWytcXC1dPyg/OjB8WzEtOV1cXGQqKSg/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/KT8kfF4weFswLTlhLWZdKyR8XFxkKykvZ2ksIGNodW5rczovKF5cXFxcMHxcXFxcMCQpLyxoZXg6L14weFswLTlhLWZdKyQvaX07Zy5zb3J0TmF0dXJhbD1mdW5jdGlvbihiLGEpe2lmKGI9PT1hKXJldHVybiAwO3ZhciBjLGUsZCxmLGgsaztlPWcucmVnZXg7aWYoZS5oZXgudGVzdChhKSl7Yz1wYXJzZUludChiLm1hdGNoKGUuaGV4KSwxNik7ZD1wYXJzZUludChhLm1hdGNoKGUuaGV4KSwxNik7aWYoYzxkKXJldHVybi0xO2lmKGM+ZClyZXR1cm4gMX1jPWIucmVwbGFjZShlLmNodW5rLFwiXFxcXDAkMVxcXFwwXCIpLnJlcGxhY2UoZS5jaHVua3MsXCJcIikuc3BsaXQoXCJcXFxcMFwiKTtlPWEucmVwbGFjZShlLmNodW5rLFwiXFxcXDAkMVxcXFwwXCIpLnJlcGxhY2UoZS5jaHVua3MsXCJcIikuc3BsaXQoXCJcXFxcMFwiKTtrPU1hdGgubWF4KGMubGVuZ3RoLGUubGVuZ3RoKTtmb3IoaD0wO2g8aztoKyspe2Q9aXNOYU4oY1toXSk/Y1toXXx8MDpwYXJzZUZsb2F0KGNbaF0pfHwwO2Y9aXNOYU4oZVtoXSk/ZVtoXXx8MDpwYXJzZUZsb2F0KGVbaF0pfHwwO2lmKGlzTmFOKGQpIT09IGlzTmFOKGYpKXJldHVybiBpc05hTihkKT8xOi0xO3R5cGVvZiBkIT09dHlwZW9mIGYmJihkKz1cIlwiLGYrPVwiXCIpO2lmKGQ8ZilyZXR1cm4tMTtpZihkPmYpcmV0dXJuIDF9cmV0dXJuIDB9O2cuc29ydE5hdHVyYWxBc2M9ZnVuY3Rpb24oYixhLGMsZSxkKXtpZihiPT09YSlyZXR1cm4gMDtjPWQuc3RyaW5nW2QuZW1wdGllc1tjXXx8ZC5lbXB0eVRvXTtyZXR1cm5cIlwiPT09YiYmMCE9PWM/XCJib29sZWFuXCI9PT10eXBlb2YgYz9jPy0xOjE6LWN8fC0xOlwiXCI9PT1hJiYwIT09Yz9cImJvb2xlYW5cIj09PXR5cGVvZiBjP2M/MTotMTpjfHwxOmcuc29ydE5hdHVyYWwoYixhKX07Zy5zb3J0TmF0dXJhbERlc2M9ZnVuY3Rpb24oYixhLGMsZSxkKXtpZihiPT09YSlyZXR1cm4gMDtjPWQuc3RyaW5nW2QuZW1wdGllc1tjXXx8ZC5lbXB0eVRvXTtyZXR1cm5cIlwiPT09YiYmMCE9PWM/XCJib29sZWFuXCI9PT10eXBlb2YgYz9jPy0xOjE6Y3x8MTpcIlwiPT09YSYmMCE9PWM/XCJib29sZWFuXCI9PT10eXBlb2YgYz9jPyAxOi0xOi1jfHwtMTpnLnNvcnROYXR1cmFsKGEsYil9O2cuc29ydFRleHQ9ZnVuY3Rpb24oYixhKXtyZXR1cm4gYj5hPzE6YjxhPy0xOjB9O2cuZ2V0VGV4dFZhbHVlPWZ1bmN0aW9uKGIsYSxjKXtpZihjKXt2YXIgZT1iP2IubGVuZ3RoOjAsZD1jK2E7Zm9yKGM9MDtjPGU7YysrKWQrPWIuY2hhckNvZGVBdChjKTtyZXR1cm4gYSpkfXJldHVybiAwfTtnLnNvcnROdW1lcmljQXNjPWZ1bmN0aW9uKGIsYSxjLGUsZCxmKXtpZihiPT09YSlyZXR1cm4gMDtmPWYuY29uZmlnO2Q9Zi5zdHJpbmdbZi5lbXB0aWVzW2RdfHxmLmVtcHR5VG9dO2lmKFwiXCI9PT1iJiYwIT09ZClyZXR1cm5cImJvb2xlYW5cIj09PXR5cGVvZiBkP2Q/LTE6MTotZHx8LTE7aWYoXCJcIj09PWEmJjAhPT1kKXJldHVyblwiYm9vbGVhblwiPT09dHlwZW9mIGQ/ZD8xOi0xOmR8fDE7aXNOYU4oYikmJihiPWcuZ2V0VGV4dFZhbHVlKGIsYyxlKSk7aXNOYU4oYSkmJihhPWcuZ2V0VGV4dFZhbHVlKGEsYyxlKSk7cmV0dXJuIGItYX07Zy5zb3J0TnVtZXJpY0Rlc2M9IGZ1bmN0aW9uKGIsYSxjLGUsZCxmKXtpZihiPT09YSlyZXR1cm4gMDtmPWYuY29uZmlnO2Q9Zi5zdHJpbmdbZi5lbXB0aWVzW2RdfHxmLmVtcHR5VG9dO2lmKFwiXCI9PT1iJiYwIT09ZClyZXR1cm5cImJvb2xlYW5cIj09PXR5cGVvZiBkP2Q/LTE6MTpkfHwxO2lmKFwiXCI9PT1hJiYwIT09ZClyZXR1cm5cImJvb2xlYW5cIj09PXR5cGVvZiBkP2Q/MTotMTotZHx8LTE7aXNOYU4oYikmJihiPWcuZ2V0VGV4dFZhbHVlKGIsYyxlKSk7aXNOYU4oYSkmJihhPWcuZ2V0VGV4dFZhbHVlKGEsYyxlKSk7cmV0dXJuIGEtYn07Zy5zb3J0TnVtZXJpYz1mdW5jdGlvbihiLGEpe3JldHVybiBiLWF9O2cuY2hhcmFjdGVyRXF1aXZhbGVudHM9e2E6XCJcXHUwMGUxXFx1MDBlMFxcdTAwZTJcXHUwMGUzXFx1MDBlNFxcdTAxMDVcXHUwMGU1XCIsQTpcIlxcdTAwYzFcXHUwMGMwXFx1MDBjMlxcdTAwYzNcXHUwMGM0XFx1MDEwNFxcdTAwYzVcIixjOlwiXFx1MDBlN1xcdTAxMDdcXHUwMTBkXCIsQzpcIlxcdTAwYzdcXHUwMTA2XFx1MDEwY1wiLGU6XCJcXHUwMGU5XFx1MDBlOFxcdTAwZWFcXHUwMGViXFx1MDExYlxcdTAxMTlcIiwgRTpcIlxcdTAwYzlcXHUwMGM4XFx1MDBjYVxcdTAwY2JcXHUwMTFhXFx1MDExOFwiLGk6XCJcXHUwMGVkXFx1MDBlY1xcdTAxMzBcXHUwMGVlXFx1MDBlZlxcdTAxMzFcIixJOlwiXFx1MDBjZFxcdTAwY2NcXHUwMTMwXFx1MDBjZVxcdTAwY2ZcIixvOlwiXFx1MDBmM1xcdTAwZjJcXHUwMGY0XFx1MDBmNVxcdTAwZjZcIixPOlwiXFx1MDBkM1xcdTAwZDJcXHUwMGQ0XFx1MDBkNVxcdTAwZDZcIixzczpcIlxcdTAwZGZcIixTUzpcIlxcdTFlOWVcIix1OlwiXFx1MDBmYVxcdTAwZjlcXHUwMGZiXFx1MDBmY1xcdTAxNmZcIixVOlwiXFx1MDBkYVxcdTAwZDlcXHUwMGRiXFx1MDBkY1xcdTAxNmVcIn07Zy5yZXBsYWNlQWNjZW50cz1mdW5jdGlvbihiKXt2YXIgYSxjPVwiW1wiLGU9Zy5jaGFyYWN0ZXJFcXVpdmFsZW50cztpZighZy5jaGFyYWN0ZXJSZWdleCl7Zy5jaGFyYWN0ZXJSZWdleEFycmF5PXt9O2ZvcihhIGluIGUpXCJzdHJpbmdcIj09PXR5cGVvZiBhJiYoYys9ZVthXSxnLmNoYXJhY3RlclJlZ2V4QXJyYXlbYV09bmV3IFJlZ0V4cChcIltcIitlW2FdK1wiXVwiLFwiZ1wiKSk7Zy5jaGFyYWN0ZXJSZWdleD0gbmV3IFJlZ0V4cChjK1wiXVwiKX1pZihnLmNoYXJhY3RlclJlZ2V4LnRlc3QoYikpZm9yKGEgaW4gZSlcInN0cmluZ1wiPT09dHlwZW9mIGEmJihiPWIucmVwbGFjZShnLmNoYXJhY3RlclJlZ2V4QXJyYXlbYV0sYSkpO3JldHVybiBifTtnLmlzVmFsdWVJbkFycmF5PWZ1bmN0aW9uKGIsYSl7dmFyIGMsZT1hLmxlbmd0aDtmb3IoYz0wO2M8ZTtjKyspaWYoYVtjXVswXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9O2cuYWRkUGFyc2VyPWZ1bmN0aW9uKGIpe3ZhciBhLGM9Zy5wYXJzZXJzLmxlbmd0aCxlPSEwO2ZvcihhPTA7YTxjO2ErKylnLnBhcnNlcnNbYV0uaWQudG9Mb3dlckNhc2UoKT09PWIuaWQudG9Mb3dlckNhc2UoKSYmKGU9ITEpO2UmJmcucGFyc2Vycy5wdXNoKGIpfTtnLmdldFBhcnNlckJ5SWQ9ZnVuY3Rpb24oYil7aWYoXCJmYWxzZVwiPT1iKXJldHVybiExO3ZhciBhLGM9Zy5wYXJzZXJzLmxlbmd0aDtmb3IoYT0wO2E8YzthKyspaWYoZy5wYXJzZXJzW2FdLmlkLnRvTG93ZXJDYXNlKCk9PT0gYi50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkpcmV0dXJuIGcucGFyc2Vyc1thXTtyZXR1cm4hMX07Zy5hZGRXaWRnZXQ9ZnVuY3Rpb24oYil7Zy53aWRnZXRzLnB1c2goYil9O2cuaGFzV2lkZ2V0PWZ1bmN0aW9uKGIsYSl7Yj1oKGIpO3JldHVybiBiLmxlbmd0aCYmYlswXS5jb25maWcmJmJbMF0uY29uZmlnLndpZGdldEluaXRbYV18fCExfTtnLmdldFdpZGdldEJ5SWQ9ZnVuY3Rpb24oYil7dmFyIGEsYyxlPWcud2lkZ2V0cy5sZW5ndGg7Zm9yKGE9MDthPGU7YSsrKWlmKChjPWcud2lkZ2V0c1thXSkmJmMuaGFzT3duUHJvcGVydHkoXCJpZFwiKSYmYy5pZC50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpKXJldHVybiBjfTtnLmFwcGx5V2lkZ2V0PWZ1bmN0aW9uKGIsYSl7Yj1oKGIpWzBdO3ZhciBjPWIuY29uZmlnLGU9Yy53aWRnZXRPcHRpb25zLGQ9XCIgXCIrYy50YWJsZS5jbGFzc05hbWUrXCIgXCIsZj1bXSxtLGssbjshMSE9PWEmJmIuaGFzSW5pdGlhbGl6ZWQmJihiLmlzQXBwbHlpbmdXaWRnZXRzfHwgYi5pc1VwZGF0aW5nKXx8KGMuZGVidWcmJihtPW5ldyBEYXRlKSxuPW5ldyBSZWdFeHAoXCJcXFxcc1wiK2Mud2lkZ2V0Q2xhc3MucmVwbGFjZSgvXFx7bmFtZVxcfS9pLFwiKFtcXFxcdy1dKylcIikrXCJcXFxcc1wiLFwiZ1wiKSxkLm1hdGNoKG4pJiYoZD1kLm1hdGNoKG4pKSYmaC5lYWNoKGQsZnVuY3Rpb24oYSxiKXtjLndpZGdldHMucHVzaChiLnJlcGxhY2UobixcIiQxXCIpKX0pLGMud2lkZ2V0cy5sZW5ndGgmJihiLmlzQXBwbHlpbmdXaWRnZXRzPSEwLGMud2lkZ2V0cz1oLmdyZXAoYy53aWRnZXRzLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGguaW5BcnJheShhLGMud2lkZ2V0cyk9PT1ifSksaC5lYWNoKGMud2lkZ2V0c3x8W10sZnVuY3Rpb24oYSxiKXsobj1nLmdldFdpZGdldEJ5SWQoYikpJiZuLmlkJiYobi5wcmlvcml0eXx8KG4ucHJpb3JpdHk9MTApLGZbYV09bil9KSxmLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5wcmlvcml0eTxiLnByaW9yaXR5Py0xOmEucHJpb3JpdHk9PT1iLnByaW9yaXR5PyAwOjF9KSxoLmVhY2goZixmdW5jdGlvbihkLGYpe2lmKGYpe2lmKGF8fCFjLndpZGdldEluaXRbZi5pZF0pYy53aWRnZXRJbml0W2YuaWRdPSEwLGYuaGFzT3duUHJvcGVydHkoXCJvcHRpb25zXCIpJiYoZT1iLmNvbmZpZy53aWRnZXRPcHRpb25zPWguZXh0ZW5kKCEwLHt9LGYub3B0aW9ucyxlKSksZi5oYXNPd25Qcm9wZXJ0eShcImluaXRcIikmJihjLmRlYnVnJiYoaz1uZXcgRGF0ZSksZi5pbml0KGIsZixjLGUpLGMuZGVidWcmJmcuYmVuY2htYXJrKFwiSW5pdGlhbGl6aW5nIFwiK2YuaWQrXCIgd2lkZ2V0XCIsaykpOyFhJiZmLmhhc093blByb3BlcnR5KFwiZm9ybWF0XCIpJiYoYy5kZWJ1ZyYmKGs9bmV3IERhdGUpLGYuZm9ybWF0KGIsYyxlLCExKSxjLmRlYnVnJiZnLmJlbmNobWFyaygoYT9cIkluaXRpYWxpemluZyBcIjpcIkFwcGx5aW5nIFwiKStmLmlkK1wiIHdpZGdldFwiLGspKX19KSksc2V0VGltZW91dChmdW5jdGlvbigpe2IuaXNBcHBseWluZ1dpZGdldHM9ITE7aC5kYXRhKGIsXCJsYXN0V2lkZ2V0QXBwbGljYXRpb25cIiwgbmV3IERhdGUpfSwwKSxjLmRlYnVnJiYoZD1jLndpZGdldHMubGVuZ3RoLHUoXCJDb21wbGV0ZWQgXCIrKCEwPT09YT9cImluaXRpYWxpemluZyBcIjpcImFwcGx5aW5nIFwiKStkK1wiIHdpZGdldFwiKygxIT09ZD9cInNcIjpcIlwiKSxtKSkpfTtnLnJlZnJlc2hXaWRnZXRzPWZ1bmN0aW9uKGIsYSxjKXtiPWgoYilbMF07dmFyIGUsZD1iLmNvbmZpZyxsPWQud2lkZ2V0cyxtPWcud2lkZ2V0cyxrPW0ubGVuZ3RoO2ZvcihlPTA7ZTxrO2UrKyltW2VdJiZtW2VdLmlkJiYoYXx8MD5oLmluQXJyYXkobVtlXS5pZCxsKSkmJihkLmRlYnVnJiZmKCdSZWZlc2hpbmcgd2lkZ2V0czogUmVtb3ZpbmcgXCInK21bZV0uaWQrJ1wiJyksbVtlXS5oYXNPd25Qcm9wZXJ0eShcInJlbW92ZVwiKSYmZC53aWRnZXRJbml0W21bZV0uaWRdJiYobVtlXS5yZW1vdmUoYixkLGQud2lkZ2V0T3B0aW9ucyksZC53aWRnZXRJbml0W21bZV0uaWRdPSExKSk7ITAhPT1jJiZnLmFwcGx5V2lkZ2V0KGIsYSl9O2cuZ2V0RGF0YT1mdW5jdGlvbihiLCBhLGMpe3ZhciBlPVwiXCI7Yj1oKGIpO3ZhciBkLGY7aWYoIWIubGVuZ3RoKXJldHVyblwiXCI7ZD1oLm1ldGFkYXRhP2IubWV0YWRhdGEoKTohMTtmPVwiIFwiKyhiLmF0dHIoXCJjbGFzc1wiKXx8XCJcIik7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiLmRhdGEoYyl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYi5kYXRhKGMudG9Mb3dlckNhc2UoKSk/ZSs9Yi5kYXRhKGMpfHxiLmRhdGEoYy50b0xvd2VyQ2FzZSgpKTpkJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRbY10/ZSs9ZFtjXTphJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGFbY10/ZSs9YVtjXTpcIiBcIiE9PWYmJmYubWF0Y2goXCIgXCIrYytcIi1cIikmJihlPWYubWF0Y2gobmV3IFJlZ0V4cChcIlxcXFxzXCIrYytcIi0oW1xcXFx3LV0rKVwiKSlbMV18fFwiXCIpO3JldHVybiBoLnRyaW0oZSl9O2cuZm9ybWF0RmxvYXQ9ZnVuY3Rpb24oYixhKXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGJ8fFwiXCI9PT1iKXJldHVybiBiO3ZhciBjO2I9KGEmJmEuY29uZmlnPyExIT09YS5jb25maWcudXNOdW1iZXJGb3JtYXQ6IFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYT9hOjEpP2IucmVwbGFjZSgvLC9nLFwiXCIpOmIucmVwbGFjZSgvW1xcc3xcXC5dL2csXCJcIikucmVwbGFjZSgvLC9nLFwiLlwiKTsvXlxccypcXChbLlxcZF0rXFwpLy50ZXN0KGIpJiYoYj1iLnJlcGxhY2UoL15cXHMqXFwoKFsuXFxkXSspXFwpLyxcIi0kMVwiKSk7Yz1wYXJzZUZsb2F0KGIpO3JldHVybiBpc05hTihjKT9oLnRyaW0oYik6Y307Zy5pc0RpZ2l0PWZ1bmN0aW9uKGIpe3JldHVybiBpc05hTihiKT8vXltcXC0rKF0/XFxkK1spXT8kLy50ZXN0KGIudG9TdHJpbmcoKS5yZXBsYWNlKC9bLC4nXCJcXHNdL2csXCJcIikpOiEwfX19KTt2YXIgcT1oLnRhYmxlc29ydGVyO2guZm4uZXh0ZW5kKHt0YWJsZXNvcnRlcjpxLmNvbnN0cnVjdH0pO3EuYWRkUGFyc2VyKHtpZDpcIm5vLXBhcnNlclwiLGlzOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGZvcm1hdDpmdW5jdGlvbigpe3JldHVyblwiXCJ9LHR5cGU6XCJ0ZXh0XCJ9KTtxLmFkZFBhcnNlcih7aWQ6XCJ0ZXh0XCIsaXM6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sIGZvcm1hdDpmdW5jdGlvbihmLHUpe3ZhciBtPXUuY29uZmlnO2YmJihmPWgudHJpbShtLmlnbm9yZUNhc2U/Zi50b0xvY2FsZUxvd2VyQ2FzZSgpOmYpLGY9bS5zb3J0TG9jYWxlQ29tcGFyZT9xLnJlcGxhY2VBY2NlbnRzKGYpOmYpO3JldHVybiBmfSx0eXBlOlwidGV4dFwifSk7cS5hZGRQYXJzZXIoe2lkOlwiZGlnaXRcIixpczpmdW5jdGlvbihmKXtyZXR1cm4gcS5pc0RpZ2l0KGYpfSxmb3JtYXQ6ZnVuY3Rpb24oZix1KXt2YXIgbT1xLmZvcm1hdEZsb2F0KChmfHxcIlwiKS5yZXBsYWNlKC9bXlxcdywuIFxcLSgpXS9nLFwiXCIpLHUpO3JldHVybiBmJiZcIm51bWJlclwiPT09dHlwZW9mIG0/bTpmP2gudHJpbShmJiZ1LmNvbmZpZy5pZ25vcmVDYXNlP2YudG9Mb2NhbGVMb3dlckNhc2UoKTpmKTpmfSx0eXBlOlwibnVtZXJpY1wifSk7cS5hZGRQYXJzZXIoe2lkOlwiY3VycmVuY3lcIixpczpmdW5jdGlvbihmKXtyZXR1cm4vXlxcKD9cXGQrW1xcdTAwYTMkXFx1MjBhY1xcdTAwYTRcXHUwMGE1XFx1MDBhMj8uXXxbXFx1MDBhMyRcXHUyMGFjXFx1MDBhNFxcdTAwYTVcXHUwMGEyPy5dXFxkK1xcKT8kLy50ZXN0KChmfHwgXCJcIikucmVwbGFjZSgvWytcXC0sLiBdL2csXCJcIikpfSxmb3JtYXQ6ZnVuY3Rpb24oZix1KXt2YXIgbT1xLmZvcm1hdEZsb2F0KChmfHxcIlwiKS5yZXBsYWNlKC9bXlxcdywuIFxcLSgpXS9nLFwiXCIpLHUpO3JldHVybiBmJiZcIm51bWJlclwiPT09dHlwZW9mIG0/bTpmP2gudHJpbShmJiZ1LmNvbmZpZy5pZ25vcmVDYXNlP2YudG9Mb2NhbGVMb3dlckNhc2UoKTpmKTpmfSx0eXBlOlwibnVtZXJpY1wifSk7cS5hZGRQYXJzZXIoe2lkOlwidXJsXCIsaXM6ZnVuY3Rpb24oZil7cmV0dXJuL14oaHR0cHM/fGZ0cHxmaWxlKTpcXC9cXC8vLnRlc3QoZil9LGZvcm1hdDpmdW5jdGlvbihmKXtyZXR1cm4gZj9oLnRyaW0oZi5yZXBsYWNlKC8oaHR0cHM/fGZ0cHxmaWxlKTpcXC9cXC8vLFwiXCIpKTpmfSxwYXJzZWQ6ITAsdHlwZTpcInRleHRcIn0pO3EuYWRkUGFyc2VyKHtpZDpcImlzb0RhdGVcIixpczpmdW5jdGlvbihmKXtyZXR1cm4vXlxcZHs0fVtcXC9cXC1dXFxkezEsMn1bXFwvXFwtXVxcZHsxLDJ9Ly50ZXN0KGYpfSxmb3JtYXQ6ZnVuY3Rpb24oZiwgaCl7dmFyIG09Zj9uZXcgRGF0ZShmLnJlcGxhY2UoLy0vZyxcIi9cIikpOmY7cmV0dXJuIG0gaW5zdGFuY2VvZiBEYXRlJiZpc0Zpbml0ZShtKT9tLmdldFRpbWUoKTpmfSx0eXBlOlwibnVtZXJpY1wifSk7cS5hZGRQYXJzZXIoe2lkOlwicGVyY2VudFwiLGlzOmZ1bmN0aW9uKGYpe3JldHVybi8oXFxkXFxzKj8lfCVcXHMqP1xcZCkvLnRlc3QoZikmJjE1PmYubGVuZ3RofSxmb3JtYXQ6ZnVuY3Rpb24oZixoKXtyZXR1cm4gZj9xLmZvcm1hdEZsb2F0KGYucmVwbGFjZSgvJS9nLFwiXCIpLGgpOmZ9LHR5cGU6XCJudW1lcmljXCJ9KTtxLmFkZFBhcnNlcih7aWQ6XCJpbWFnZVwiLGlzOmZ1bmN0aW9uKGYsaCxtLHEpe3JldHVybiAwPHEuZmluZChcImltZ1wiKS5sZW5ndGh9LGZvcm1hdDpmdW5jdGlvbihmLHUsbSl7cmV0dXJuIGgobSkuZmluZChcImltZ1wiKS5hdHRyKHUuY29uZmlnLmltZ0F0dHJ8fFwiYWx0XCIpfHxmfSxwYXJzZWQ6ITAsdHlwZTpcInRleHRcIn0pO3EuYWRkUGFyc2VyKHtpZDpcInVzTG9uZ0RhdGVcIixpczpmdW5jdGlvbihmKXtyZXR1cm4vXltBLVpdezMsMTB9XFwuP1xccytcXGR7MSwyfSw/XFxzKyhcXGR7NH0pKFxccytcXGR7MSwyfTpcXGR7Mn0oOlxcZHsyfSk/KFxccytbQVBdTSk/KT8kL2kudGVzdChmKXx8IC9eXFxkezEsMn1cXHMrW0EtWl17MywxMH1cXHMrXFxkezR9L2kudGVzdChmKX0sZm9ybWF0OmZ1bmN0aW9uKGYsaCl7dmFyIG09Zj9uZXcgRGF0ZShmLnJlcGxhY2UoLyhcXFMpKFtBUF1NKSQvaSxcIiQxICQyXCIpKTpmO3JldHVybiBtIGluc3RhbmNlb2YgRGF0ZSYmaXNGaW5pdGUobSk/bS5nZXRUaW1lKCk6Zn0sdHlwZTpcIm51bWVyaWNcIn0pO3EuYWRkUGFyc2VyKHtpZDpcInNob3J0RGF0ZVwiLGlzOmZ1bmN0aW9uKGYpe3JldHVybi8oXlxcZHsxLDJ9W1xcL1xcc11cXGR7MSwyfVtcXC9cXHNdXFxkezR9KXwoXlxcZHs0fVtcXC9cXHNdXFxkezEsMn1bXFwvXFxzXVxcZHsxLDJ9KS8udGVzdCgoZnx8XCJcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS5yZXBsYWNlKC9bXFwtLixdL2csXCIvXCIpKX0sZm9ybWF0OmZ1bmN0aW9uKGYsaCxtLHQpe2lmKGYpe209aC5jb25maWc7dmFyIHg9bS4kaGVhZGVycy5maWx0ZXIoXCJbZGF0YS1jb2x1bW49XCIrdCtcIl06bGFzdFwiKTt0PXgubGVuZ3RoJiZ4WzBdLmRhdGVGb3JtYXR8fHEuZ2V0RGF0YSh4LCBxLmdldENvbHVtbkRhdGEoaCxtLmhlYWRlcnMsdCksXCJkYXRlRm9ybWF0XCIpfHxtLmRhdGVGb3JtYXQ7aD1mLnJlcGxhY2UoL1xccysvZyxcIiBcIikucmVwbGFjZSgvW1xcLS4sXS9nLFwiL1wiKTtcIm1tZGR5eXl5XCI9PT10P2g9aC5yZXBsYWNlKC8oXFxkezEsMn0pW1xcL1xcc10oXFxkezEsMn0pW1xcL1xcc10oXFxkezR9KS8sXCIkMy8kMS8kMlwiKTpcImRkbW15eXl5XCI9PT10P2g9aC5yZXBsYWNlKC8oXFxkezEsMn0pW1xcL1xcc10oXFxkezEsMn0pW1xcL1xcc10oXFxkezR9KS8sXCIkMy8kMi8kMVwiKTpcInl5eXltbWRkXCI9PT10JiYoaD1oLnJlcGxhY2UoLyhcXGR7NH0pW1xcL1xcc10oXFxkezEsMn0pW1xcL1xcc10oXFxkezEsMn0pLyxcIiQxLyQyLyQzXCIpKTtoPW5ldyBEYXRlKGgpO3JldHVybiBoIGluc3RhbmNlb2YgRGF0ZSYmaXNGaW5pdGUoaCk/aC5nZXRUaW1lKCk6Zn1yZXR1cm4gZn0sdHlwZTpcIm51bWVyaWNcIn0pO3EuYWRkUGFyc2VyKHtpZDpcInRpbWVcIixpczpmdW5jdGlvbihmKXtyZXR1cm4vXigoWzAtMl0/XFxkOlswLTVdXFxkKXwoWzAtMV0/XFxkOlswLTVdXFxkXFxzPyhbQVBdTSkpKSQvaS50ZXN0KGYpfSwgZm9ybWF0OmZ1bmN0aW9uKGYsaCl7dmFyIG09Zj9uZXcgRGF0ZShcIjIwMDAvMDEvMDEgXCIrZi5yZXBsYWNlKC8oXFxTKShbQVBdTSkkL2ksXCIkMSAkMlwiKSk6ZjtyZXR1cm4gbSBpbnN0YW5jZW9mIERhdGUmJmlzRmluaXRlKG0pP20uZ2V0VGltZSgpOmZ9LHR5cGU6XCJudW1lcmljXCJ9KTtxLmFkZFBhcnNlcih7aWQ6XCJtZXRhZGF0YVwiLGlzOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGZvcm1hdDpmdW5jdGlvbihmLHEsbSl7Zj1xLmNvbmZpZztmPWYucGFyc2VyTWV0YWRhdGFOYW1lP2YucGFyc2VyTWV0YWRhdGFOYW1lOlwic29ydFZhbHVlXCI7cmV0dXJuIGgobSkubWV0YWRhdGEoKVtmXX0sdHlwZTpcIm51bWVyaWNcIn0pO3EuYWRkV2lkZ2V0KHtpZDpcInplYnJhXCIscHJpb3JpdHk6OTAsZm9ybWF0OmZ1bmN0aW9uKGYscSxtKXt2YXIgdCx4LHosQSxGPW5ldyBSZWdFeHAocS5jc3NDaGlsZFJvdyxcImlcIiksRT1xLiR0Ym9kaWVzO2ZvcihmPTA7ZjxFLmxlbmd0aDtmKyspej0wLHQ9RS5lcShmKSx0PXQuY2hpbGRyZW4oXCJ0cjp2aXNpYmxlXCIpLm5vdChxLnNlbGVjdG9yUmVtb3ZlKSwgdC5lYWNoKGZ1bmN0aW9uKCl7eD1oKHRoaXMpO0YudGVzdCh0aGlzLmNsYXNzTmFtZSl8fHorKztBPTA9PT16JTI7eC5yZW1vdmVDbGFzcyhtLnplYnJhW0E/MTowXSkuYWRkQ2xhc3MobS56ZWJyYVtBPzA6MV0pfSl9LHJlbW92ZTpmdW5jdGlvbihmLGgsbSl7dmFyIHQ7aD1oLiR0Ym9kaWVzO3ZhciB4PShtLnplYnJhfHxbXCJldmVuXCIsXCJvZGRcIl0pLmpvaW4oXCIgXCIpO2ZvcihtPTA7bTxoLmxlbmd0aDttKyspdD1xLnByb2Nlc3NUYm9keShmLGguZXEobSksITApLHQuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcyh4KSxxLnByb2Nlc3NUYm9keShmLHQsITEpfX0pfShqUXVlcnkpO1xuIiwiLyohIHRhYmxlU29ydGVyIChGT1JLKSAyLjE2KyB3aWRnZXRzIC0gdXBkYXRlZCAxMS83LzIwMTQgKHYyLjE4LjMpXG4gKlxuICogQ29sdW1uIFN0eWxlc1xuICogQ29sdW1uIEZpbHRlcnNcbiAqIENvbHVtbiBSZXNpemluZ1xuICogU3RpY2t5IEhlYWRlclxuICogVUkgVGhlbWUgKGdlbmVyYWxpemVkKVxuICogU2F2ZSBTb3J0XG4gKiBbIFwiY29sdW1uc1wiLCBcImZpbHRlclwiLCBcInJlc2l6YWJsZVwiLCBcInN0aWNreUhlYWRlcnNcIiwgXCJ1aXRoZW1lXCIsIFwic2F2ZVNvcnRcIiBdXG4gKi9cbi8qanNoaW50IGJyb3dzZXI6dHJ1ZSwganF1ZXJ5OnRydWUsIHVudXNlZDpmYWxzZSwgbG9vcGZ1bmM6dHJ1ZSAqL1xuLypnbG9iYWwgalF1ZXJ5OiBmYWxzZSwgbG9jYWxTdG9yYWdlOiBmYWxzZSAqL1xuOyhmdW5jdGlvbiAoJCwgd2luZG93KSB7XG5cInVzZSBzdHJpY3RcIjtcbnZhciB0cyA9ICQudGFibGVzb3J0ZXIgPSAkLnRhYmxlc29ydGVyIHx8IHt9O1xuXG50cy50aGVtZXMgPSB7XG5cdFwiYm9vdHN0cmFwXCIgOiB7XG5cdFx0dGFibGUgICAgICA6ICd0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zdHJpcGVkJyxcblx0XHRjYXB0aW9uICAgIDogJ2NhcHRpb24nLFxuXHRcdGhlYWRlciAgICAgOiAnYm9vdHN0cmFwLWhlYWRlcicsIC8vIGdpdmUgdGhlIGhlYWRlciBhIGdyYWRpZW50IGJhY2tncm91bmRcblx0XHRmb290ZXJSb3cgIDogJycsXG5cdFx0Zm9vdGVyQ2VsbHM6ICcnLFxuXHRcdGljb25zICAgICAgOiAnJywgLy8gYWRkIFwiaWNvbi13aGl0ZVwiIHRvIG1ha2UgdGhlbSB3aGl0ZTsgdGhpcyBpY29uIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSA8aT4gaW4gdGhlIGhlYWRlclxuXHRcdHNvcnROb25lICAgOiAnYm9vdHN0cmFwLWljb24tdW5zb3J0ZWQnLFxuXHRcdHNvcnRBc2MgICAgOiAnaWNvbi1jaGV2cm9uLXVwIGdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcsXG5cdFx0c29ydERlc2MgICA6ICdpY29uLWNoZXZyb24tZG93biBnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicsXG5cdFx0YWN0aXZlICAgICA6ICcnLCAvLyBhcHBsaWVkIHdoZW4gY29sdW1uIGlzIHNvcnRlZFxuXHRcdGhvdmVyICAgICAgOiAnJywgLy8gdXNlIGN1c3RvbSBjc3MgaGVyZSAtIGJvb3RzdHJhcCBjbGFzcyBtYXkgbm90IG92ZXJyaWRlIGl0XG5cdFx0ZmlsdGVyUm93ICA6ICcnLCAvLyBmaWx0ZXIgcm93IGNsYXNzXG5cdFx0ZXZlbiAgICAgICA6ICcnLCAvLyBldmVuIHJvdyB6ZWJyYSBzdHJpcGluZ1xuXHRcdG9kZCAgICAgICAgOiAnJyAgLy8gb2RkIHJvdyB6ZWJyYSBzdHJpcGluZ1xuXHR9LFxuXHRcImp1aVwiIDoge1xuXHRcdHRhYmxlICAgICAgOiAndWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwnLCAvLyB0YWJsZSBjbGFzc2VzXG5cdFx0Y2FwdGlvbiAgICA6ICd1aS13aWRnZXQtY29udGVudCcsXG5cdFx0aGVhZGVyICAgICA6ICd1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGVmYXVsdCcsIC8vIGhlYWRlciBjbGFzc2VzXG5cdFx0Zm9vdGVyUm93ICA6ICcnLFxuXHRcdGZvb3RlckNlbGxzOiAnJyxcblx0XHRpY29ucyAgICAgIDogJ3VpLWljb24nLCAvLyBpY29uIGNsYXNzIGFkZGVkIHRvIHRoZSA8aT4gaW4gdGhlIGhlYWRlclxuXHRcdHNvcnROb25lICAgOiAndWktaWNvbi1jYXJhdC0yLW4tcycsXG5cdFx0c29ydEFzYyAgICA6ICd1aS1pY29uLWNhcmF0LTEtbicsXG5cdFx0c29ydERlc2MgICA6ICd1aS1pY29uLWNhcmF0LTEtcycsXG5cdFx0YWN0aXZlICAgICA6ICd1aS1zdGF0ZS1hY3RpdmUnLCAvLyBhcHBsaWVkIHdoZW4gY29sdW1uIGlzIHNvcnRlZFxuXHRcdGhvdmVyICAgICAgOiAndWktc3RhdGUtaG92ZXInLCAgLy8gaG92ZXIgY2xhc3Ncblx0XHRmaWx0ZXJSb3cgIDogJycsXG5cdFx0ZXZlbiAgICAgICA6ICd1aS13aWRnZXQtY29udGVudCcsIC8vIGV2ZW4gcm93IHplYnJhIHN0cmlwaW5nXG5cdFx0b2RkICAgICAgICA6ICd1aS1zdGF0ZS1kZWZhdWx0JyAgIC8vIG9kZCByb3cgemVicmEgc3RyaXBpbmdcblx0fVxufTtcblxuJC5leHRlbmQodHMuY3NzLCB7XG5cdGZpbHRlclJvdyA6ICd0YWJsZXNvcnRlci1maWx0ZXItcm93JywgICAvLyBmaWx0ZXJcblx0ZmlsdGVyICAgIDogJ3RhYmxlc29ydGVyLWZpbHRlcicsXG5cdHdyYXBwZXIgICA6ICd0YWJsZXNvcnRlci13cmFwcGVyJywgICAgICAvLyB1aSB0aGVtZSAmIHJlc2l6YWJsZVxuXHRyZXNpemVyICAgOiAndGFibGVzb3J0ZXItcmVzaXplcicsICAgICAgLy8gcmVzaXphYmxlXG5cdHN0aWNreSAgICA6ICd0YWJsZXNvcnRlci1zdGlja3lIZWFkZXInLCAvLyBzdGlja3lIZWFkZXJcblx0c3RpY2t5VmlzIDogJ3RhYmxlc29ydGVyLXN0aWNreS12aXNpYmxlJyxcblx0c3RpY2t5V3JhcDogJ3RhYmxlc29ydGVyLXN0aWNreS13cmFwcGVyJ1xufSk7XG5cbi8vICoqKiBTdG9yZSBkYXRhIGluIGxvY2FsIHN0b3JhZ2UsIHdpdGggYSBjb29raWUgZmFsbGJhY2sgKioqXG4vKiBJRTcgbmVlZHMgSlNPTiBsaWJyYXJ5IGZvciBKU09OLnN0cmluZ2lmeSAtIChodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1qc29uKVxuICAgaWYgeW91IG5lZWQgaXQsIHRoZW4gaW5jbHVkZSBodHRwczovL2dpdGh1Yi5jb20vZG91Z2xhc2Nyb2NrZm9yZC9KU09OLWpzXG5cbiAgICQucGFyc2VKU09OIGlzIG5vdCBhdmFpbGFibGUgaXMgalF1ZXJ5IHZlcnNpb25zIG9sZGVyIHRoYW4gMS40LjEsIHVzaW5nIG9sZGVyXG4gICB2ZXJzaW9ucyB3aWxsIG9ubHkgYWxsb3cgc3RvcmluZyBpbmZvcm1hdGlvbiBmb3Igb25lIHBhZ2UgYXQgYSB0aW1lXG5cbiAgIC8vICoqKiBTYXZlIGRhdGEgKEpTT04gZm9ybWF0IG9ubHkpICoqKlxuICAgLy8gdmFsIG11c3QgYmUgdmFsaWQgSlNPTi4uLiB1c2UgaHR0cDovL2pzb25saW50LmNvbS8gdG8gZW5zdXJlIGl0IGlzIHZhbGlkXG4gICB2YXIgdmFsID0geyBcIm15d2lkZ2V0XCIgOiBcImRhdGExXCIgfTsgLy8gdmFsaWQgSlNPTiB1c2VzIGRvdWJsZSBxdW90ZXNcbiAgIC8vICQudGFibGVzb3J0ZXIuc3RvcmFnZSh0YWJsZSwga2V5LCB2YWwpO1xuICAgJC50YWJsZXNvcnRlci5zdG9yYWdlKHRhYmxlLCAndGFibGVzb3J0ZXItbXl3aWRnZXQnLCB2YWwpO1xuXG4gICAvLyAqKiogR2V0IGRhdGE6ICQudGFibGVzb3J0ZXIuc3RvcmFnZSh0YWJsZSwga2V5KTsgKioqXG4gICB2ID0gJC50YWJsZXNvcnRlci5zdG9yYWdlKHRhYmxlLCAndGFibGVzb3J0ZXItbXl3aWRnZXQnKTtcbiAgIC8vIHZhbCBtYXkgYmUgZW1wdHksIHNvIGFsc28gY2hlY2sgZm9yIHlvdXIgZGF0YVxuICAgdmFsID0gKHYgJiYgdi5oYXNPd25Qcm9wZXJ0eSgnbXl3aWRnZXQnKSkgPyB2Lm15d2lkZ2V0IDogJyc7XG4gICBhbGVydCh2YWwpOyAvLyBcImRhdGExXCIgaWYgc2F2ZWQsIG9yIFwiXCIgaWYgbm90XG4qL1xudHMuc3RvcmFnZSA9IGZ1bmN0aW9uKHRhYmxlLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG5cdHRhYmxlID0gJCh0YWJsZSlbMF07XG5cdHZhciBjb29raWVJbmRleCwgY29va2llcywgZGF0ZSxcblx0XHRoYXNMb2NhbFN0b3JhZ2UgPSBmYWxzZSxcblx0XHR2YWx1ZXMgPSB7fSxcblx0XHRjID0gdGFibGUuY29uZmlnLFxuXHRcdCR0YWJsZSA9ICQodGFibGUpLFxuXHRcdGlkID0gb3B0aW9ucyAmJiBvcHRpb25zLmlkIHx8ICR0YWJsZS5hdHRyKG9wdGlvbnMgJiYgb3B0aW9ucy5ncm91cCB8fFxuXHRcdFx0J2RhdGEtdGFibGUtZ3JvdXAnKSB8fCB0YWJsZS5pZCB8fCAkKCcudGFibGVzb3J0ZXInKS5pbmRleCggJHRhYmxlICksXG5cdFx0dXJsID0gb3B0aW9ucyAmJiBvcHRpb25zLnVybCB8fCAkdGFibGUuYXR0cihvcHRpb25zICYmIG9wdGlvbnMucGFnZSB8fFxuXHRcdFx0J2RhdGEtdGFibGUtcGFnZScpIHx8IGMgJiYgYy5maXhlZFVybCB8fCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG5cdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC81NTU4NTU3XG5cdGlmIChcImxvY2FsU3RvcmFnZVwiIGluIHdpbmRvdykge1xuXHRcdHRyeSB7XG5cdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ190bXB0ZXN0JywgJ3RlbXAnKTtcblx0XHRcdGhhc0xvY2FsU3RvcmFnZSA9IHRydWU7XG5cdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ190bXB0ZXN0Jyk7XG5cdFx0fSBjYXRjaChlcnJvcikge31cblx0fVxuXHQvLyAqKiogZ2V0IHZhbHVlICoqKlxuXHRpZiAoJC5wYXJzZUpTT04pIHtcblx0XHRpZiAoaGFzTG9jYWxTdG9yYWdlKSB7XG5cdFx0XHR2YWx1ZXMgPSAkLnBhcnNlSlNPTihsb2NhbFN0b3JhZ2Vba2V5XSB8fCAne30nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gb2xkIGJyb3dzZXIsIHVzaW5nIGNvb2tpZXNcblx0XHRcdGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoL1s7XFxzfD1dLyk7XG5cdFx0XHQvLyBhZGQgb25lIHRvIGdldCBmcm9tIHRoZSBrZXkgdG8gdGhlIHZhbHVlXG5cdFx0XHRjb29raWVJbmRleCA9ICQuaW5BcnJheShrZXksIGNvb2tpZXMpICsgMTtcblx0XHRcdHZhbHVlcyA9IChjb29raWVJbmRleCAhPT0gMCkgPyAkLnBhcnNlSlNPTihjb29raWVzW2Nvb2tpZUluZGV4XSB8fCAne30nKSA6IHt9O1xuXHRcdH1cblx0fVxuXHQvLyBhbGxvdyB2YWx1ZSB0byBiZSBhbiBlbXB0eSBzdHJpbmcgdG9vXG5cdGlmICgodmFsdWUgfHwgdmFsdWUgPT09ICcnKSAmJiB3aW5kb3cuSlNPTiAmJiBKU09OLmhhc093blByb3BlcnR5KCdzdHJpbmdpZnknKSkge1xuXHRcdC8vIGFkZCB1bmlxdWUgaWRlbnRpZmllcnMgPSB1cmwgcGF0aG5hbWUgPiB0YWJsZSBJRC9pbmRleCBvbiBwYWdlID4gZGF0YVxuXHRcdGlmICghdmFsdWVzW3VybF0pIHtcblx0XHRcdHZhbHVlc1t1cmxdID0ge307XG5cdFx0fVxuXHRcdHZhbHVlc1t1cmxdW2lkXSA9IHZhbHVlO1xuXHRcdC8vICoqKiBzZXQgdmFsdWUgKioqXG5cdFx0aWYgKGhhc0xvY2FsU3RvcmFnZSkge1xuXHRcdFx0bG9jYWxTdG9yYWdlW2tleV0gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRlID0gbmV3IERhdGUoKTtcblx0XHRcdGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArICgzMTUzNmUrNikpOyAvLyAzNjUgZGF5c1xuXHRcdFx0ZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgKEpTT04uc3RyaW5naWZ5KHZhbHVlcykpLnJlcGxhY2UoL1xcXCIvZywnXFxcIicpICsgJzsgZXhwaXJlcz0nICsgZGF0ZS50b0dNVFN0cmluZygpICsgJzsgcGF0aD0vJztcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHZhbHVlcyAmJiB2YWx1ZXNbdXJsXSA/IHZhbHVlc1t1cmxdW2lkXSA6ICcnO1xuXHR9XG59O1xuXG4vLyBBZGQgYSByZXNpemUgZXZlbnQgdG8gdGFibGUgaGVhZGVyc1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZEhlYWRlclJlc2l6ZUV2ZW50ID0gZnVuY3Rpb24odGFibGUsIGRpc2FibGUsIHNldHRpbmdzKSB7XG5cdHRhYmxlID0gJCh0YWJsZSlbMF07IC8vIG1ha2Ugc3VyZSB3ZSdyZSB1c2lnIGEgZG9tIGVsZW1lbnRcblx0dmFyIGhlYWRlcnMsXG5cdFx0ZGVmYXVsdHMgPSB7XG5cdFx0XHR0aW1lciA6IDI1MFxuXHRcdH0sXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgc2V0dGluZ3MpLFxuXHRcdGMgPSB0YWJsZS5jb25maWcsXG5cdFx0d28gPSBjLndpZGdldE9wdGlvbnMsXG5cdFx0Y2hlY2tTaXplcyA9IGZ1bmN0aW9uKHRyaWdnZXJFdmVudCkge1xuXHRcdFx0d28ucmVzaXplX2ZsYWcgPSB0cnVlO1xuXHRcdFx0aGVhZGVycyA9IFtdO1xuXHRcdFx0Yy4kaGVhZGVycy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgJGhlYWRlciA9ICQodGhpcyksXG5cdFx0XHRcdFx0c2l6ZXMgPSAkaGVhZGVyLmRhdGEoJ3NhdmVkU2l6ZXMnKSB8fCBbMCwwXSwgLy8gZml4ZXMgIzM5NFxuXHRcdFx0XHRcdHdpZHRoID0gdGhpcy5vZmZzZXRXaWR0aCxcblx0XHRcdFx0XHRoZWlnaHQgPSB0aGlzLm9mZnNldEhlaWdodDtcblx0XHRcdFx0aWYgKHdpZHRoICE9PSBzaXplc1swXSB8fCBoZWlnaHQgIT09IHNpemVzWzFdKSB7XG5cdFx0XHRcdFx0JGhlYWRlci5kYXRhKCdzYXZlZFNpemVzJywgWyB3aWR0aCwgaGVpZ2h0IF0pO1xuXHRcdFx0XHRcdGhlYWRlcnMucHVzaCh0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoaGVhZGVycy5sZW5ndGggJiYgdHJpZ2dlckV2ZW50ICE9PSBmYWxzZSkge1xuXHRcdFx0XHRjLiR0YWJsZS50cmlnZ2VyKCdyZXNpemUnLCBbIGhlYWRlcnMgXSk7XG5cdFx0XHR9XG5cdFx0XHR3by5yZXNpemVfZmxhZyA9IGZhbHNlO1xuXHRcdH07XG5cdGNoZWNrU2l6ZXMoZmFsc2UpO1xuXHRjbGVhckludGVydmFsKHdvLnJlc2l6ZV90aW1lcik7XG5cdGlmIChkaXNhYmxlKSB7XG5cdFx0d28ucmVzaXplX2ZsYWcgPSBmYWxzZTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0d28ucmVzaXplX3RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHdvLnJlc2l6ZV9mbGFnKSB7IHJldHVybjsgfVxuXHRcdGNoZWNrU2l6ZXMoKTtcblx0fSwgb3B0aW9ucy50aW1lcik7XG59O1xuXG4vLyBXaWRnZXQ6IEdlbmVyYWwgVUkgdGhlbWVcbi8vIFwidWl0aGVtZVwiIG9wdGlvbiBpbiBcIndpZGdldE9wdGlvbnNcIlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZFdpZGdldCh7XG5cdGlkOiBcInVpdGhlbWVcIixcblx0cHJpb3JpdHk6IDEwLFxuXHRmb3JtYXQ6IGZ1bmN0aW9uKHRhYmxlLCBjLCB3bykge1xuXHRcdHZhciBpLCB0aW1lLCBjbGFzc2VzLCAkaGVhZGVyLCAkaWNvbiwgJHRmb290LCAkaCwgb2xkdGhlbWUsIG9sZHJlbW92ZSxcblx0XHRcdHRoZW1lc0FsbCA9IHRzLnRoZW1lcyxcblx0XHRcdCR0YWJsZSA9IGMuJHRhYmxlLFxuXHRcdFx0JGhlYWRlcnMgPSBjLiRoZWFkZXJzLFxuXHRcdFx0dGhlbWUgPSBjLnRoZW1lIHx8ICdqdWknLFxuXHRcdFx0dGhlbWVzID0gdGhlbWVzQWxsW3RoZW1lXSB8fCB0aGVtZXNBbGwuanVpLFxuXHRcdFx0cmVtb3ZlID0gWyB0aGVtZXMuc29ydE5vbmUsIHRoZW1lcy5zb3J0RGVzYywgdGhlbWVzLnNvcnRBc2MsIHRoZW1lcy5hY3RpdmUgXS5qb2luKCAnICcgKTtcblx0XHRpZiAoYy5kZWJ1ZykgeyB0aW1lID0gbmV3IERhdGUoKTsgfVxuXHRcdC8vIGluaXRpYWxpemF0aW9uIGNvZGUgLSBydW4gb25jZVxuXHRcdGlmICghJHRhYmxlLmhhc0NsYXNzKCd0YWJsZXNvcnRlci0nICsgdGhlbWUpIHx8IGMudGhlbWUgIT09IGMuYXBwbGllZFRoZW1lIHx8ICF0YWJsZS5oYXNJbml0aWFsaXplZCkge1xuXHRcdFx0b2xkdGhlbWUgPSB0aGVtZXNbYy5hcHBsaWVkVGhlbWVdIHx8IHt9O1xuXHRcdFx0b2xkcmVtb3ZlID0gb2xkdGhlbWUgPyBbIG9sZHRoZW1lLnNvcnROb25lLCBvbGR0aGVtZS5zb3J0RGVzYywgb2xkdGhlbWUuc29ydEFzYywgb2xkdGhlbWUuYWN0aXZlIF0uam9pbiggJyAnICkgOiAnJztcblx0XHRcdGlmIChvbGR0aGVtZSkge1xuXHRcdFx0XHR3by56ZWJyYVswXSA9IHdvLnplYnJhWzBdLnJlcGxhY2UoJyAnICsgb2xkdGhlbWUuZXZlbiwgJycpO1xuXHRcdFx0XHR3by56ZWJyYVsxXSA9IHdvLnplYnJhWzFdLnJlcGxhY2UoJyAnICsgb2xkdGhlbWUub2RkLCAnJyk7XG5cdFx0XHR9XG5cdFx0XHQvLyB1cGRhdGUgemVicmEgc3RyaXBlc1xuXHRcdFx0aWYgKHRoZW1lcy5ldmVuICE9PSAnJykgeyB3by56ZWJyYVswXSArPSAnICcgKyB0aGVtZXMuZXZlbjsgfVxuXHRcdFx0aWYgKHRoZW1lcy5vZGQgIT09ICcnKSB7IHdvLnplYnJhWzFdICs9ICcgJyArIHRoZW1lcy5vZGQ7IH1cblx0XHRcdC8vIGFkZCBjYXB0aW9uIHN0eWxlXG5cdFx0XHQkdGFibGUuY2hpbGRyZW4oJ2NhcHRpb24nKS5yZW1vdmVDbGFzcyhvbGR0aGVtZS5jYXB0aW9uKS5hZGRDbGFzcyh0aGVtZXMuY2FwdGlvbik7XG5cdFx0XHQvLyBhZGQgdGFibGUvZm9vdGVyIGNsYXNzIG5hbWVzXG5cdFx0XHQkdGZvb3QgPSAkdGFibGVcblx0XHRcdFx0Ly8gcmVtb3ZlIG90aGVyIHNlbGVjdGVkIHRoZW1lc1xuXHRcdFx0XHQucmVtb3ZlQ2xhc3MoIGMuYXBwbGllZFRoZW1lID8gJ3RhYmxlc29ydGVyLScgKyAoIGMuYXBwbGllZFRoZW1lIHx8ICcnICkgOiAnJyApXG5cdFx0XHRcdC5hZGRDbGFzcygndGFibGVzb3J0ZXItJyArIHRoZW1lICsgJyAnICsgdGhlbWVzLnRhYmxlKSAvLyBhZGQgdGhlbWUgd2lkZ2V0IGNsYXNzIG5hbWVcblx0XHRcdFx0LmNoaWxkcmVuKCd0Zm9vdCcpO1xuXHRcdFx0aWYgKCR0Zm9vdC5sZW5ndGgpIHtcblx0XHRcdFx0JHRmb290XG5cdFx0XHRcdFx0Ly8gaWYgb2xkdGhlbWUuZm9vdGVyUm93IG9yIG9sZHRoZW1lLmZvb3RlckNlbGxzIGFyZSB1bmRlZmluZWQsIGFsbCBjbGFzcyBuYW1lcyBhcmUgcmVtb3ZlZFxuXHRcdFx0XHRcdC5jaGlsZHJlbigndHInKS5yZW1vdmVDbGFzcyhvbGR0aGVtZS5mb290ZXJSb3cgfHwgJycpLmFkZENsYXNzKHRoZW1lcy5mb290ZXJSb3cpXG5cdFx0XHRcdFx0LmNoaWxkcmVuKCd0aCwgdGQnKS5yZW1vdmVDbGFzcyhvbGR0aGVtZS5mb290ZXJDZWxscyB8fCAnJykuYWRkQ2xhc3ModGhlbWVzLmZvb3RlckNlbGxzKTtcblx0XHRcdH1cblx0XHRcdC8vIHVwZGF0ZSBoZWFkZXIgY2xhc3Nlc1xuXHRcdFx0JGhlYWRlcnNcblx0XHRcdFx0LmFkZChjLiRleHRyYUhlYWRlcnMpXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyhvbGR0aGVtZS5oZWFkZXIgKyAnICcgKyBvbGR0aGVtZS5ob3ZlciArICcgJyArIG9sZHJlbW92ZSlcblx0XHRcdFx0LmFkZENsYXNzKHRoZW1lcy5oZWFkZXIpXG5cdFx0XHRcdC5ub3QoJy5zb3J0ZXItZmFsc2UnKVxuXHRcdFx0XHQuYmluZCgnbW91c2VlbnRlci50c3VpdGhlbWUgbW91c2VsZWF2ZS50c3VpdGhlbWUnLCBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdC8vIHRvZ2dsZUNsYXNzIHdpdGggc3dpdGNoIGFkZGVkIGluIGpRdWVyeSAxLjNcblx0XHRcdFx0XHQkKHRoaXMpWyBldmVudC50eXBlID09PSAnbW91c2VlbnRlcicgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJyBdKHRoZW1lcy5ob3Zlcik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0aWYgKCEkaGVhZGVycy5maW5kKCcuJyArIHRzLmNzcy53cmFwcGVyKS5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gRmlyZWZveCBuZWVkcyB0aGlzIGlubmVyIGRpdiB0byBwb3NpdGlvbiB0aGUgcmVzaXplciBjb3JyZWN0bHlcblx0XHRcdFx0JGhlYWRlcnMud3JhcElubmVyKCc8ZGl2IGNsYXNzPVwiJyArIHRzLmNzcy53cmFwcGVyICsgJ1wiIHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJVwiPjwvZGl2PicpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGMuY3NzSWNvbikge1xuXHRcdFx0XHQvLyBpZiBjLmNzc0ljb24gaXMgJycsIHRoZW4gbm8gPGk+IGlzIGFkZGVkIHRvIHRoZSBoZWFkZXJcblx0XHRcdFx0JGhlYWRlcnMuZmluZCgnLicgKyB0cy5jc3MuaWNvbikucmVtb3ZlQ2xhc3Mob2xkdGhlbWUuaWNvbnMgKyAnICcgKyBvbGRyZW1vdmUpLmFkZENsYXNzKHRoZW1lcy5pY29ucyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJHRhYmxlLmhhc0NsYXNzKCdoYXNGaWx0ZXJzJykpIHtcblx0XHRcdFx0JHRhYmxlLmNoaWxkcmVuKCd0aGVhZCcpLmNoaWxkcmVuKCcuJyArIHRzLmNzcy5maWx0ZXJSb3cpLnJlbW92ZUNsYXNzKG9sZHRoZW1lLmZpbHRlclJvdykuYWRkQ2xhc3ModGhlbWVzLmZpbHRlclJvdyk7XG5cdFx0XHR9XG5cdFx0XHRjLmFwcGxpZWRUaGVtZSA9IGMudGhlbWU7XG5cdFx0fVxuXHRcdGZvciAoaSA9IDA7IGkgPCBjLmNvbHVtbnM7IGkrKykge1xuXHRcdFx0JGhlYWRlciA9IGMuJGhlYWRlcnMuYWRkKGMuJGV4dHJhSGVhZGVycykubm90KCcuc29ydGVyLWZhbHNlJykuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgaSArICdcIl0nKTtcblx0XHRcdCRpY29uID0gKHRzLmNzcy5pY29uKSA/ICRoZWFkZXIuZmluZCgnLicgKyB0cy5jc3MuaWNvbikgOiAkaGVhZGVyO1xuXHRcdFx0JGggPSAkaGVhZGVycy5ub3QoJy5zb3J0ZXItZmFsc2UnKS5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyBpICsgJ1wiXTpsYXN0Jyk7XG5cdFx0XHRpZiAoJGgubGVuZ3RoKSB7XG5cdFx0XHRcdGlmICgkaFswXS5zb3J0RGlzYWJsZWQpIHtcblx0XHRcdFx0XHQvLyBubyBzb3J0IGFycm93cyBmb3IgZGlzYWJsZWQgY29sdW1ucyFcblx0XHRcdFx0XHQkaGVhZGVyLnJlbW92ZUNsYXNzKHJlbW92ZSk7XG5cdFx0XHRcdFx0JGljb24ucmVtb3ZlQ2xhc3MocmVtb3ZlICsgJyAnICsgdGhlbWVzLmljb25zKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzID0gKCRoZWFkZXIuaGFzQ2xhc3ModHMuY3NzLnNvcnRBc2MpKSA/XG5cdFx0XHRcdFx0XHR0aGVtZXMuc29ydEFzYyA6XG5cdFx0XHRcdFx0XHQoJGhlYWRlci5oYXNDbGFzcyh0cy5jc3Muc29ydERlc2MpKSA/IHRoZW1lcy5zb3J0RGVzYyA6XG5cdFx0XHRcdFx0XHRcdCRoZWFkZXIuaGFzQ2xhc3ModHMuY3NzLmhlYWRlcikgPyB0aGVtZXMuc29ydE5vbmUgOiAnJztcblx0XHRcdFx0XHQkaGVhZGVyW2NsYXNzZXMgPT09IHRoZW1lcy5zb3J0Tm9uZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSh0aGVtZXMuYWN0aXZlKTtcblx0XHRcdFx0XHQkaWNvbi5yZW1vdmVDbGFzcyhyZW1vdmUpLmFkZENsYXNzKGNsYXNzZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChjLmRlYnVnKSB7XG5cdFx0XHR0cy5iZW5jaG1hcmsoXCJBcHBseWluZyBcIiArIHRoZW1lICsgXCIgdGhlbWVcIiwgdGltZSk7XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKHRhYmxlLCBjKSB7XG5cdFx0dmFyICR0YWJsZSA9IGMuJHRhYmxlLFxuXHRcdFx0dGhlbWUgPSBjLnRoZW1lIHx8ICdqdWknLFxuXHRcdFx0dGhlbWVzID0gdHMudGhlbWVzWyB0aGVtZSBdIHx8IHRzLnRoZW1lcy5qdWksXG5cdFx0XHQkaGVhZGVycyA9ICR0YWJsZS5jaGlsZHJlbigndGhlYWQnKS5jaGlsZHJlbigpLFxuXHRcdFx0cmVtb3ZlID0gdGhlbWVzLnNvcnROb25lICsgJyAnICsgdGhlbWVzLnNvcnREZXNjICsgJyAnICsgdGhlbWVzLnNvcnRBc2M7XG5cdFx0JHRhYmxlXG5cdFx0XHQucmVtb3ZlQ2xhc3MoJ3RhYmxlc29ydGVyLScgKyB0aGVtZSArICcgJyArIHRoZW1lcy50YWJsZSlcblx0XHRcdC5maW5kKHRzLmNzcy5oZWFkZXIpLnJlbW92ZUNsYXNzKHRoZW1lcy5oZWFkZXIpO1xuXHRcdCRoZWFkZXJzXG5cdFx0XHQudW5iaW5kKCdtb3VzZWVudGVyLnRzdWl0aGVtZSBtb3VzZWxlYXZlLnRzdWl0aGVtZScpIC8vIHJlbW92ZSBob3ZlclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoZW1lcy5ob3ZlciArICcgJyArIHJlbW92ZSArICcgJyArIHRoZW1lcy5hY3RpdmUpXG5cdFx0XHQuZmluZCgnLicgKyB0cy5jc3MuZmlsdGVyUm93KVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoZW1lcy5maWx0ZXJSb3cpO1xuXHRcdCRoZWFkZXJzLmZpbmQoJy4nICsgdHMuY3NzLmljb24pLnJlbW92ZUNsYXNzKHRoZW1lcy5pY29ucyk7XG5cdH1cbn0pO1xuXG4vLyBXaWRnZXQ6IENvbHVtbiBzdHlsZXNcbi8vIFwiY29sdW1uc1wiLCBcImNvbHVtbnNfdGhlYWRcIiAodHJ1ZSkgYW5kXG4vLyBcImNvbHVtbnNfdGZvb3RcIiAodHJ1ZSkgb3B0aW9ucyBpbiBcIndpZGdldE9wdGlvbnNcIlxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZFdpZGdldCh7XG5cdGlkOiBcImNvbHVtbnNcIixcblx0cHJpb3JpdHk6IDMwLFxuXHRvcHRpb25zIDoge1xuXHRcdGNvbHVtbnMgOiBbIFwicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcInRlcnRpYXJ5XCIgXVxuXHR9LFxuXHRmb3JtYXQ6IGZ1bmN0aW9uKHRhYmxlLCBjLCB3bykge1xuXHRcdHZhciAkdGJvZHksIHRib2R5SW5kZXgsICRyb3dzLCByb3dzLCAkcm93LCAkY2VsbHMsIHJlbW92ZSwgaW5keCxcblx0XHRcdCR0YWJsZSA9IGMuJHRhYmxlLFxuXHRcdFx0JHRib2RpZXMgPSBjLiR0Ym9kaWVzLFxuXHRcdFx0c29ydExpc3QgPSBjLnNvcnRMaXN0LFxuXHRcdFx0bGVuID0gc29ydExpc3QubGVuZ3RoLFxuXHRcdFx0Ly8gcmVtb3ZlZCBjLndpZGdldENvbHVtbnMgc3VwcG9ydFxuXHRcdFx0Y3NzID0gd28gJiYgd28uY29sdW1ucyB8fCBbIFwicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcInRlcnRpYXJ5XCIgXSxcblx0XHRcdGxhc3QgPSBjc3MubGVuZ3RoIC0gMTtcblx0XHRcdHJlbW92ZSA9IGNzcy5qb2luKCcgJyk7XG5cdFx0Ly8gY2hlY2sgaWYgdGhlcmUgaXMgYSBzb3J0IChvbiBpbml0aWFsaXphdGlvbiB0aGVyZSBtYXkgbm90IGJlIG9uZSlcblx0XHRmb3IgKHRib2R5SW5kZXggPSAwOyB0Ym9keUluZGV4IDwgJHRib2RpZXMubGVuZ3RoOyB0Ym9keUluZGV4KysgKSB7XG5cdFx0XHQkdGJvZHkgPSB0cy5wcm9jZXNzVGJvZHkodGFibGUsICR0Ym9kaWVzLmVxKHRib2R5SW5kZXgpLCB0cnVlKTsgLy8gZGV0YWNoIHRib2R5XG5cdFx0XHQkcm93cyA9ICR0Ym9keS5jaGlsZHJlbigndHInKTtcblx0XHRcdC8vIGxvb3AgdGhyb3VnaCB0aGUgdmlzaWJsZSByb3dzXG5cdFx0XHQkcm93cy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkcm93ID0gJCh0aGlzKTtcblx0XHRcdFx0aWYgKHRoaXMuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7XG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIGFsbCBjb2x1bW5zIGNsYXNzIG5hbWVzXG5cdFx0XHRcdFx0JGNlbGxzID0gJHJvdy5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKHJlbW92ZSk7XG5cdFx0XHRcdFx0Ly8gYWRkIGFwcHJvcHJpYXRlIGNvbHVtbiBjbGFzcyBuYW1lc1xuXHRcdFx0XHRcdGlmIChzb3J0TGlzdCAmJiBzb3J0TGlzdFswXSkge1xuXHRcdFx0XHRcdFx0Ly8gcHJpbWFyeSBzb3J0IGNvbHVtbiBjbGFzc1xuXHRcdFx0XHRcdFx0JGNlbGxzLmVxKHNvcnRMaXN0WzBdWzBdKS5hZGRDbGFzcyhjc3NbMF0pO1xuXHRcdFx0XHRcdFx0aWYgKGxlbiA+IDEpIHtcblx0XHRcdFx0XHRcdFx0Zm9yIChpbmR4ID0gMTsgaW5keCA8IGxlbjsgaW5keCsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2Vjb25kYXJ5LCB0ZXJ0aWFyeSwgZXRjIHNvcnQgY29sdW1uIGNsYXNzZXNcblx0XHRcdFx0XHRcdFx0XHQkY2VsbHMuZXEoc29ydExpc3RbaW5keF1bMF0pLmFkZENsYXNzKCBjc3NbaW5keF0gfHwgY3NzW2xhc3RdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dHMucHJvY2Vzc1Rib2R5KHRhYmxlLCAkdGJvZHksIGZhbHNlKTtcblx0XHR9XG5cdFx0Ly8gYWRkIGNsYXNzZXMgdG8gdGhlYWQgYW5kIHRmb290XG5cdFx0cm93cyA9IHdvLmNvbHVtbnNfdGhlYWQgIT09IGZhbHNlID8gWyd0aGVhZCB0ciddIDogW107XG5cdFx0aWYgKHdvLmNvbHVtbnNfdGZvb3QgIT09IGZhbHNlKSB7XG5cdFx0XHRyb3dzLnB1c2goJ3Rmb290IHRyJyk7XG5cdFx0fVxuXHRcdGlmIChyb3dzLmxlbmd0aCkge1xuXHRcdFx0JHJvd3MgPSAkdGFibGUuZmluZCggcm93cy5qb2luKCcsJykgKS5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKHJlbW92ZSk7XG5cdFx0XHRpZiAobGVuKSB7XG5cdFx0XHRcdGZvciAoaW5keCA9IDA7IGluZHggPCBsZW47IGluZHgrKykge1xuXHRcdFx0XHRcdC8vIGFkZCBwcmltYXJ5LiBzZWNvbmRhcnksIHRlcnRpYXJ5LCBldGMgc29ydCBjb2x1bW4gY2xhc3Nlc1xuXHRcdFx0XHRcdCRyb3dzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJyArIHNvcnRMaXN0W2luZHhdWzBdICsgJ1wiXScpLmFkZENsYXNzKGNzc1tpbmR4XSB8fCBjc3NbbGFzdF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKHRhYmxlLCBjLCB3bykge1xuXHRcdHZhciB0Ym9keUluZGV4LCAkdGJvZHksXG5cdFx0XHQkdGJvZGllcyA9IGMuJHRib2RpZXMsXG5cdFx0XHRyZW1vdmUgPSAod28uY29sdW1ucyB8fCBbIFwicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcInRlcnRpYXJ5XCIgXSkuam9pbignICcpO1xuXHRcdGMuJGhlYWRlcnMucmVtb3ZlQ2xhc3MocmVtb3ZlKTtcblx0XHRjLiR0YWJsZS5jaGlsZHJlbigndGZvb3QnKS5jaGlsZHJlbigndHInKS5jaGlsZHJlbigndGgsIHRkJykucmVtb3ZlQ2xhc3MocmVtb3ZlKTtcblx0XHRmb3IgKHRib2R5SW5kZXggPSAwOyB0Ym9keUluZGV4IDwgJHRib2RpZXMubGVuZ3RoOyB0Ym9keUluZGV4KysgKSB7XG5cdFx0XHQkdGJvZHkgPSB0cy5wcm9jZXNzVGJvZHkodGFibGUsICR0Ym9kaWVzLmVxKHRib2R5SW5kZXgpLCB0cnVlKTsgLy8gcmVtb3ZlIHRib2R5XG5cdFx0XHQkdGJvZHkuY2hpbGRyZW4oJ3RyJykuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0JCh0aGlzKS5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKHJlbW92ZSk7XG5cdFx0XHR9KTtcblx0XHRcdHRzLnByb2Nlc3NUYm9keSh0YWJsZSwgJHRib2R5LCBmYWxzZSk7IC8vIHJlc3RvcmUgdGJvZHlcblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBXaWRnZXQ6IGZpbHRlclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZFdpZGdldCh7XG5cdGlkOiBcImZpbHRlclwiLFxuXHRwcmlvcml0eTogNTAsXG5cdG9wdGlvbnMgOiB7XG5cdFx0ZmlsdGVyX2NoaWxkUm93cyAgICAgOiBmYWxzZSwgLy8gaWYgdHJ1ZSwgZmlsdGVyIGluY2x1ZGVzIGNoaWxkIHJvdyBjb250ZW50IGluIHRoZSBzZWFyY2hcblx0XHRmaWx0ZXJfY29sdW1uRmlsdGVycyA6IHRydWUsICAvLyBpZiB0cnVlLCBhIGZpbHRlciB3aWxsIGJlIGFkZGVkIHRvIHRoZSB0b3Agb2YgZWFjaCB0YWJsZSBjb2x1bW5cblx0XHRmaWx0ZXJfY2VsbEZpbHRlciAgICA6ICcnLCAgICAvLyBjc3MgY2xhc3MgbmFtZSBhZGRlZCB0byB0aGUgZmlsdGVyIGNlbGwgKHN0cmluZyBvciBhcnJheSlcblx0XHRmaWx0ZXJfY3NzRmlsdGVyICAgICA6ICcnLCAgICAvLyBjc3MgY2xhc3MgbmFtZSBhZGRlZCB0byB0aGUgZmlsdGVyIHJvdyAmIGVhY2ggaW5wdXQgaW4gdGhlIHJvdyAodGFibGVzb3J0ZXItZmlsdGVyIGlzIEFMV0FZUyBhZGRlZClcblx0XHRmaWx0ZXJfZGVmYXVsdEZpbHRlciA6IHt9LCAgICAvLyBhZGQgYSBkZWZhdWx0IGNvbHVtbiBmaWx0ZXIgdHlwZSBcIn57cXVlcnl9XCIgdG8gbWFrZSBmdXp6eSBzZWFyY2hlcyBkZWZhdWx0OyBcIntxMX0gQU5EIHtxMn1cIiB0byBtYWtlIGFsbCBzZWFyY2hlcyB1c2UgYSBsb2dpY2FsIEFORC5cblx0XHRmaWx0ZXJfZXhjbHVkZUZpbHRlciA6IHt9LCAgICAvLyBmaWx0ZXJzIHRvIGV4Y2x1ZGUsIHBlciBjb2x1bW5cblx0XHRmaWx0ZXJfZXh0ZXJuYWwgICAgICA6ICcnLCAgICAvLyBqUXVlcnkgc2VsZWN0b3Igc3RyaW5nIChvciBqUXVlcnkgb2JqZWN0KSBvZiBleHRlcm5hbCBmaWx0ZXJzXG5cdFx0ZmlsdGVyX2ZpbHRlcmVkUm93ICAgOiAnZmlsdGVyZWQnLCAvLyBjbGFzcyBhZGRlZCB0byBmaWx0ZXJlZCByb3dzOyBuZWVkZWQgYnkgcGFnZXIgcGx1Z2luXG5cdFx0ZmlsdGVyX2Zvcm1hdHRlciAgICAgOiBudWxsLCAgLy8gYWRkIGN1c3RvbSBmaWx0ZXIgZWxlbWVudHMgdG8gdGhlIGZpbHRlciByb3dcblx0XHRmaWx0ZXJfZnVuY3Rpb25zICAgICA6IG51bGwsICAvLyBhZGQgY3VzdG9tIGZpbHRlciBmdW5jdGlvbnMgdXNpbmcgdGhpcyBvcHRpb25cblx0XHRmaWx0ZXJfaGlkZUVtcHR5ICAgICA6IHRydWUsICAvLyBoaWRlIGZpbHRlciByb3cgd2hlbiB0YWJsZSBpcyBlbXB0eVxuXHRcdGZpbHRlcl9oaWRlRmlsdGVycyAgIDogZmFsc2UsIC8vIGNvbGxhcHNlIGZpbHRlciByb3cgd2hlbiBtb3VzZSBsZWF2ZXMgdGhlIGFyZWFcblx0XHRmaWx0ZXJfaWdub3JlQ2FzZSAgICA6IHRydWUsICAvLyBpZiB0cnVlLCBtYWtlIGFsbCBzZWFyY2hlcyBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0ZmlsdGVyX2xpdmVTZWFyY2ggICAgOiB0cnVlLCAgLy8gaWYgdHJ1ZSwgc2VhcmNoIGNvbHVtbiBjb250ZW50IHdoaWxlIHRoZSB1c2VyIHR5cGVzICh3aXRoIGEgZGVsYXkpXG5cdFx0ZmlsdGVyX29ubHlBdmFpbCAgICAgOiAnZmlsdGVyLW9ubHlBdmFpbCcsIC8vIGEgaGVhZGVyIHdpdGggYSBzZWxlY3QgZHJvcGRvd24gJiB0aGlzIGNsYXNzIG5hbWUgd2lsbCBvbmx5IHNob3cgYXZhaWxhYmxlICh2aXNpYmxlKSBvcHRpb25zIHdpdGhpbiB0aGUgZHJvcCBkb3duXG5cdFx0ZmlsdGVyX3BsYWNlaG9sZGVyICAgOiB7IHNlYXJjaCA6ICcnLCBzZWxlY3QgOiAnJyB9LCAvLyBkZWZhdWx0IHBsYWNlaG9sZGVyIHRleHQgKG92ZXJyaWRkZW4gYnkgYW55IGhlYWRlciBcImRhdGEtcGxhY2Vob2xkZXJcIiBzZXR0aW5nKVxuXHRcdGZpbHRlcl9yZXNldCAgICAgICAgIDogbnVsbCwgIC8vIGpRdWVyeSBzZWxlY3RvciBzdHJpbmcgb2YgYW4gZWxlbWVudCB1c2VkIHRvIHJlc2V0IHRoZSBmaWx0ZXJzXG5cdFx0ZmlsdGVyX3NhdmVGaWx0ZXJzICAgOiBmYWxzZSwgLy8gVXNlIHRoZSAkLnRhYmxlc29ydGVyLnN0b3JhZ2UgdXRpbGl0eSB0byBzYXZlIHRoZSBtb3N0IHJlY2VudCBmaWx0ZXJzXG5cdFx0ZmlsdGVyX3NlYXJjaERlbGF5ICAgOiAzMDAsICAgLy8gdHlwaW5nIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgc3RhcnRpbmcgYSBzZWFyY2hcblx0XHRmaWx0ZXJfc2VhcmNoRmlsdGVyZWQ6IHRydWUsICAvLyBhbGxvdyBzZWFyY2hpbmcgdGhyb3VnaCBhbHJlYWR5IGZpbHRlcmVkIHJvd3MgaW4gc3BlY2lhbCBjaXJjdW1zdGFuY2VzOyB3aWxsIHNwZWVkIHVwIHNlYXJjaGluZyBpbiBsYXJnZSB0YWJsZXMgaWYgdHJ1ZVxuXHRcdGZpbHRlcl9zZWxlY3RTb3VyY2UgIDogbnVsbCwgIC8vIGluY2x1ZGUgYSBmdW5jdGlvbiB0byByZXR1cm4gYW4gYXJyYXkgb2YgdmFsdWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBjb2x1bW4gZmlsdGVyIHNlbGVjdFxuXHRcdGZpbHRlcl9zdGFydHNXaXRoICAgIDogZmFsc2UsIC8vIGlmIHRydWUsIGZpbHRlciBzdGFydCBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNlbGwgY29udGVudHNcblx0XHRmaWx0ZXJfdXNlUGFyc2VkRGF0YSA6IGZhbHNlLCAvLyBmaWx0ZXIgYWxsIGRhdGEgdXNpbmcgcGFyc2VkIGNvbnRlbnRcblx0XHRmaWx0ZXJfc2VydmVyc2lkZUZpbHRlcmluZyA6IGZhbHNlLCAvLyBpZiB0cnVlLCBzZXJ2ZXItc2lkZSBmaWx0ZXJpbmcgc2hvdWxkIGJlIHBlcmZvcm1lZCBiZWNhdXNlIGNsaWVudC1zaWRlIGZpbHRlcmluZyB3aWxsIGJlIGRpc2FibGVkLCBidXQgdGhlIHVpIGFuZCBldmVudHMgd2lsbCBzdGlsbCBiZSB1c2VkLlxuXHRcdGZpbHRlcl9kZWZhdWx0QXR0cmliIDogJ2RhdGEtdmFsdWUnLCAvLyBkYXRhIGF0dHJpYnV0ZSBpbiB0aGUgaGVhZGVyIGNlbGwgdGhhdCBjb250YWlucyB0aGUgZGVmYXVsdCBmaWx0ZXIgdmFsdWVcblx0XHRmaWx0ZXJfc2VsZWN0U291cmNlU2VwYXJhdG9yIDogJ3wnIC8vIGZpbHRlcl9zZWxlY3RTb3VyY2UgYXJyYXkgdGV4dCBsZWZ0IG9mIHRoZSBzZXBhcmF0b3IgaXMgYWRkZWQgdG8gdGhlIG9wdGlvbiB2YWx1ZSwgcmlnaHQgaW50byB0aGUgb3B0aW9uIHRleHRcblx0fSxcblx0Zm9ybWF0OiBmdW5jdGlvbih0YWJsZSwgYywgd28pIHtcblx0XHRpZiAoIWMuJHRhYmxlLmhhc0NsYXNzKCdoYXNGaWx0ZXJzJykpIHtcblx0XHRcdHRzLmZpbHRlci5pbml0KHRhYmxlLCBjLCB3byk7XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKHRhYmxlLCBjLCB3bykge1xuXHRcdHZhciB0Ym9keUluZGV4LCAkdGJvZHksXG5cdFx0XHQkdGFibGUgPSBjLiR0YWJsZSxcblx0XHRcdCR0Ym9kaWVzID0gYy4kdGJvZGllcztcblx0XHQkdGFibGVcblx0XHRcdC5yZW1vdmVDbGFzcygnaGFzRmlsdGVycycpXG5cdFx0XHQvLyBhZGQgLnRzZmlsdGVyIG5hbWVzcGFjZSB0byBhbGwgQlVUIHNlYXJjaFxuXHRcdFx0LnVuYmluZCgnYWRkUm93cyB1cGRhdGVDZWxsIHVwZGF0ZSB1cGRhdGVSb3dzIHVwZGF0ZUNvbXBsZXRlIGFwcGVuZENhY2hlIGZpbHRlclJlc2V0IGZpbHRlckVuZCBzZWFyY2ggJy5zcGxpdCgnICcpLmpvaW4oYy5uYW1lc3BhY2UgKyAnZmlsdGVyICcpKVxuXHRcdFx0LmZpbmQoJy4nICsgdHMuY3NzLmZpbHRlclJvdykucmVtb3ZlKCk7XG5cdFx0Zm9yICh0Ym9keUluZGV4ID0gMDsgdGJvZHlJbmRleCA8ICR0Ym9kaWVzLmxlbmd0aDsgdGJvZHlJbmRleCsrICkge1xuXHRcdFx0JHRib2R5ID0gdHMucHJvY2Vzc1Rib2R5KHRhYmxlLCAkdGJvZGllcy5lcSh0Ym9keUluZGV4KSwgdHJ1ZSk7IC8vIHJlbW92ZSB0Ym9keVxuXHRcdFx0JHRib2R5LmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3Mod28uZmlsdGVyX2ZpbHRlcmVkUm93KS5zaG93KCk7XG5cdFx0XHR0cy5wcm9jZXNzVGJvZHkodGFibGUsICR0Ym9keSwgZmFsc2UpOyAvLyByZXN0b3JlIHRib2R5XG5cdFx0fVxuXHRcdGlmICh3by5maWx0ZXJfcmVzZXQpIHtcblx0XHRcdCQoZG9jdW1lbnQpLnVuZGVsZWdhdGUod28uZmlsdGVyX3Jlc2V0LCAnY2xpY2sudHNmaWx0ZXInKTtcblx0XHR9XG5cdH1cbn0pO1xuXG50cy5maWx0ZXIgPSB7XG5cblx0Ly8gcmVnZXggdXNlZCBpbiBmaWx0ZXIgXCJjaGVja1wiIGZ1bmN0aW9ucyAtIG5vdCBmb3IgZ2VuZXJhbCB1c2UgYW5kIG5vdCBkb2N1bWVudGVkXG5cdHJlZ2V4OiB7XG5cdFx0cmVnZXggICAgIDogL15cXC8oKD86XFxcXFxcL3xbXlxcL10pKylcXC8oW21pZ117MCwzfSk/JC8sIC8vIHJlZ2V4IHRvIHRlc3QgZm9yIHJlZ2V4XG5cdFx0Y2hpbGQgICAgIDogL3RhYmxlc29ydGVyLWNoaWxkUm93LywgLy8gY2hpbGQgcm93IGNsYXNzIG5hbWU7IHRoaXMgZ2V0cyB1cGRhdGVkIGluIHRoZSBzY3JpcHRcblx0XHRmaWx0ZXJlZCAgOiAvZmlsdGVyZWQvLCAvLyBmaWx0ZXJlZCAoaGlkZGVuKSByb3cgY2xhc3MgbmFtZTsgdXBkYXRlZCBpbiB0aGUgc2NyaXB0XG5cdFx0dHlwZSAgICAgIDogL3VuZGVmaW5lZHxudW1iZXIvLCAvLyBjaGVjayB0eXBlXG5cdFx0ZXhhY3QgICAgIDogLyheW1xcXCJcXCc9XSspfChbXFxcIlxcJz1dKyQpL2csIC8vIGV4YWN0IG1hdGNoIChhbGxvdyAnPT0nKVxuXHRcdG5vbmRpZ2l0ICA6IC9bXlxcdywuIFxcLSgpXS9nLCAvLyByZXBsYWNlIG5vbi1kaWdpdHMgKGZyb20gZGlnaXQgJiBjdXJyZW5jeSBwYXJzZXIpXG5cdFx0b3BlcmF0b3JzIDogL1s8Pj1dL2csIC8vIHJlcGxhY2Ugb3BlcmF0b3JzXG5cdFx0cXVlcnkgICAgIDogJyhxfHF1ZXJ5KScgLy8gcmVwbGFjZSBmaWx0ZXIgcXVlcmllc1xuXHR9LFxuXHRcdC8vIGZ1bmN0aW9uKCBjLCBkYXRhICkgeyB9XG5cdFx0Ly8gYyA9IHRhYmxlLmNvbmZpZ1xuXHRcdC8vIGRhdGEuZmlsdGVyID0gYXJyYXkgb2YgZmlsdGVyIGlucHV0IHZhbHVlcztcblx0XHQvLyBkYXRhLmlGaWx0ZXIgPSBzYW1lIGFycmF5LCBleGNlcHQgbG93ZXJjYXNlIChpZiB3by5maWx0ZXJfaWdub3JlQ2FzZSBpcyB0cnVlKVxuXHRcdC8vIGRhdGEuZXhhY3QgPSB0YWJsZSBjZWxsIHRleHQgKG9yIHBhcnNlZCBkYXRhIGlmIGNvbHVtbiBwYXJzZXIgZW5hYmxlZClcblx0XHQvLyBkYXRhLmlFeGFjdCA9IHNhbWUgYXMgZGF0YS5leGFjdCwgZXhjZXB0IGxvd2VyY2FzZSAoaWYgd28uZmlsdGVyX2lnbm9yZUNhc2UgaXMgdHJ1ZSlcblx0XHQvLyBkYXRhLmNhY2hlID0gdGFibGUgY2VsbCB0ZXh0IGZyb20gY2FjaGUsIHNvIGl0IGhhcyBiZWVuIHBhcnNlZCAoJiBpbiBhbGwgbG93ZXIgY2FzZSBpZiBjb25maWcuaWdub3JlQ2FzZSBpcyB0cnVlKVxuXHRcdC8vIGRhdGEuaW5kZXggPSBjb2x1bW4gaW5kZXg7IHRhYmxlID0gdGFibGUgZWxlbWVudCAoRE9NKVxuXHRcdC8vIGRhdGEucGFyc2VkID0gYXJyYXkgKGJ5IGNvbHVtbikgb2YgYm9vbGVhbiB2YWx1ZXMgKGZyb20gZmlsdGVyX3VzZVBhcnNlZERhdGEgb3IgXCJmaWx0ZXItcGFyc2VkXCIgY2xhc3MpXG5cdHR5cGVzOiB7XG5cdFx0Ly8gTG9vayBmb3IgcmVnZXhcblx0XHRyZWdleDogZnVuY3Rpb24oIGMsIGRhdGEgKSB7XG5cdFx0XHRpZiAoIHRzLmZpbHRlci5yZWdleC5yZWdleC50ZXN0KGRhdGEuaUZpbHRlcikgKSB7XG5cdFx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRcdHJlZ2V4ID0gdHMuZmlsdGVyLnJlZ2V4LnJlZ2V4LmV4ZWMoZGF0YS5pRmlsdGVyKTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRtYXRjaGVzID0gbmV3IFJlZ0V4cChyZWdleFsxXSwgcmVnZXhbMl0pLnRlc3QoIGRhdGEuaUV4YWN0ICk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaGVzO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHQvLyBMb29rIGZvciBvcGVyYXRvcnMgPiwgPj0sIDwgb3IgPD1cblx0XHRvcGVyYXRvcnM6IGZ1bmN0aW9uKCBjLCBkYXRhICkge1xuXHRcdFx0aWYgKCAvXls8Pl09Py8udGVzdChkYXRhLmlGaWx0ZXIpICkge1xuXHRcdFx0XHR2YXIgY2FjaGVkVmFsdWUsIHJlc3VsdCxcblx0XHRcdFx0XHR0YWJsZSA9IGMudGFibGUsXG5cdFx0XHRcdFx0aW5kZXggPSBkYXRhLmluZGV4LFxuXHRcdFx0XHRcdHBhcnNlZCA9IGRhdGEucGFyc2VkW2luZGV4XSxcblx0XHRcdFx0XHRxdWVyeSA9IHRzLmZvcm1hdEZsb2F0KCBkYXRhLmlGaWx0ZXIucmVwbGFjZSh0cy5maWx0ZXIucmVnZXgub3BlcmF0b3JzLCAnJyksIHRhYmxlICksXG5cdFx0XHRcdFx0cGFyc2VyID0gYy5wYXJzZXJzW2luZGV4XSxcblx0XHRcdFx0XHRzYXZlZFNlYXJjaCA9IHF1ZXJ5O1xuXHRcdFx0XHQvLyBwYXJzZSBmaWx0ZXIgdmFsdWUgaW4gY2FzZSB3ZSdyZSBjb21wYXJpbmcgbnVtYmVycyAoZGF0ZXMpXG5cdFx0XHRcdGlmIChwYXJzZWQgfHwgcGFyc2VyLnR5cGUgPT09ICdudW1lcmljJykge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHRzLmZpbHRlci5wYXJzZUZpbHRlcihjLCAkLnRyaW0oJycgKyBkYXRhLmlGaWx0ZXIucmVwbGFjZSh0cy5maWx0ZXIucmVnZXgub3BlcmF0b3JzLCAnJykpLCBpbmRleCwgcGFyc2VkLCB0cnVlKTtcblx0XHRcdFx0XHRxdWVyeSA9ICggdHlwZW9mIHJlc3VsdCA9PT0gXCJudW1iZXJcIiAmJiByZXN1bHQgIT09ICcnICYmICFpc05hTihyZXN1bHQpICkgPyByZXN1bHQgOiBxdWVyeTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlFeGFjdCBtYXkgYmUgbnVtZXJpYyAtIHNlZSBpc3N1ZSAjMTQ5O1xuXHRcdFx0XHQvLyBjaGVjayBpZiBjYWNoZWQgaXMgZGVmaW5lZCwgYmVjYXVzZSBzb21ldGltZXMgaiBnb2VzIG91dCBvZiByYW5nZT8gKG51bWVyaWMgY29sdW1ucylcblx0XHRcdFx0Y2FjaGVkVmFsdWUgPSAoIHBhcnNlZCB8fCBwYXJzZXIudHlwZSA9PT0gJ251bWVyaWMnICkgJiYgIWlzTmFOKHF1ZXJ5KSAmJiB0eXBlb2YgZGF0YS5jYWNoZSAhPT0gJ3VuZGVmaW5lZCcgPyBkYXRhLmNhY2hlIDpcblx0XHRcdFx0XHRpc05hTihkYXRhLmlFeGFjdCkgPyB0cy5mb3JtYXRGbG9hdCggZGF0YS5pRXhhY3QucmVwbGFjZSh0cy5maWx0ZXIucmVnZXgubm9uZGlnaXQsICcnKSwgdGFibGUpIDpcblx0XHRcdFx0XHR0cy5mb3JtYXRGbG9hdCggZGF0YS5pRXhhY3QsIHRhYmxlICk7XG5cblx0XHRcdFx0aWYgKCAvPi8udGVzdChkYXRhLmlGaWx0ZXIpICkgeyByZXN1bHQgPSAvPj0vLnRlc3QoZGF0YS5pRmlsdGVyKSA/IGNhY2hlZFZhbHVlID49IHF1ZXJ5IDogY2FjaGVkVmFsdWUgPiBxdWVyeTsgfVxuXHRcdFx0XHRpZiAoIC88Ly50ZXN0KGRhdGEuaUZpbHRlcikgKSB7IHJlc3VsdCA9IC88PS8udGVzdChkYXRhLmlGaWx0ZXIpID8gY2FjaGVkVmFsdWUgPD0gcXVlcnkgOiBjYWNoZWRWYWx1ZSA8IHF1ZXJ5OyB9XG5cdFx0XHRcdC8vIGtlZXAgc2hvd2luZyBhbGwgcm93cyBpZiBub3RoaW5nIGZvbGxvd3MgdGhlIG9wZXJhdG9yXG5cdFx0XHRcdGlmICggIXJlc3VsdCAmJiBzYXZlZFNlYXJjaCA9PT0gJycgKSB7IHJlc3VsdCA9IHRydWU7IH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0Ly8gTG9vayBmb3IgYSBub3QgbWF0Y2hcblx0XHRub3RNYXRjaDogZnVuY3Rpb24oIGMsIGRhdGEgKSB7XG5cdFx0XHRpZiAoIC9eXFwhLy50ZXN0KGRhdGEuaUZpbHRlcikgKSB7XG5cdFx0XHRcdHZhciBpbmR4LFxuXHRcdFx0XHRcdGZpbHRlciA9IHRzLmZpbHRlci5wYXJzZUZpbHRlcihjLCBkYXRhLmlGaWx0ZXIucmVwbGFjZSgnIScsICcnKSwgZGF0YS5pbmRleCwgZGF0YS5wYXJzZWRbZGF0YS5pbmRleF0pO1xuXHRcdFx0XHRpZiAodHMuZmlsdGVyLnJlZ2V4LmV4YWN0LnRlc3QoZmlsdGVyKSkge1xuXHRcdFx0XHRcdC8vIGxvb2sgZm9yIGV4YWN0IG5vdCBtYXRjaGVzIC0gc2VlICM2Mjhcblx0XHRcdFx0XHRmaWx0ZXIgPSBmaWx0ZXIucmVwbGFjZSh0cy5maWx0ZXIucmVnZXguZXhhY3QsICcnKTtcblx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyID09PSAnJyA/IHRydWUgOiAkLnRyaW0oZmlsdGVyKSAhPT0gZGF0YS5pRXhhY3Q7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aW5keCA9IGRhdGEuaUV4YWN0LnNlYXJjaCggJC50cmltKGZpbHRlcikgKTtcblx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyID09PSAnJyA/IHRydWUgOiAhKGMud2lkZ2V0T3B0aW9ucy5maWx0ZXJfc3RhcnRzV2l0aCA/IGluZHggPT09IDAgOiBpbmR4ID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdC8vIExvb2sgZm9yIHF1b3RlcyBvciBlcXVhbHMgdG8gZ2V0IGFuIGV4YWN0IG1hdGNoOyBpZ25vcmUgdHlwZSBzaW5jZSBpRXhhY3QgY291bGQgYmUgbnVtZXJpY1xuXHRcdGV4YWN0OiBmdW5jdGlvbiggYywgZGF0YSApIHtcblx0XHRcdC8qanNoaW50IGVxZXFlcTpmYWxzZSAqL1xuXHRcdFx0aWYgKHRzLmZpbHRlci5yZWdleC5leGFjdC50ZXN0KGRhdGEuaUZpbHRlcikpIHtcblx0XHRcdFx0dmFyIGZpbHRlciA9IHRzLmZpbHRlci5wYXJzZUZpbHRlcihjLCBkYXRhLmlGaWx0ZXIucmVwbGFjZSh0cy5maWx0ZXIucmVnZXguZXhhY3QsICcnKSwgZGF0YS5pbmRleCwgZGF0YS5wYXJzZWRbZGF0YS5pbmRleF0pO1xuXHRcdFx0XHRyZXR1cm4gZGF0YS5hbnlNYXRjaCA/ICQuaW5BcnJheShmaWx0ZXIsIGRhdGEucm93QXJyYXkpID49IDAgOiBmaWx0ZXIgPT0gZGF0YS5pRXhhY3Q7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdC8vIExvb2sgZm9yIGFuIEFORCBvciAmJiBvcGVyYXRvciAobG9naWNhbCBhbmQpXG5cdFx0YW5kIDogZnVuY3Rpb24oIGMsIGRhdGEgKSB7XG5cdFx0XHRpZiAoIHRzLmZpbHRlci5yZWdleC5hbmRUZXN0LnRlc3QoZGF0YS5maWx0ZXIpICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSBkYXRhLmluZGV4LFxuXHRcdFx0XHRcdHBhcnNlZCA9IGRhdGEucGFyc2VkW2luZGV4XSxcblx0XHRcdFx0XHRxdWVyeSA9IGRhdGEuaUZpbHRlci5zcGxpdCggdHMuZmlsdGVyLnJlZ2V4LmFuZFNwbGl0ICksXG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YS5pRXhhY3Quc2VhcmNoKCAkLnRyaW0oIHRzLmZpbHRlci5wYXJzZUZpbHRlcihjLCBxdWVyeVswXSwgaW5kZXgsIHBhcnNlZCkgKSApID49IDAsXG5cdFx0XHRcdFx0aW5keCA9IHF1ZXJ5Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdHdoaWxlIChyZXN1bHQgJiYgaW5keCkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdCAmJiBkYXRhLmlFeGFjdC5zZWFyY2goICQudHJpbSggdHMuZmlsdGVyLnBhcnNlRmlsdGVyKGMsIHF1ZXJ5W2luZHhdLCBpbmRleCwgcGFyc2VkKSApICkgPj0gMDtcblx0XHRcdFx0XHRpbmR4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0Ly8gTG9vayBmb3IgYSByYW5nZSAodXNpbmcgXCIgdG8gXCIgb3IgXCIgLSBcIikgLSBzZWUgaXNzdWUgIzE2NjsgdGhhbmtzIG1hdHpodSFcblx0XHRyYW5nZSA6IGZ1bmN0aW9uKCBjLCBkYXRhICkge1xuXHRcdFx0aWYgKCB0cy5maWx0ZXIucmVnZXgudG9UZXN0LnRlc3QoZGF0YS5pRmlsdGVyKSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCwgdG1wLFxuXHRcdFx0XHRcdHRhYmxlID0gYy50YWJsZSxcblx0XHRcdFx0XHRpbmRleCA9IGRhdGEuaW5kZXgsXG5cdFx0XHRcdFx0cGFyc2VkID0gZGF0YS5wYXJzZWRbaW5kZXhdLFxuXHRcdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGUgZGFzaCBpcyBmb3IgYSByYW5nZSBhbmQgbm90IGluZGljYXRpbmcgYSBuZWdhdGl2ZSBudW1iZXJcblx0XHRcdFx0XHRxdWVyeSA9IGRhdGEuaUZpbHRlci5zcGxpdCggdHMuZmlsdGVyLnJlZ2V4LnRvU3BsaXQgKSxcblx0XHRcdFx0XHRyYW5nZTEgPSB0cy5mb3JtYXRGbG9hdCggdHMuZmlsdGVyLnBhcnNlRmlsdGVyKGMsIHF1ZXJ5WzBdLnJlcGxhY2UodHMuZmlsdGVyLnJlZ2V4Lm5vbmRpZ2l0LCAnJyksIGluZGV4LCBwYXJzZWQpLCB0YWJsZSApLFxuXHRcdFx0XHRcdHJhbmdlMiA9IHRzLmZvcm1hdEZsb2F0KCB0cy5maWx0ZXIucGFyc2VGaWx0ZXIoYywgcXVlcnlbMV0ucmVwbGFjZSh0cy5maWx0ZXIucmVnZXgubm9uZGlnaXQsICcnKSwgaW5kZXgsIHBhcnNlZCksIHRhYmxlICk7XG5cdFx0XHRcdFx0Ly8gcGFyc2UgZmlsdGVyIHZhbHVlIGluIGNhc2Ugd2UncmUgY29tcGFyaW5nIG51bWJlcnMgKGRhdGVzKVxuXHRcdFx0XHRpZiAocGFyc2VkIHx8IGMucGFyc2Vyc1tpbmRleF0udHlwZSA9PT0gJ251bWVyaWMnKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gYy5wYXJzZXJzW2luZGV4XS5mb3JtYXQoJycgKyBxdWVyeVswXSwgdGFibGUsIGMuJGhlYWRlcnMuZXEoaW5kZXgpLCBpbmRleCk7XG5cdFx0XHRcdFx0cmFuZ2UxID0gKHJlc3VsdCAhPT0gJycgJiYgIWlzTmFOKHJlc3VsdCkpID8gcmVzdWx0IDogcmFuZ2UxO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGMucGFyc2Vyc1tpbmRleF0uZm9ybWF0KCcnICsgcXVlcnlbMV0sIHRhYmxlLCBjLiRoZWFkZXJzLmVxKGluZGV4KSwgaW5kZXgpO1xuXHRcdFx0XHRcdHJhbmdlMiA9IChyZXN1bHQgIT09ICcnICYmICFpc05hTihyZXN1bHQpKSA/IHJlc3VsdCA6IHJhbmdlMjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXN1bHQgPSAoIHBhcnNlZCB8fCBjLnBhcnNlcnNbaW5kZXhdLnR5cGUgPT09ICdudW1lcmljJyApICYmICFpc05hTihyYW5nZTEpICYmICFpc05hTihyYW5nZTIpID8gZGF0YS5jYWNoZSA6XG5cdFx0XHRcdFx0aXNOYU4oZGF0YS5pRXhhY3QpID8gdHMuZm9ybWF0RmxvYXQoIGRhdGEuaUV4YWN0LnJlcGxhY2UodHMuZmlsdGVyLnJlZ2V4Lm5vbmRpZ2l0LCAnJyksIHRhYmxlKSA6XG5cdFx0XHRcdFx0dHMuZm9ybWF0RmxvYXQoIGRhdGEuaUV4YWN0LCB0YWJsZSApO1xuXHRcdFx0XHRpZiAocmFuZ2UxID4gcmFuZ2UyKSB7IHRtcCA9IHJhbmdlMTsgcmFuZ2UxID0gcmFuZ2UyOyByYW5nZTIgPSB0bXA7IH0gLy8gc3dhcFxuXHRcdFx0XHRyZXR1cm4gKHJlc3VsdCA+PSByYW5nZTEgJiYgcmVzdWx0IDw9IHJhbmdlMikgfHwgKHJhbmdlMSA9PT0gJycgfHwgcmFuZ2UyID09PSAnJyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdC8vIExvb2sgZm9yIHdpbGQgY2FyZDogPyA9IHNpbmdsZSwgKiA9IG11bHRpcGxlLCBvciB8ID0gbG9naWNhbCBPUlxuXHRcdHdpbGQgOiBmdW5jdGlvbiggYywgZGF0YSApIHtcblx0XHRcdGlmICggL1tcXD9cXCpcXHxdLy50ZXN0KGRhdGEuaUZpbHRlcikgfHwgdHMuZmlsdGVyLnJlZ2V4Lm9yUmVwbGFjZS50ZXN0KGRhdGEuZmlsdGVyKSApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gZGF0YS5pbmRleCxcblx0XHRcdFx0XHRwYXJzZWQgPSBkYXRhLnBhcnNlZFtpbmRleF0sXG5cdFx0XHRcdFx0cXVlcnkgPSB0cy5maWx0ZXIucGFyc2VGaWx0ZXIoYywgZGF0YS5pRmlsdGVyLnJlcGxhY2UodHMuZmlsdGVyLnJlZ2V4Lm9yUmVwbGFjZSwgXCJ8XCIpLCBpbmRleCwgcGFyc2VkKTtcblx0XHRcdFx0Ly8gbG9vayBmb3IgYW4gZXhhY3QgbWF0Y2ggd2l0aCB0aGUgXCJvclwiIHVubGVzcyB0aGUgXCJmaWx0ZXItbWF0Y2hcIiBjbGFzcyBpcyBmb3VuZFxuXHRcdFx0XHRpZiAoIWMuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgaW5kZXggKyAnXCJdOmxhc3QnKS5oYXNDbGFzcygnZmlsdGVyLW1hdGNoJykgJiYgL1xcfC8udGVzdChxdWVyeSkpIHtcblx0XHRcdFx0XHQvLyBzaG93IGFsbCByZXN1bHRzIHdoaWxlIHVzaW5nIGZpbHRlciBtYXRjaC4gRml4ZXMgIzcyN1xuXHRcdFx0XHRcdGlmIChxdWVyeVsgcXVlcnkubGVuZ3RoIC0gMSBdID09PSAnfCcpIHsgcXVlcnkgKz0gJyonOyB9XG5cdFx0XHRcdFx0cXVlcnkgPSBkYXRhLmFueU1hdGNoICYmICQuaXNBcnJheShkYXRhLnJvd0FycmF5KSA/ICcoJyArIHF1ZXJ5ICsgJyknIDogJ14oJyArIHF1ZXJ5ICsgJykkJztcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBwYXJzaW5nIHRoZSBmaWx0ZXIgbWF5IG5vdCB3b3JrIHByb3Blcmx5IHdoZW4gdXNpbmcgd2lsZGNhcmRzID0vXG5cdFx0XHRcdHJldHVybiBuZXcgUmVnRXhwKCBxdWVyeS5yZXBsYWNlKC9cXD8vZywgJ1xcXFxTezF9JykucmVwbGFjZSgvXFwqL2csICdcXFxcUyonKSApLnRlc3QoZGF0YS5pRXhhY3QpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHQvLyBmdXp6eSB0ZXh0IHNlYXJjaDsgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0dHlvcmsvZnV6enkgKE1JVCBsaWNlbnNlKVxuXHRcdGZ1enp5OiBmdW5jdGlvbiggYywgZGF0YSApIHtcblx0XHRcdGlmICggL15+Ly50ZXN0KGRhdGEuaUZpbHRlcikgKSB7XG5cdFx0XHRcdHZhciBpbmR4LFxuXHRcdFx0XHRcdHBhdHRlcm5JbmR4ID0gMCxcblx0XHRcdFx0XHRsZW4gPSBkYXRhLmlFeGFjdC5sZW5ndGgsXG5cdFx0XHRcdFx0cGF0dGVybiA9IHRzLmZpbHRlci5wYXJzZUZpbHRlcihjLCBkYXRhLmlGaWx0ZXIuc2xpY2UoMSksIGRhdGEuaW5kZXgsIGRhdGEucGFyc2VkW2RhdGEuaW5kZXhdKTtcblx0XHRcdFx0Zm9yIChpbmR4ID0gMDsgaW5keCA8IGxlbjsgaW5keCsrKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGEuaUV4YWN0W2luZHhdID09PSBwYXR0ZXJuW3BhdHRlcm5JbmR4XSkge1xuXHRcdFx0XHRcdFx0cGF0dGVybkluZHggKz0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBhdHRlcm5JbmR4ID09PSBwYXR0ZXJuLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSxcblx0aW5pdDogZnVuY3Rpb24odGFibGUsIGMsIHdvKSB7XG5cdFx0Ly8gZmlsdGVyIGxhbmd1YWdlIG9wdGlvbnNcblx0XHR0cy5sYW5ndWFnZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB7XG5cdFx0XHR0byAgOiAndG8nLFxuXHRcdFx0b3IgIDogJ29yJyxcblx0XHRcdGFuZCA6ICdhbmQnXG5cdFx0fSwgdHMubGFuZ3VhZ2UpO1xuXG5cdFx0dmFyIG9wdGlvbnMsIHN0cmluZywgdHh0LCAkaGVhZGVyLCBjb2x1bW4sIGZpbHRlcnMsIHZhbCwgZnhuLCBub1NlbGVjdCxcblx0XHRcdHJlZ2V4ID0gdHMuZmlsdGVyLnJlZ2V4O1xuXHRcdGMuJHRhYmxlLmFkZENsYXNzKCdoYXNGaWx0ZXJzJyk7XG5cblx0XHQvLyBkZWZpbmUgdGltZXJzIHNvIHVzaW5nIGNsZWFyVGltZW91dCB3b24ndCBjYXVzZSBhbiB1bmRlZmluZWQgZXJyb3Jcblx0XHR3by5zZWFyY2hUaW1lciA9IG51bGw7XG5cdFx0d28uZmlsdGVyX2luaXRUaW1lciA9IG51bGw7XG5cdFx0d28uZmlsdGVyX2Zvcm1hdHRlckNvdW50ID0gMDtcblx0XHR3by5maWx0ZXJfZm9ybWF0dGVySW5pdCA9IFtdO1xuXHRcdHdvLmZpbHRlcl9hbnlDb2x1bW5TZWxlY3RvciA9ICdbZGF0YS1jb2x1bW49XCJhbGxcIl0sW2RhdGEtY29sdW1uPVwiYW55XCJdJztcblx0XHR3by5maWx0ZXJfbXVsdGlwbGVDb2x1bW5TZWxlY3RvciA9ICdbZGF0YS1jb2x1bW4qPVwiLVwiXSxbZGF0YS1jb2x1bW4qPVwiLFwiXSc7XG5cblx0XHR0eHQgPSAnXFxcXHsnICsgdHMuZmlsdGVyLnJlZ2V4LnF1ZXJ5ICsgJ1xcXFx9Jztcblx0XHQkLmV4dGVuZCggcmVnZXgsIHtcblx0XHRcdGNoaWxkIDogbmV3IFJlZ0V4cChjLmNzc0NoaWxkUm93KSxcblx0XHRcdGZpbHRlcmVkIDogbmV3IFJlZ0V4cCh3by5maWx0ZXJfZmlsdGVyZWRSb3cpLFxuXHRcdFx0YWxyZWFkeUZpbHRlcmVkIDogbmV3IFJlZ0V4cCgnKFxcXFxzKygnICsgdHMubGFuZ3VhZ2Uub3IgKyAnfC18JyArIHRzLmxhbmd1YWdlLnRvICsgJylcXFxccyspJywgJ2knKSxcblx0XHRcdHRvVGVzdCA6IG5ldyBSZWdFeHAoJ1xcXFxzKygtfCcgKyB0cy5sYW5ndWFnZS50byArICcpXFxcXHMrJywgJ2knKSxcblx0XHRcdHRvU3BsaXQgOiBuZXcgUmVnRXhwKCcoPzpcXFxccysoPzotfCcgKyB0cy5sYW5ndWFnZS50byArICcpXFxcXHMrKScgLCdnaScpLFxuXHRcdFx0YW5kVGVzdCA6IG5ldyBSZWdFeHAoJ1xcXFxzKygnICsgdHMubGFuZ3VhZ2UuYW5kICsgJ3wmJilcXFxccysnLCAnaScpLFxuXHRcdFx0YW5kU3BsaXQgOiBuZXcgUmVnRXhwKCcoPzpcXFxccysoPzonICsgdHMubGFuZ3VhZ2UuYW5kICsgJ3wmJilcXFxccyspJywgJ2dpJyksXG5cdFx0XHRvclJlcGxhY2UgOiBuZXcgUmVnRXhwKCdcXFxccysoJyArIHRzLmxhbmd1YWdlLm9yICsgJylcXFxccysnLCAnZ2knKSxcblx0XHRcdGlRdWVyeSA6IG5ldyBSZWdFeHAodHh0LCAnaScpLFxuXHRcdFx0aWdRdWVyeSA6IG5ldyBSZWdFeHAodHh0LCAnaWcnKVxuXHRcdH0pO1xuXG5cdFx0Ly8gZG9uJ3QgYnVpbGQgZmlsdGVyIHJvdyBpZiBjb2x1bW5GaWx0ZXJzIGlzIGZhbHNlIG9yIGFsbCBjb2x1bW5zIGFyZSBzZXQgdG8gXCJmaWx0ZXItZmFsc2VcIiAtIGlzc3VlICMxNTZcblx0XHRpZiAod28uZmlsdGVyX2NvbHVtbkZpbHRlcnMgIT09IGZhbHNlICYmIGMuJGhlYWRlcnMuZmlsdGVyKCcuZmlsdGVyLWZhbHNlLCAucGFyc2VyLWZhbHNlJykubGVuZ3RoICE9PSBjLiRoZWFkZXJzLmxlbmd0aCkge1xuXHRcdFx0Ly8gYnVpbGQgZmlsdGVyIHJvd1xuXHRcdFx0dHMuZmlsdGVyLmJ1aWxkUm93KHRhYmxlLCBjLCB3byk7XG5cdFx0fVxuXG5cdFx0Yy4kdGFibGUuYmluZCgnYWRkUm93cyB1cGRhdGVDZWxsIHVwZGF0ZSB1cGRhdGVSb3dzIHVwZGF0ZUNvbXBsZXRlIGFwcGVuZENhY2hlIGZpbHRlclJlc2V0IGZpbHRlckVuZCBzZWFyY2ggJy5zcGxpdCgnICcpLmpvaW4oYy5uYW1lc3BhY2UgKyAnZmlsdGVyICcpLCBmdW5jdGlvbihldmVudCwgZmlsdGVyKSB7XG5cdFx0XHRjLiR0YWJsZS5maW5kKCcuJyArIHRzLmNzcy5maWx0ZXJSb3cpLnRvZ2dsZSggISh3by5maWx0ZXJfaGlkZUVtcHR5ICYmICQuaXNFbXB0eU9iamVjdChjLmNhY2hlKSAmJiAhKGMuZGVsYXlJbml0ICYmIGV2ZW50LnR5cGUgPT09ICdhcHBlbmRDYWNoZScpKSApOyAvLyBmaXhlcyAjNDUwXG5cdFx0XHRpZiAoICEvKHNlYXJjaHxmaWx0ZXIpLy50ZXN0KGV2ZW50LnR5cGUpICkge1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dHMuZmlsdGVyLmJ1aWxkRGVmYXVsdCh0YWJsZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ2ZpbHRlclJlc2V0Jykge1xuXHRcdFx0XHRjLiR0YWJsZS5maW5kKCcuJyArIHRzLmNzcy5maWx0ZXIpLmFkZCh3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycykudmFsKCcnKTtcblx0XHRcdFx0dHMuZmlsdGVyLnNlYXJjaGluZyh0YWJsZSwgW10pO1xuXHRcdFx0fSBlbHNlIGlmIChldmVudC50eXBlID09PSAnZmlsdGVyRW5kJykge1xuXHRcdFx0XHR0cy5maWx0ZXIuYnVpbGREZWZhdWx0KHRhYmxlLCB0cnVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHNlbmQgZmFsc2UgYXJndW1lbnQgdG8gZm9yY2UgYSBuZXcgc2VhcmNoOyBvdGhlcndpc2UgaWYgdGhlIGZpbHRlciBoYXNuJ3QgY2hhbmdlZCwgaXQgd2lsbCByZXR1cm5cblx0XHRcdFx0ZmlsdGVyID0gZXZlbnQudHlwZSA9PT0gJ3NlYXJjaCcgPyBmaWx0ZXIgOiBldmVudC50eXBlID09PSAndXBkYXRlQ29tcGxldGUnID8gYy4kdGFibGUuZGF0YSgnbGFzdFNlYXJjaCcpIDogJyc7XG5cdFx0XHRcdGlmICgvKHVwZGF0ZXxhZGQpLy50ZXN0KGV2ZW50LnR5cGUpICYmIGV2ZW50LnR5cGUgIT09IFwidXBkYXRlQ29tcGxldGVcIikge1xuXHRcdFx0XHRcdC8vIGZvcmNlIGEgbmV3IHNlYXJjaCBzaW5jZSBjb250ZW50IGhhcyBjaGFuZ2VkXG5cdFx0XHRcdFx0Yy5sYXN0Q29tYmluZWRGaWx0ZXIgPSBudWxsO1xuXHRcdFx0XHRcdGMubGFzdFNlYXJjaCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHBhc3MgdHJ1ZSAoc2tpcEZpcnN0KSB0byBwcmV2ZW50IHRoZSB0YWJsZXNvcnRlci5zZXRGaWx0ZXJzIGZ1bmN0aW9uIGZyb20gc2tpcHBpbmcgdGhlIGZpcnN0IGlucHV0XG5cdFx0XHRcdC8vIGVuc3VyZXMgYWxsIGlucHV0cyBhcmUgdXBkYXRlZCB3aGVuIGEgc2VhcmNoIGlzIHRyaWdnZXJlZCBvbiB0aGUgdGFibGUgJCgndGFibGUnKS50cmlnZ2VyKCdzZWFyY2gnLCBbLi4uXSk7XG5cdFx0XHRcdHRzLmZpbHRlci5zZWFyY2hpbmcodGFibGUsIGZpbHRlciwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cblx0XHQvLyByZXNldCBidXR0b24vbGlua1xuXHRcdGlmICh3by5maWx0ZXJfcmVzZXQpIHtcblx0XHRcdGlmICh3by5maWx0ZXJfcmVzZXQgaW5zdGFuY2VvZiAkKSB7XG5cdFx0XHRcdC8vIHJlc2V0IGNvbnRhaW5zIGEgalF1ZXJ5IG9iamVjdCwgYmluZCB0byBpdFxuXHRcdFx0XHR3by5maWx0ZXJfcmVzZXQuY2xpY2soZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRjLiR0YWJsZS50cmlnZ2VyKCdmaWx0ZXJSZXNldCcpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAoJCh3by5maWx0ZXJfcmVzZXQpLmxlbmd0aCkge1xuXHRcdFx0XHQvLyByZXNldCBpcyBhIGpRdWVyeSBzZWxlY3RvciwgdXNlIGV2ZW50IGRlbGVnYXRpb25cblx0XHRcdFx0JChkb2N1bWVudClcblx0XHRcdFx0LnVuZGVsZWdhdGUod28uZmlsdGVyX3Jlc2V0LCAnY2xpY2sudHNmaWx0ZXInKVxuXHRcdFx0XHQuZGVsZWdhdGUod28uZmlsdGVyX3Jlc2V0LCAnY2xpY2sudHNmaWx0ZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyB0cmlnZ2VyIGEgcmVzZXQgZXZlbnQsIHNvIG90aGVyIGZ1bmN0aW9ucyAoZmlsdGVyX2Zvcm1hdHRlcikga25vdyB3aGVuIHRvIHJlc2V0XG5cdFx0XHRcdFx0Yy4kdGFibGUudHJpZ2dlcignZmlsdGVyUmVzZXQnKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh3by5maWx0ZXJfZnVuY3Rpb25zKSB7XG5cdFx0XHRmb3IgKGNvbHVtbiA9IDA7IGNvbHVtbiA8IGMuY29sdW1uczsgY29sdW1uKyspIHtcblx0XHRcdFx0ZnhuID0gdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIHdvLmZpbHRlcl9mdW5jdGlvbnMsIGNvbHVtbiApO1xuXHRcdFx0XHRpZiAoZnhuKSB7XG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIFwiZmlsdGVyLXNlbGVjdFwiIGZyb20gaGVhZGVyIG90aGVyd2lzZSB0aGUgb3B0aW9ucyBhZGRlZCBoZXJlIGFyZSByZXBsYWNlZCB3aXRoIGFsbCBvcHRpb25zXG5cdFx0XHRcdFx0JGhlYWRlciA9IGMuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgY29sdW1uICsgJ1wiXTpsYXN0JykucmVtb3ZlQ2xhc3MoJ2ZpbHRlci1zZWxlY3QnKTtcblx0XHRcdFx0XHQvLyBkb24ndCBidWlsZCBzZWxlY3QgaWYgXCJmaWx0ZXItZmFsc2VcIiBvciBcInBhcnNlci1mYWxzZVwiIHNldFxuXHRcdFx0XHRcdG5vU2VsZWN0ID0gISgkaGVhZGVyLmhhc0NsYXNzKCdmaWx0ZXItZmFsc2UnKSB8fCAkaGVhZGVyLmhhc0NsYXNzKCdwYXJzZXItZmFsc2UnKSk7XG5cdFx0XHRcdFx0b3B0aW9ucyA9ICcnO1xuXHRcdFx0XHRcdGlmICggZnhuID09PSB0cnVlICYmIG5vU2VsZWN0ICkge1xuXHRcdFx0XHRcdFx0dHMuZmlsdGVyLmJ1aWxkU2VsZWN0KHRhYmxlLCBjb2x1bW4pO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBmeG4gPT09ICdvYmplY3QnICYmIG5vU2VsZWN0ICkge1xuXHRcdFx0XHRcdFx0Ly8gYWRkIGN1c3RvbSBkcm9wIGRvd24gbGlzdFxuXHRcdFx0XHRcdFx0Zm9yIChzdHJpbmcgaW4gZnhuKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMgKz0gb3B0aW9ucyA9PT0gJycgP1xuXHRcdFx0XHRcdFx0XHRcdFx0JzxvcHRpb24gdmFsdWU9XCJcIj4nICsgKCRoZWFkZXIuZGF0YSgncGxhY2Vob2xkZXInKSB8fCAkaGVhZGVyLmF0dHIoJ2RhdGEtcGxhY2Vob2xkZXInKSB8fCB3by5maWx0ZXJfcGxhY2Vob2xkZXIuc2VsZWN0IHx8ICcnKSArICc8L29wdGlvbj4nIDogJyc7XG5cdFx0XHRcdFx0XHRcdFx0dmFsID0gc3RyaW5nO1xuXHRcdFx0XHRcdFx0XHRcdHR4dCA9IHN0cmluZztcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3RyaW5nLmluZGV4T2Yod28uZmlsdGVyX3NlbGVjdFNvdXJjZVNlcGFyYXRvcikgPj0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFsID0gc3RyaW5nLnNwbGl0KHdvLmZpbHRlcl9zZWxlY3RTb3VyY2VTZXBhcmF0b3IpO1xuXHRcdFx0XHRcdFx0XHRcdFx0dHh0ID0gdmFsWzFdO1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFsID0gdmFsWzBdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zICs9ICc8b3B0aW9uICcgKyAodHh0ID09PSB2YWwgPyAnJyA6ICdkYXRhLWZ1bmN0aW9uLW5hbWU9XCInICsgc3RyaW5nICsgJ1wiICcpICsgJ3ZhbHVlPVwiJyArIHZhbCArICdcIj4nICsgdHh0ICsgJzwvb3B0aW9uPic7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGMuJHRhYmxlLmZpbmQoJ3RoZWFkJykuZmluZCgnc2VsZWN0LicgKyB0cy5jc3MuZmlsdGVyICsgJ1tkYXRhLWNvbHVtbj1cIicgKyBjb2x1bW4gKyAnXCJdJykuYXBwZW5kKG9wdGlvbnMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBub3QgcmVhbGx5IHVwZGF0aW5nLCBidXQgaWYgdGhlIGNvbHVtbiBoYXMgYm90aCB0aGUgXCJmaWx0ZXItc2VsZWN0XCIgY2xhc3MgJiBmaWx0ZXJfZnVuY3Rpb25zIHNldCB0byB0cnVlLFxuXHRcdC8vIGl0IHdvdWxkIGFwcGVuZCB0aGUgc2FtZSBvcHRpb25zIHR3aWNlLlxuXHRcdHRzLmZpbHRlci5idWlsZERlZmF1bHQodGFibGUsIHRydWUpO1xuXG5cdFx0dHMuZmlsdGVyLmJpbmRTZWFyY2goIHRhYmxlLCBjLiR0YWJsZS5maW5kKCcuJyArIHRzLmNzcy5maWx0ZXIpLCB0cnVlICk7XG5cdFx0aWYgKHdvLmZpbHRlcl9leHRlcm5hbCkge1xuXHRcdFx0dHMuZmlsdGVyLmJpbmRTZWFyY2goIHRhYmxlLCB3by5maWx0ZXJfZXh0ZXJuYWwgKTtcblx0XHR9XG5cblx0XHRpZiAod28uZmlsdGVyX2hpZGVGaWx0ZXJzKSB7XG5cdFx0XHR0cy5maWx0ZXIuaGlkZUZpbHRlcnModGFibGUsIGMpO1xuXHRcdH1cblxuXHRcdC8vIHNob3cgcHJvY2Vzc2luZyBpY29uXG5cdFx0aWYgKGMuc2hvd1Byb2Nlc3NpbmcpIHtcblx0XHRcdGMuJHRhYmxlLmJpbmQoJ2ZpbHRlclN0YXJ0JyArIGMubmFtZXNwYWNlICsgJ2ZpbHRlciBmaWx0ZXJFbmQnICsgYy5uYW1lc3BhY2UgKyAnZmlsdGVyJywgZnVuY3Rpb24oZXZlbnQsIGNvbHVtbnMpIHtcblx0XHRcdFx0Ly8gb25seSBhZGQgcHJvY2Vzc2luZyB0byBjZXJ0YWluIGNvbHVtbnMgdG8gYWxsIGNvbHVtbnNcblx0XHRcdFx0JGhlYWRlciA9IChjb2x1bW5zKSA/IGMuJHRhYmxlLmZpbmQoJy4nICsgdHMuY3NzLmhlYWRlcikuZmlsdGVyKCdbZGF0YS1jb2x1bW5dJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb2x1bW5zWyQodGhpcykuZGF0YSgnY29sdW1uJyldICE9PSAnJztcblx0XHRcdFx0fSkgOiAnJztcblx0XHRcdFx0dHMuaXNQcm9jZXNzaW5nKHRhYmxlLCBldmVudC50eXBlID09PSAnZmlsdGVyU3RhcnQnLCBjb2x1bW5zID8gJGhlYWRlciA6ICcnKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIHNldCBmaWx0ZXJlZCByb3dzIGNvdW50IChpbnRpYWxseSB1bmZpbHRlcmVkKVxuXHRcdGMuZmlsdGVyZWRSb3dzID0gYy50b3RhbFJvd3M7XG5cblx0XHQvLyBhZGQgZGVmYXVsdCB2YWx1ZXNcblx0XHRjLiR0YWJsZS5iaW5kKCd0YWJsZXNvcnRlci1pbml0aWFsaXplZCBwYWdlckJlZm9yZUluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyByZWRlZmluZSBcIndvXCIgYXMgaXQgZG9lcyBub3QgdXBkYXRlIHByb3Blcmx5IGluc2lkZSB0aGlzIGNhbGxiYWNrXG5cdFx0XHR2YXIgd28gPSB0aGlzLmNvbmZpZy53aWRnZXRPcHRpb25zO1xuXHRcdFx0ZmlsdGVycyA9IHRzLmZpbHRlci5zZXREZWZhdWx0cyh0YWJsZSwgYywgd28pIHx8IFtdO1xuXHRcdFx0aWYgKGZpbHRlcnMubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIHByZXZlbnQgZGVsYXlJbml0IGZyb20gdHJpZ2dlcmluZyBhIGNhY2hlIGJ1aWxkIGlmIGZpbHRlcnMgYXJlIGVtcHR5XG5cdFx0XHRcdGlmICggIShjLmRlbGF5SW5pdCAmJiBmaWx0ZXJzLmpvaW4oJycpID09PSAnJykgKSB7XG5cdFx0XHRcdFx0dHMuc2V0RmlsdGVycyh0YWJsZSwgZmlsdGVycywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGMuJHRhYmxlLnRyaWdnZXIoJ2ZpbHRlckZvbWF0dGVyVXBkYXRlJyk7XG5cdFx0XHQvLyB0cmlnZ2VyIGluaXQgYWZ0ZXIgc2V0VGltZW91dCB0byBwcmV2ZW50IG11bHRpcGxlIGZpbHRlclN0YXJ0L0VuZC9Jbml0IHRyaWdnZXJzXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGlmICghd28uZmlsdGVyX2luaXRpYWxpemVkKSB7XG5cdFx0XHRcdFx0dHMuZmlsdGVyLmZpbHRlckluaXRDb21wbGV0ZShjKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwKTtcblx0XHR9KTtcblx0XHQvLyBpZiBmaWx0ZXIgd2lkZ2V0IGlzIGFkZGVkIGFmdGVyIHBhZ2VyIGhhcyBpbml0aWFsaXplZDsgdGhlbiBzZXQgZmlsdGVyIGluaXQgZmxhZ1xuXHRcdGlmIChjLnBhZ2VyICYmIGMucGFnZXIuaW5pdGlhbGl6ZWQgJiYgIXdvLmZpbHRlcl9pbml0aWFsaXplZCkge1xuXHRcdFx0Yy4kdGFibGUudHJpZ2dlcignZmlsdGVyRm9tYXR0ZXJVcGRhdGUnKTtcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0dHMuZmlsdGVyLmZpbHRlckluaXRDb21wbGV0ZShjKTtcblx0XHRcdH0sIDEwMCk7XG5cdFx0fVxuXHR9LFxuXHQvLyAkY2VsbCBwYXJhbWV0ZXIsIGJ1dCBub3QgdGhlIGNvbmZpZywgaXMgcGFzc2VkIHRvIHRoZVxuXHQvLyBmaWx0ZXJfZm9ybWF0dGVycywgc28gd2UgaGF2ZSB0byB3b3JrIHdpdGggaXQgaW5zdGVhZFxuXHRmb3JtYXR0ZXJVcGRhdGVkOiBmdW5jdGlvbigkY2VsbCwgY29sdW1uKSB7XG5cdFx0dmFyIHdvID0gJGNlbGwuY2xvc2VzdCgndGFibGUnKVswXS5jb25maWcud2lkZ2V0T3B0aW9ucztcblx0XHRpZiAoIXdvLmZpbHRlcl9pbml0aWFsaXplZCkge1xuXHRcdFx0Ly8gYWRkIHVwZGF0ZXMgYnkgY29sdW1uIHNpbmNlIHRoaXMgZnVuY3Rpb25cblx0XHRcdC8vIG1heSBiZSBjYWxsZWQgbnVtZXJvdXMgdGltZXMgYmVmb3JlIGluaXRpYWxpemF0aW9uXG5cdFx0XHR3by5maWx0ZXJfZm9ybWF0dGVySW5pdFtjb2x1bW5dID0gMTtcblx0XHR9XG5cdH0sXG5cdGZpbHRlckluaXRDb21wbGV0ZTogZnVuY3Rpb24oYyl7XG5cdFx0dmFyIHdvID0gYy53aWRnZXRPcHRpb25zLFxuXHRcdFx0Y291bnQgPSAwLFxuXHRcdFx0Y29tcGxldGVkID0gZnVuY3Rpb24oKXtcblx0XHRcdFx0d28uZmlsdGVyX2luaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0Yy4kdGFibGUudHJpZ2dlcignZmlsdGVySW5pdCcsIGMpO1xuXHRcdFx0XHR0cy5maWx0ZXIuZmluZFJvd3MoYy50YWJsZSwgYy4kdGFibGUuZGF0YSgnbGFzdFNlYXJjaCcpIHx8IFtdKTtcblx0XHRcdH07XG5cdFx0aWYgKCAkLmlzRW1wdHlPYmplY3QoIHdvLmZpbHRlcl9mb3JtYXR0ZXIgKSApIHtcblx0XHRcdGNvbXBsZXRlZCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmVhY2goIHdvLmZpbHRlcl9mb3JtYXR0ZXJJbml0LCBmdW5jdGlvbihpLCB2YWwpIHtcblx0XHRcdFx0aWYgKHZhbCA9PT0gMSkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHdvLmZpbHRlcl9pbml0VGltZXIpO1xuXHRcdFx0aWYgKCF3by5maWx0ZXJfaW5pdGlhbGl6ZWQgJiYgY291bnQgPT09IHdvLmZpbHRlcl9mb3JtYXR0ZXJDb3VudCkge1xuXHRcdFx0XHQvLyBmaWx0ZXIgd2lkZ2V0IGluaXRpYWxpemVkXG5cdFx0XHRcdGNvbXBsZXRlZCgpO1xuXHRcdFx0fSBlbHNlIGlmICghd28uZmlsdGVyX2luaXRpYWxpemVkKSB7XG5cdFx0XHRcdC8vIGZhbGwgYmFjayBpbiBjYXNlIGEgZmlsdGVyX2Zvcm1hdHRlciBkb2Vzbid0IGNhbGxcblx0XHRcdFx0Ly8gJC50YWJsZXNvcnRlci5maWx0ZXIuZm9ybWF0dGVyVXBkYXRlZCgkY2VsbCwgY29sdW1uKSwgYW5kIHRoZSBjb3VudCBpcyBvZmZcblx0XHRcdFx0d28uZmlsdGVyX2luaXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRjb21wbGV0ZWQoKTtcblx0XHRcdFx0fSwgNTAwKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c2V0RGVmYXVsdHM6IGZ1bmN0aW9uKHRhYmxlLCBjLCB3bykge1xuXHRcdHZhciBpc0FycmF5LCBzYXZlZCwgaW5keCxcblx0XHRcdC8vIGdldCBjdXJyZW50IChkZWZhdWx0KSBmaWx0ZXJzXG5cdFx0XHRmaWx0ZXJzID0gdHMuZ2V0RmlsdGVycyh0YWJsZSkgfHwgW107XG5cdFx0aWYgKHdvLmZpbHRlcl9zYXZlRmlsdGVycyAmJiB0cy5zdG9yYWdlKSB7XG5cdFx0XHRzYXZlZCA9IHRzLnN0b3JhZ2UoIHRhYmxlLCAndGFibGVzb3J0ZXItZmlsdGVycycgKSB8fCBbXTtcblx0XHRcdGlzQXJyYXkgPSAkLmlzQXJyYXkoc2F2ZWQpO1xuXHRcdFx0Ly8gbWFrZSBzdXJlIHdlJ3JlIG5vdCBqdXN0IGdldHRpbmcgYW4gZW1wdHkgYXJyYXlcblx0XHRcdGlmICggIShpc0FycmF5ICYmIHNhdmVkLmpvaW4oJycpID09PSAnJyB8fCAhaXNBcnJheSkgKSB7IGZpbHRlcnMgPSBzYXZlZDsgfVxuXHRcdH1cblx0XHQvLyBpZiBubyBmaWx0ZXJzIHNhdmVkLCB0aGVuIGNoZWNrIGRlZmF1bHQgc2V0dGluZ3Ncblx0XHRpZiAoZmlsdGVycy5qb2luKCcnKSA9PT0gJycpIHtcblx0XHRcdGZvciAoaW5keCA9IDA7IGluZHggPCBjLmNvbHVtbnM7IGluZHgrKykge1xuXHRcdFx0XHRmaWx0ZXJzW2luZHhdID0gYy4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyBpbmR4ICsgJ1wiXTpsYXN0JykuYXR0cih3by5maWx0ZXJfZGVmYXVsdEF0dHJpYikgfHwgZmlsdGVyc1tpbmR4XTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Yy4kdGFibGUuZGF0YSgnbGFzdFNlYXJjaCcsIGZpbHRlcnMpO1xuXHRcdHJldHVybiBmaWx0ZXJzO1xuXHR9LFxuXHRwYXJzZUZpbHRlcjogZnVuY3Rpb24oYywgZmlsdGVyLCBjb2x1bW4sIHBhcnNlZCwgZm9yY2VQYXJzZSl7XG5cdFx0cmV0dXJuIGZvcmNlUGFyc2UgfHwgcGFyc2VkID9cblx0XHRcdGMucGFyc2Vyc1tjb2x1bW5dLmZvcm1hdCggZmlsdGVyLCBjLnRhYmxlLCBbXSwgY29sdW1uICkgOlxuXHRcdFx0ZmlsdGVyO1xuXHR9LFxuXHRidWlsZFJvdzogZnVuY3Rpb24odGFibGUsIGMsIHdvKSB7XG5cdFx0dmFyIGNvbCwgY29sdW1uLCAkaGVhZGVyLCBidWlsZFNlbGVjdCwgZGlzYWJsZWQsIG5hbWUsIGZmeG4sXG5cdFx0XHQvLyBjLmNvbHVtbnMgZGVmaW5lZCBpbiBjb21wdXRlVGhJbmRleGVzKClcblx0XHRcdGNvbHVtbnMgPSBjLmNvbHVtbnMsXG5cdFx0XHRhcnJ5ID0gJC5pc0FycmF5KHdvLmZpbHRlcl9jZWxsRmlsdGVyKSxcblx0XHRcdGJ1aWxkRmlsdGVyID0gJzx0ciByb2xlPVwicm93XCIgY2xhc3M9XCInICsgdHMuY3NzLmZpbHRlclJvdyArICdcIj4nO1xuXHRcdGZvciAoY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcblx0XHRcdGlmIChhcnJ5KSB7XG5cdFx0XHRcdGJ1aWxkRmlsdGVyICs9ICc8dGQnICsgKCB3by5maWx0ZXJfY2VsbEZpbHRlcltjb2x1bW5dID8gJyBjbGFzcz1cIicgKyB3by5maWx0ZXJfY2VsbEZpbHRlcltjb2x1bW5dICsgJ1wiJyA6ICcnICkgKyAnPjwvdGQ+Jztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1aWxkRmlsdGVyICs9ICc8dGQnICsgKCB3by5maWx0ZXJfY2VsbEZpbHRlciAhPT0gJycgPyAnIGNsYXNzPVwiJyArIHdvLmZpbHRlcl9jZWxsRmlsdGVyICsgJ1wiJyA6ICcnICkgKyAnPjwvdGQ+Jztcblx0XHRcdH1cblx0XHR9XG5cdFx0Yy4kZmlsdGVycyA9ICQoYnVpbGRGaWx0ZXIgKz0gJzwvdHI+JykuYXBwZW5kVG8oIGMuJHRhYmxlLmNoaWxkcmVuKCd0aGVhZCcpLmVxKDApICkuZmluZCgndGQnKTtcblx0XHQvLyBidWlsZCBlYWNoIGZpbHRlciBpbnB1dFxuXHRcdGZvciAoY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcblx0XHRcdGRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHQvLyBhc3N1bWluZyBsYXN0IGNlbGwgb2YgYSBjb2x1bW4gaXMgdGhlIG1haW4gY29sdW1uXG5cdFx0XHQkaGVhZGVyID0gYy4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyBjb2x1bW4gKyAnXCJdOmxhc3QnKTtcblx0XHRcdGZmeG4gPSB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgd28uZmlsdGVyX2Z1bmN0aW9ucywgY29sdW1uICk7XG5cdFx0XHRidWlsZFNlbGVjdCA9ICh3by5maWx0ZXJfZnVuY3Rpb25zICYmIGZmeG4gJiYgdHlwZW9mIGZmeG4gIT09IFwiZnVuY3Rpb25cIiApIHx8XG5cdFx0XHRcdCRoZWFkZXIuaGFzQ2xhc3MoJ2ZpbHRlci1zZWxlY3QnKTtcblx0XHRcdC8vIGdldCBkYXRhIGZyb20galF1ZXJ5IGRhdGEsIG1ldGFkYXRhLCBoZWFkZXJzIG9wdGlvbiBvciBoZWFkZXIgY2xhc3MgbmFtZVxuXHRcdFx0Y29sID0gdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIGMuaGVhZGVycywgY29sdW1uICk7XG5cdFx0XHRkaXNhYmxlZCA9IHRzLmdldERhdGEoJGhlYWRlclswXSwgY29sLCAnZmlsdGVyJykgPT09ICdmYWxzZScgfHwgdHMuZ2V0RGF0YSgkaGVhZGVyWzBdLCBjb2wsICdwYXJzZXInKSA9PT0gJ2ZhbHNlJztcblxuXHRcdFx0aWYgKGJ1aWxkU2VsZWN0KSB7XG5cdFx0XHRcdGJ1aWxkRmlsdGVyID0gJCgnPHNlbGVjdD4nKS5hcHBlbmRUbyggYy4kZmlsdGVycy5lcShjb2x1bW4pICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmZnhuID0gdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIHdvLmZpbHRlcl9mb3JtYXR0ZXIsIGNvbHVtbiApO1xuXHRcdFx0XHRpZiAoZmZ4bikge1xuXHRcdFx0XHRcdHdvLmZpbHRlcl9mb3JtYXR0ZXJDb3VudCsrO1xuXHRcdFx0XHRcdGJ1aWxkRmlsdGVyID0gZmZ4biggYy4kZmlsdGVycy5lcShjb2x1bW4pLCBjb2x1bW4gKTtcblx0XHRcdFx0XHQvLyBubyBlbGVtZW50IHJldHVybmVkLCBzbyBsZXRzIGdvIGZpbmQgaXRcblx0XHRcdFx0XHRpZiAoYnVpbGRGaWx0ZXIgJiYgYnVpbGRGaWx0ZXIubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRidWlsZEZpbHRlciA9IGMuJGZpbHRlcnMuZXEoY29sdW1uKS5jaGlsZHJlbignaW5wdXQnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZWxlbWVudCBub3QgaW4gRE9NLCBzbyBsZXRzIGF0dGFjaCBpdFxuXHRcdFx0XHRcdGlmICggYnVpbGRGaWx0ZXIgJiYgKGJ1aWxkRmlsdGVyLnBhcmVudCgpLmxlbmd0aCA9PT0gMCB8fFxuXHRcdFx0XHRcdFx0KGJ1aWxkRmlsdGVyLnBhcmVudCgpLmxlbmd0aCAmJiBidWlsZEZpbHRlci5wYXJlbnQoKVswXSAhPT0gYy4kZmlsdGVyc1tjb2x1bW5dKSkgKSB7XG5cdFx0XHRcdFx0XHRjLiRmaWx0ZXJzLmVxKGNvbHVtbikuYXBwZW5kKGJ1aWxkRmlsdGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnVpbGRGaWx0ZXIgPSAkKCc8aW5wdXQgdHlwZT1cInNlYXJjaFwiPicpLmFwcGVuZFRvKCBjLiRmaWx0ZXJzLmVxKGNvbHVtbikgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYnVpbGRGaWx0ZXIpIHtcblx0XHRcdFx0XHRidWlsZEZpbHRlci5hdHRyKCdwbGFjZWhvbGRlcicsICRoZWFkZXIuZGF0YSgncGxhY2Vob2xkZXInKSB8fCAkaGVhZGVyLmF0dHIoJ2RhdGEtcGxhY2Vob2xkZXInKSB8fCB3by5maWx0ZXJfcGxhY2Vob2xkZXIuc2VhcmNoIHx8ICcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGJ1aWxkRmlsdGVyKSB7XG5cdFx0XHRcdC8vIGFkZCBmaWx0ZXIgY2xhc3MgbmFtZVxuXHRcdFx0XHRuYW1lID0gKCAkLmlzQXJyYXkod28uZmlsdGVyX2Nzc0ZpbHRlcikgP1xuXHRcdFx0XHRcdCh0eXBlb2Ygd28uZmlsdGVyX2Nzc0ZpbHRlcltjb2x1bW5dICE9PSAndW5kZWZpbmVkJyA/IHdvLmZpbHRlcl9jc3NGaWx0ZXJbY29sdW1uXSB8fCAnJyA6ICcnKSA6XG5cdFx0XHRcdFx0d28uZmlsdGVyX2Nzc0ZpbHRlciApIHx8ICcnO1xuXHRcdFx0XHRidWlsZEZpbHRlci5hZGRDbGFzcyggdHMuY3NzLmZpbHRlciArICcgJyArIG5hbWUgKS5hdHRyKCdkYXRhLWNvbHVtbicsIGNvbHVtbik7XG5cdFx0XHRcdGlmIChkaXNhYmxlZCkge1xuXHRcdFx0XHRcdGJ1aWxkRmlsdGVyLmF0dHIoJ3BsYWNlaG9sZGVyJywgJycpLmFkZENsYXNzKCdkaXNhYmxlZCcpWzBdLmRpc2FibGVkID0gdHJ1ZTsgLy8gZGlzYWJsZWQhXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGJpbmRTZWFyY2g6IGZ1bmN0aW9uKHRhYmxlLCAkZWwsIGludGVybmFsKSB7XG5cdFx0dGFibGUgPSAkKHRhYmxlKVswXTtcblx0XHQkZWwgPSAkKCRlbCk7IC8vIGFsbG93IHBhc3NpbmcgYSBzZWxlY3RvciBzdHJpbmdcblx0XHRpZiAoISRlbC5sZW5ndGgpIHsgcmV0dXJuOyB9XG5cdFx0dmFyIGMgPSB0YWJsZS5jb25maWcsXG5cdFx0XHR3byA9IGMud2lkZ2V0T3B0aW9ucyxcblx0XHRcdCRleHQgPSB3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycztcblx0XHRpZiAoaW50ZXJuYWwgIT09IHRydWUpIHtcblx0XHRcdC8vIHNhdmUgYW55TWF0Y2ggZWxlbWVudFxuXHRcdFx0d28uZmlsdGVyXyRhbnlNYXRjaCA9ICRlbC5maWx0ZXIod28uZmlsdGVyX2FueUNvbHVtblNlbGVjdG9yICsgJywnICsgd28uZmlsdGVyX211bHRpcGxlQ29sdW1uU2VsZWN0b3IpO1xuXHRcdFx0aWYgKCRleHQgJiYgJGV4dC5sZW5ndGgpIHtcblx0XHRcdFx0d28uZmlsdGVyXyRleHRlcm5hbEZpbHRlcnMgPSB3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycy5hZGQoICRlbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d28uZmlsdGVyXyRleHRlcm5hbEZpbHRlcnMgPSAkZWw7XG5cdFx0XHR9XG5cdFx0XHQvLyB1cGRhdGUgdmFsdWVzIChleHRlcm5hbCBmaWx0ZXJzIGFkZGVkIGFmdGVyIHRhYmxlIGluaXRpYWxpemF0aW9uKVxuXHRcdFx0dHMuc2V0RmlsdGVycyh0YWJsZSwgYy4kdGFibGUuZGF0YSgnbGFzdFNlYXJjaCcpIHx8IFtdLCBpbnRlcm5hbCA9PT0gZmFsc2UpO1xuXHRcdH1cblx0XHQkZWxcblx0XHQvLyB1c2UgZGF0YSBhdHRyaWJ1dGUgaW5zdGVhZCBvZiBqUXVlcnkgZGF0YSBzaW5jZSB0aGUgaGVhZCBpcyBjbG9uZWQgd2l0aG91dCBpbmNsdWRpbmcgdGhlIGRhdGEvYmluZGluZ1xuXHRcdC5hdHRyKCdkYXRhLWxhc3RTZWFyY2hUaW1lJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpXG5cdFx0LnVuYmluZCgna2V5cHJlc3Mga2V5dXAgc2VhcmNoIGNoYW5nZSAnLnNwbGl0KCcgJykuam9pbihjLm5hbWVzcGFjZSArICdmaWx0ZXIgJykpXG5cdFx0Ly8gaW5jbHVkZSBjaGFuZ2UgZm9yIHNlbGVjdCAtIGZpeGVzICM0NzNcblx0XHQuYmluZCgna2V5dXAnICsgYy5uYW1lc3BhY2UgKyAnZmlsdGVyJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdCQodGhpcykuYXR0cignZGF0YS1sYXN0U2VhcmNoVGltZScsIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcblx0XHRcdC8vIGVtdWxhdGUgd2hhdCB3ZWJraXQgZG9lcy4uLi4gZXNjYXBlIGNsZWFycyB0aGUgZmlsdGVyXG5cdFx0XHRpZiAoZXZlbnQud2hpY2ggPT09IDI3KSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSAnJztcblx0XHRcdC8vIGxpdmUgc2VhcmNoXG5cdFx0XHR9IGVsc2UgaWYgKCB3by5maWx0ZXJfbGl2ZVNlYXJjaCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Ly8gZG9uJ3QgcmV0dXJuIGlmIHRoZSBzZWFyY2ggdmFsdWUgaXMgZW1wdHkgKGFsbCByb3dzIG5lZWQgdG8gYmUgcmV2ZWFsZWQpXG5cdFx0XHR9IGVsc2UgaWYgKCB0aGlzLnZhbHVlICE9PSAnJyAmJiAoXG5cdFx0XHRcdC8vIGxpdmVTZWFyY2ggY2FuIGNvbnRhaW4gYSBtaW4gdmFsdWUgbGVuZ3RoOyBpZ25vcmUgYXJyb3cgYW5kIG1ldGEga2V5cywgYnV0IGFsbG93IGJhY2tzcGFjZVxuXHRcdFx0XHQoIHR5cGVvZiB3by5maWx0ZXJfbGl2ZVNlYXJjaCA9PT0gJ251bWJlcicgJiYgdGhpcy52YWx1ZS5sZW5ndGggPCB3by5maWx0ZXJfbGl2ZVNlYXJjaCApIHx8XG5cdFx0XHRcdC8vIGxldCByZXR1cm4gJiBiYWNrc3BhY2UgY29udGludWUgb24sIGJ1dCBpZ25vcmUgYXJyb3dzICYgbm9uLXZhbGlkIGNoYXJhY3RlcnNcblx0XHRcdFx0KCBldmVudC53aGljaCAhPT0gMTMgJiYgZXZlbnQud2hpY2ggIT09IDggJiYgKCBldmVudC53aGljaCA8IDMyIHx8IChldmVudC53aGljaCA+PSAzNyAmJiBldmVudC53aGljaCA8PSA0MCkgKSApICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdC8vIGNoYW5nZSBldmVudCA9IG5vIGRlbGF5OyBsYXN0IHRydWUgZmxhZyB0ZWxscyBnZXRGaWx0ZXJzIHRvIHNraXAgbmV3ZXN0IHRpbWVkIGlucHV0XG5cdFx0XHR0cy5maWx0ZXIuc2VhcmNoaW5nKCB0YWJsZSwgdHJ1ZSwgdHJ1ZSApO1xuXHRcdH0pXG5cdFx0LmJpbmQoJ3NlYXJjaCBjaGFuZ2Uga2V5cHJlc3MgJy5zcGxpdCgnICcpLmpvaW4oYy5uYW1lc3BhY2UgKyAnZmlsdGVyICcpLCBmdW5jdGlvbihldmVudCl7XG5cdFx0XHR2YXIgY29sdW1uID0gJCh0aGlzKS5kYXRhKCdjb2x1bW4nKTtcblx0XHRcdC8vIGRvbid0IGFsbG93IFwiY2hhbmdlXCIgZXZlbnQgdG8gcHJvY2VzcyBpZiB0aGUgaW5wdXQgdmFsdWUgaXMgdGhlIHNhbWUgLSBmaXhlcyAjNjg1XG5cdFx0XHRpZiAoZXZlbnQud2hpY2ggPT09IDEzIHx8IGV2ZW50LnR5cGUgPT09ICdzZWFyY2gnIHx8IGV2ZW50LnR5cGUgPT09ICdjaGFuZ2UnICYmIHRoaXMudmFsdWUgIT09IGMubGFzdFNlYXJjaFtjb2x1bW5dKSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdC8vIGluaXQgc2VhcmNoIHdpdGggbm8gZGVsYXlcblx0XHRcdFx0JCh0aGlzKS5hdHRyKCdkYXRhLWxhc3RTZWFyY2hUaW1lJywgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuXHRcdFx0XHR0cy5maWx0ZXIuc2VhcmNoaW5nKCB0YWJsZSwgZmFsc2UsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0c2VhcmNoaW5nOiBmdW5jdGlvbih0YWJsZSwgZmlsdGVyLCBza2lwRmlyc3QpIHtcblx0XHR2YXIgd28gPSB0YWJsZS5jb25maWcud2lkZ2V0T3B0aW9ucztcblx0XHRjbGVhclRpbWVvdXQod28uc2VhcmNoVGltZXIpO1xuXHRcdGlmICh0eXBlb2YgZmlsdGVyID09PSAndW5kZWZpbmVkJyB8fCBmaWx0ZXIgPT09IHRydWUpIHtcblx0XHRcdC8vIGRlbGF5IGZpbHRlcmluZ1xuXHRcdFx0d28uc2VhcmNoVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0cy5maWx0ZXIuY2hlY2tGaWx0ZXJzKHRhYmxlLCBmaWx0ZXIsIHNraXBGaXJzdCApO1xuXHRcdFx0fSwgd28uZmlsdGVyX2xpdmVTZWFyY2ggPyB3by5maWx0ZXJfc2VhcmNoRGVsYXkgOiAxMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHNraXAgZGVsYXlcblx0XHRcdHRzLmZpbHRlci5jaGVja0ZpbHRlcnModGFibGUsIGZpbHRlciwgc2tpcEZpcnN0KTtcblx0XHR9XG5cdH0sXG5cdGNoZWNrRmlsdGVyczogZnVuY3Rpb24odGFibGUsIGZpbHRlciwgc2tpcEZpcnN0KSB7XG5cdFx0dmFyIGMgPSB0YWJsZS5jb25maWcsXG5cdFx0XHR3byA9IGMud2lkZ2V0T3B0aW9ucyxcblx0XHRcdGZpbHRlckFycmF5ID0gJC5pc0FycmF5KGZpbHRlciksXG5cdFx0XHRmaWx0ZXJzID0gKGZpbHRlckFycmF5KSA/IGZpbHRlciA6IHRzLmdldEZpbHRlcnModGFibGUsIHRydWUpLFxuXHRcdFx0Y29tYmluZWRGaWx0ZXJzID0gKGZpbHRlcnMgfHwgW10pLmpvaW4oJycpOyAvLyBjb21iaW5lZCBmaWx0ZXIgdmFsdWVzXG5cdFx0Ly8gcHJldmVudCBlcnJvcnMgaWYgZGVsYXkgaW5pdCBpcyBzZXRcblx0XHRpZiAoJC5pc0VtcHR5T2JqZWN0KGMuY2FjaGUpKSB7XG5cdFx0XHQvLyB1cGRhdGUgY2FjaGUgaWYgZGVsYXlJbml0IHNldCAmIHBhZ2VyIGhhcyBpbml0aWFsaXplZCAoYWZ0ZXIgdXNlciBpbml0aWF0ZXMgYSBzZWFyY2gpXG5cdFx0XHRpZiAoYy5kZWxheUluaXQgJiYgYy5wYWdlciAmJiBjLnBhZ2VyLmluaXRpYWxpemVkKSB7XG5cdFx0XHRcdGMuJHRhYmxlLnRyaWdnZXIoJ3VwZGF0ZUNhY2hlJywgW2Z1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dHMuZmlsdGVyLmNoZWNrRmlsdGVycyh0YWJsZSwgZmFsc2UsIHNraXBGaXJzdCk7XG5cdFx0XHRcdH1dICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIGFkZCBmaWx0ZXIgYXJyYXkgYmFjayBpbnRvIGlucHV0c1xuXHRcdGlmIChmaWx0ZXJBcnJheSkge1xuXHRcdFx0dHMuc2V0RmlsdGVycyggdGFibGUsIGZpbHRlcnMsIGZhbHNlLCBza2lwRmlyc3QgIT09IHRydWUgKTtcblx0XHRcdGlmICghd28uZmlsdGVyX2luaXRpYWxpemVkKSB7IGMubGFzdENvbWJpbmVkRmlsdGVyID0gJyc7IH1cblx0XHR9XG5cdFx0aWYgKHdvLmZpbHRlcl9oaWRlRmlsdGVycykge1xuXHRcdFx0Ly8gc2hvdy9oaWRlIGZpbHRlciByb3cgYXMgbmVlZGVkXG5cdFx0XHRjLiR0YWJsZS5maW5kKCcuJyArIHRzLmNzcy5maWx0ZXJSb3cpLnRyaWdnZXIoIGNvbWJpbmVkRmlsdGVycyA9PT0gJycgPyAnbW91c2VsZWF2ZScgOiAnbW91c2VlbnRlcicgKTtcblx0XHR9XG5cdFx0Ly8gcmV0dXJuIGlmIHRoZSBsYXN0IHNlYXJjaCBpcyB0aGUgc2FtZTsgYnV0IGZpbHRlciA9PT0gZmFsc2Ugd2hlbiB1cGRhdGluZyB0aGUgc2VhcmNoXG5cdFx0Ly8gc2VlIGV4YW1wbGUtd2lkZ2V0LWZpbHRlci5odG1sIGZpbHRlciB0b2dnbGUgYnV0dG9uc1xuXHRcdGlmIChjLmxhc3RDb21iaW5lZEZpbHRlciA9PT0gY29tYmluZWRGaWx0ZXJzICYmIGZpbHRlciAhPT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9IGVsc2UgaWYgKGZpbHRlciA9PT0gZmFsc2UpIHtcblx0XHRcdC8vIGZvcmNlIGZpbHRlciByZWZyZXNoXG5cdFx0XHRjLmxhc3RDb21iaW5lZEZpbHRlciA9IG51bGw7XG5cdFx0XHRjLmxhc3RTZWFyY2ggPSBbXTtcblx0XHR9XG5cdFx0aWYgKHdvLmZpbHRlcl9pbml0aWFsaXplZCkgeyBjLiR0YWJsZS50cmlnZ2VyKCdmaWx0ZXJTdGFydCcsIFtmaWx0ZXJzXSk7IH1cblx0XHRpZiAoYy5zaG93UHJvY2Vzc2luZykge1xuXHRcdFx0Ly8gZ2l2ZSBpdCB0aW1lIGZvciB0aGUgcHJvY2Vzc2luZyBpY29uIHRvIGtpY2sgaW5cblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRzLmZpbHRlci5maW5kUm93cyh0YWJsZSwgZmlsdGVycywgY29tYmluZWRGaWx0ZXJzKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSwgMzApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cy5maWx0ZXIuZmluZFJvd3ModGFibGUsIGZpbHRlcnMsIGNvbWJpbmVkRmlsdGVycyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRoaWRlRmlsdGVyczogZnVuY3Rpb24odGFibGUsIGMpIHtcblx0XHR2YXIgJGZpbHRlclJvdywgJGZpbHRlclJvdzIsIHRpbWVyO1xuXHRcdCQodGFibGUpXG5cdFx0XHQuZmluZCgnLicgKyB0cy5jc3MuZmlsdGVyUm93KVxuXHRcdFx0LmFkZENsYXNzKCdoaWRlbWUnKVxuXHRcdFx0LmJpbmQoJ21vdXNlZW50ZXIgbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0Ly8gc2F2ZSBldmVudCBvYmplY3QgLSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjE0MFxuXHRcdFx0XHR2YXIgZXZlbnQgPSBlO1xuXHRcdFx0XHQkZmlsdGVyUm93ID0gJCh0aGlzKTtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcblx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggL2VudGVyfG92ZXIvLnRlc3QoZXZlbnQudHlwZSkgKSB7XG5cdFx0XHRcdFx0XHQkZmlsdGVyUm93LnJlbW92ZUNsYXNzKCdoaWRlbWUnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gZG9uJ3QgaGlkZSBpZiBpbnB1dCBoYXMgZm9jdXNcblx0XHRcdFx0XHRcdC8vICQoJzpmb2N1cycpIG5lZWRzIGpRdWVyeSAxLjYrXG5cdFx0XHRcdFx0XHRpZiAoICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuY2xvc2VzdCgndHInKVswXSAhPT0gJGZpbHRlclJvd1swXSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gZG9uJ3QgaGlkZSByb3cgaWYgYW55IGZpbHRlciBoYXMgYSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRpZiAoYy5sYXN0Q29tYmluZWRGaWx0ZXIgPT09ICcnKSB7XG5cdFx0XHRcdFx0XHRcdFx0JGZpbHRlclJvdy5hZGRDbGFzcygnaGlkZW1lJyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDIwMCk7XG5cdFx0XHR9KVxuXHRcdFx0LmZpbmQoJ2lucHV0LCBzZWxlY3QnKS5iaW5kKCdmb2N1cyBibHVyJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHQkZmlsdGVyUm93MiA9ICQodGhpcykuY2xvc2VzdCgndHInKTtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVyKTtcblx0XHRcdFx0dmFyIGV2ZW50ID0gZTtcblx0XHRcdFx0dGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIGRvbid0IGhpZGUgcm93IGlmIGFueSBmaWx0ZXIgaGFzIGEgdmFsdWVcblx0XHRcdFx0XHRpZiAodHMuZ2V0RmlsdGVycyhjLiR0YWJsZSkuam9pbignJykgPT09ICcnKSB7XG5cdFx0XHRcdFx0XHQkZmlsdGVyUm93MlsgZXZlbnQudHlwZSA9PT0gJ2ZvY3VzJyA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnaGlkZW1lJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAyMDApO1xuXHRcdFx0fSk7XG5cdH0sXG5cdGRlZmF1bHRGaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlciwgbWFzayl7XG5cdFx0aWYgKGZpbHRlciA9PT0gJycpIHsgcmV0dXJuIGZpbHRlcjsgfVxuXHRcdHZhciByZWdleCA9IHRzLmZpbHRlci5yZWdleC5pUXVlcnksXG5cdFx0XHRtYXNrTGVuID0gbWFzay5tYXRjaCggdHMuZmlsdGVyLnJlZ2V4LmlnUXVlcnkgKS5sZW5ndGgsXG5cdFx0XHRxdWVyeSA9IG1hc2tMZW4gPiAxID8gJC50cmltKGZpbHRlcikuc3BsaXQoL1xccy8pIDogWyAkLnRyaW0oZmlsdGVyKSBdLFxuXHRcdFx0bGVuID0gcXVlcnkubGVuZ3RoIC0gMSxcblx0XHRcdGluZHggPSAwLFxuXHRcdFx0dmFsID0gbWFzaztcblx0XHRpZiAoIGxlbiA8IDEgJiYgbWFza0xlbiA+IDEgKSB7XG5cdFx0XHQvLyBvbmx5IG9uZSBcIndvcmRcIiBpbiBxdWVyeSBidXQgbWFzayBoYXMgPjEgc2xvdHNcblx0XHRcdHF1ZXJ5WzFdID0gcXVlcnlbMF07XG5cdFx0fVxuXHRcdC8vIHJlcGxhY2UgYWxsIHtxdWVyeX0gd2l0aCBxdWVyeSB3b3Jkcy4uLlxuXHRcdC8vIGlmIHF1ZXJ5ID0gXCJCb2JcIiwgdGhlbiBjb252ZXJ0IG1hc2sgZnJvbSBcIiF7cXVlcnl9XCIgdG8gXCIhQm9iXCJcblx0XHQvLyBpZiBxdWVyeSA9IFwiQm9iIEpvZSBGcmFua1wiLCB0aGVuIGNvbnZlcnQgbWFzayBcIntxfSBPUiB7cX1cIiB0byBcIkJvYiBPUiBKb2UgT1IgRnJhbmtcIlxuXHRcdHdoaWxlIChyZWdleC50ZXN0KHZhbCkpIHtcblx0XHRcdHZhbCA9IHZhbC5yZXBsYWNlKHJlZ2V4LCBxdWVyeVtpbmR4KytdIHx8ICcnKTtcblx0XHRcdGlmIChyZWdleC50ZXN0KHZhbCkgJiYgaW5keCA8IGxlbiAmJiAocXVlcnlbaW5keF0gfHwgJycpICE9PSAnJykge1xuXHRcdFx0XHR2YWwgPSBtYXNrLnJlcGxhY2UocmVnZXgsIHZhbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH0sXG5cdGdldExhdGVzdFNlYXJjaDogZnVuY3Rpb24oICRpbnB1dCApIHtcblx0XHRyZXR1cm4gJGlucHV0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0cmV0dXJuICQoYikuYXR0cignZGF0YS1sYXN0U2VhcmNoVGltZScpIC0gJChhKS5hdHRyKCdkYXRhLWxhc3RTZWFyY2hUaW1lJyk7XG5cdFx0fSk7XG5cdH0sXG5cdG11bHRpcGxlQ29sdW1uczogZnVuY3Rpb24oIGMsICRpbnB1dCApIHtcblx0XHQvLyBsb29rIGZvciBtdWx0aXBsZSBjb2x1bW5zIFwiMS0zLDQtNiw4XCIgaW4gZGF0YS1jb2x1bW5cblx0XHR2YXIgcmFuZ2VzLCBzaW5nbGVzLCBpbmR4LFxuXHRcdFx0d28gPSBjLndpZGdldE9wdGlvbnMsXG5cdFx0XHQvLyBvbmx5IHRhcmdldCBcImFsbFwiIGNvbHVtbiBpbnB1dHMgb24gaW5pdGlhbGl6YXRpb25cblx0XHRcdC8vICYgZG9uJ3QgdGFyZ2V0IFwiYWxsXCIgY29sdW1uIGlucHV0cyBpZiB0aGV5IGRvbid0IGV4aXN0XG5cdFx0XHR0YXJnZXRzID0gd28uZmlsdGVyX2luaXRpYWxpemVkIHx8ICEkaW5wdXQuZmlsdGVyKHdvLmZpbHRlcl9hbnlDb2x1bW5TZWxlY3RvcikubGVuZ3RoLFxuXHRcdFx0Y29sdW1ucyA9IFtdLFxuXHRcdFx0dmFsID0gJC50cmltKCB0cy5maWx0ZXIuZ2V0TGF0ZXN0U2VhcmNoKCAkaW5wdXQgKS5hdHRyKCdkYXRhLWNvbHVtbicpICk7XG5cdFx0Ly8gcHJvY2VzcyBjb2x1bW4gcmFuZ2Vcblx0XHRpZiAoIHRhcmdldHMgJiYgLy0vLnRlc3QoIHZhbCApICkge1xuXHRcdFx0cmFuZ2VzID0gdmFsLm1hdGNoKCAvKFxcZCspXFxzKi1cXHMqKFxcZCspL2cgKTtcblx0XHRcdCQuZWFjaChyYW5nZXMsIGZ1bmN0aW9uKGksdil7XG5cdFx0XHRcdHZhciB0LFxuXHRcdFx0XHRcdHJhbmdlID0gdi5zcGxpdCggL1xccyotXFxzKi8gKSxcblx0XHRcdFx0XHRzdGFydCA9IHBhcnNlSW50KCByYW5nZVswXSwgMTAgKSB8fCAwLFxuXHRcdFx0XHRcdGVuZCA9IHBhcnNlSW50KCByYW5nZVsxXSwgMTAgKSB8fCAoIGMuY29sdW1ucyAtIDEgKTtcblx0XHRcdFx0aWYgKCBzdGFydCA+IGVuZCApIHsgdCA9IHN0YXJ0OyBzdGFydCA9IGVuZDsgZW5kID0gdDsgfSAvLyBzd2FwXG5cdFx0XHRcdGlmICggZW5kID49IGMuY29sdW1ucyApIHsgZW5kID0gYy5jb2x1bW5zIC0gMTsgfVxuXHRcdFx0XHRmb3IgKCA7IHN0YXJ0IDw9IGVuZDsgc3RhcnQrKyApIHtcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2goc3RhcnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHJlbW92ZSBwcm9jZXNzZWQgcmFuZ2UgZnJvbSB2YWxcblx0XHRcdFx0dmFsID0gdmFsLnJlcGxhY2UoIHYsICcnICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gcHJvY2VzcyBzaW5nbGUgY29sdW1uc1xuXHRcdGlmICggdGFyZ2V0cyAmJiAvLC8udGVzdCggdmFsICkgKSB7XG5cdFx0XHRzaW5nbGVzID0gdmFsLnNwbGl0KCAvXFxzKixcXHMqLyApO1xuXHRcdFx0JC5lYWNoKCBzaW5nbGVzLCBmdW5jdGlvbihpLHYpIHtcblx0XHRcdFx0aWYgKHYgIT09ICcnKSB7XG5cdFx0XHRcdFx0aW5keCA9IHBhcnNlSW50KCB2LCAxMCApO1xuXHRcdFx0XHRcdGlmICggaW5keCA8IGMuY29sdW1ucyApIHtcblx0XHRcdFx0XHRcdGNvbHVtbnMucHVzaCggaW5keCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIHJldHVybiBhbGwgY29sdW1uc1xuXHRcdGlmICghY29sdW1ucy5sZW5ndGgpIHtcblx0XHRcdGZvciAoIGluZHggPSAwOyBpbmR4IDwgYy5jb2x1bW5zOyBpbmR4KysgKSB7XG5cdFx0XHRcdGNvbHVtbnMucHVzaCggaW5keCApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY29sdW1ucztcblx0fSxcblx0ZmluZFJvd3M6IGZ1bmN0aW9uKHRhYmxlLCBmaWx0ZXJzLCBjb21iaW5lZEZpbHRlcnMpIHtcblx0XHRpZiAodGFibGUuY29uZmlnLmxhc3RDb21iaW5lZEZpbHRlciA9PT0gY29tYmluZWRGaWx0ZXJzIHx8ICF0YWJsZS5jb25maWcud2lkZ2V0T3B0aW9ucy5maWx0ZXJfaW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG5cdFx0dmFyIGxlbiwgJHJvd3MsIHJvd0luZGV4LCB0Ym9keUluZGV4LCAkdGJvZHksICRjZWxscywgJGNlbGwsIGNvbHVtbkluZGV4LFxuXHRcdFx0Y2hpbGRSb3csIGxhc3RTZWFyY2gsIGhhc1NlbGVjdCwgbWF0Y2hlcywgcmVzdWx0LCBzaG93Um93LCB0aW1lLCB2YWwsIGluZHgsXG5cdFx0XHRub3RGaWx0ZXJlZCwgc2VhcmNoRmlsdGVyZWQsIGZpbHRlck1hdGNoZWQsIGV4Y2x1ZGVNYXRjaCwgZnhuLCBmZnhuLFxuXHRcdFx0cmVnZXggPSB0cy5maWx0ZXIucmVnZXgsXG5cdFx0XHRjID0gdGFibGUuY29uZmlnLFxuXHRcdFx0d28gPSBjLndpZGdldE9wdGlvbnMsXG5cdFx0XHQkdGJvZGllcyA9IGMuJHRhYmxlLmNoaWxkcmVuKCd0Ym9keScpLCAvLyB0YXJnZXQgYWxsIHRib2RpZXMgIzU2OFxuXHRcdFx0Ly8gZGF0YSBvYmplY3QgcGFzc2VkIHRvIGZpbHRlcnM7IGFueU1hdGNoIGlzIGEgZmxhZyBmb3IgdGhlIGZpbHRlcnNcblx0XHRcdGRhdGEgPSB7IGFueU1hdGNoOiBmYWxzZSB9LFxuXHRcdFx0Ly8gYW55TWF0Y2ggcmVhbGx5IHNjcmV3cyB1cCB3aXRoIHRoZXNlIHR5cGVzIG9mIGZpbHRlcnNcblx0XHRcdG5vQW55TWF0Y2ggPSBbICdyYW5nZScsICdub3RNYXRjaCcsICAnb3BlcmF0b3JzJyBdO1xuXG5cdFx0Ly8gcGFyc2UgY29sdW1ucyBhZnRlciBmb3JtYXR0ZXIsIGluIGNhc2UgdGhlIGNsYXNzIGlzIGFkZGVkIGF0IHRoYXQgcG9pbnRcblx0XHRkYXRhLnBhcnNlZCA9IGMuJGhlYWRlcnMubWFwKGZ1bmN0aW9uKGNvbHVtbkluZGV4KSB7XG5cdFx0XHRyZXR1cm4gYy5wYXJzZXJzICYmIGMucGFyc2Vyc1tjb2x1bW5JbmRleF0gJiYgYy5wYXJzZXJzW2NvbHVtbkluZGV4XS5wYXJzZWQgfHxcblx0XHRcdFx0Ly8gZ2V0RGF0YSB3b24ndCByZXR1cm4gXCJwYXJzZWRcIiBpZiBvdGhlciBcImZpbHRlci1cIiBjbGFzcyBuYW1lcyBleGlzdCAoZS5nLiA8dGggY2xhc3M9XCJmaWx0ZXItc2VsZWN0IGZpbHRlci1wYXJzZWRcIj4pXG5cdFx0XHRcdHRzLmdldERhdGEgJiYgdHMuZ2V0RGF0YShjLiRoZWFkZXJzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJyArIGNvbHVtbkluZGV4ICsgJ1wiXTpsYXN0JyksIHRzLmdldENvbHVtbkRhdGEoIHRhYmxlLCBjLmhlYWRlcnMsIGNvbHVtbkluZGV4ICksICdmaWx0ZXInKSA9PT0gJ3BhcnNlZCcgfHxcblx0XHRcdFx0JCh0aGlzKS5oYXNDbGFzcygnZmlsdGVyLXBhcnNlZCcpO1xuXHRcdH0pLmdldCgpO1xuXG5cdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdHRzLmxvZygnU3RhcnRpbmcgZmlsdGVyIHdpZGdldCBzZWFyY2gnLCBmaWx0ZXJzKTtcblx0XHRcdHRpbWUgPSBuZXcgRGF0ZSgpO1xuXHRcdH1cblx0XHQvLyBmaWx0ZXJlZCByb3dzIGNvdW50XG5cdFx0Yy5maWx0ZXJlZFJvd3MgPSAwO1xuXHRcdGMudG90YWxSb3dzID0gMDtcblx0XHQvLyBjb21iaW5kZWRGaWx0ZXJzIGFyZSB1bmRlZmluZWQgb24gaW5pdFxuXHRcdGNvbWJpbmVkRmlsdGVycyA9IChmaWx0ZXJzIHx8IFtdKS5qb2luKCcnKTtcblxuXHRcdGZvciAodGJvZHlJbmRleCA9IDA7IHRib2R5SW5kZXggPCAkdGJvZGllcy5sZW5ndGg7IHRib2R5SW5kZXgrKyApIHtcblx0XHRcdGlmICgkdGJvZGllcy5lcSh0Ym9keUluZGV4KS5oYXNDbGFzcyhjLmNzc0luZm9CbG9jayB8fCB0cy5jc3MuaW5mbykpIHsgY29udGludWU7IH0gLy8gaWdub3JlIGluZm8gYmxvY2tzLCBpc3N1ZSAjMjY0XG5cdFx0XHQkdGJvZHkgPSB0cy5wcm9jZXNzVGJvZHkodGFibGUsICR0Ym9kaWVzLmVxKHRib2R5SW5kZXgpLCB0cnVlKTtcblx0XHRcdC8vIHNraXAgY2hpbGQgcm93cyAmIHdpZGdldCBhZGRlZCAocmVtb3ZhYmxlKSByb3dzIC0gZml4ZXMgIzQ0OCB0aGFua3MgdG8gQGhlbXBlbCFcblx0XHRcdC8vICRyb3dzID0gJHRib2R5LmNoaWxkcmVuKCd0cicpLm5vdChjLnNlbGVjdG9yUmVtb3ZlKTtcblx0XHRcdGNvbHVtbkluZGV4ID0gYy5jb2x1bW5zO1xuXHRcdFx0Ly8gY29udmVydCBzdG9yZWQgcm93cyBpbnRvIGEgalF1ZXJ5IG9iamVjdFxuXHRcdFx0JHJvd3MgPSAkKCAkLm1hcChjLmNhY2hlW3Rib2R5SW5kZXhdLm5vcm1hbGl6ZWQsIGZ1bmN0aW9uKGVsKXsgcmV0dXJuIGVsW2NvbHVtbkluZGV4XS4kcm93LmdldCgpOyB9KSApO1xuXG5cdFx0XHRpZiAoY29tYmluZWRGaWx0ZXJzID09PSAnJyB8fCB3by5maWx0ZXJfc2VydmVyc2lkZUZpbHRlcmluZykge1xuXHRcdFx0XHQkcm93cy5yZW1vdmVDbGFzcyh3by5maWx0ZXJfZmlsdGVyZWRSb3cpLm5vdCgnLicgKyBjLmNzc0NoaWxkUm93KS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBmaWx0ZXIgb3V0IGNoaWxkIHJvd3Ncblx0XHRcdFx0JHJvd3MgPSAkcm93cy5ub3QoJy4nICsgYy5jc3NDaGlsZFJvdyk7XG5cdFx0XHRcdGxlbiA9ICRyb3dzLmxlbmd0aDtcblx0XHRcdFx0Ly8gb3B0aW1pemUgc2VhcmNoaW5nIG9ubHkgdGhyb3VnaCBhbHJlYWR5IGZpbHRlcmVkIHJvd3MgLSBzZWUgIzMxM1xuXHRcdFx0XHRzZWFyY2hGaWx0ZXJlZCA9IHdvLmZpbHRlcl9zZWFyY2hGaWx0ZXJlZDtcblx0XHRcdFx0bGFzdFNlYXJjaCA9IGMubGFzdFNlYXJjaCB8fCBjLiR0YWJsZS5kYXRhKCdsYXN0U2VhcmNoJykgfHwgW107XG5cdFx0XHRcdGlmIChzZWFyY2hGaWx0ZXJlZCkge1xuXHRcdFx0XHRcdC8vIGN5Y2xlIHRocm91Z2ggYWxsIGZpbHRlcnM7IGluY2x1ZGUgbGFzdCAoY29sdW1uSW5kZXggKyAxID0gbWF0Y2ggYW55IGNvbHVtbikuIEZpeGVzICM2Njlcblx0XHRcdFx0XHRmb3IgKGluZHggPSAwOyBpbmR4IDwgY29sdW1uSW5kZXggKyAxOyBpbmR4KyspIHtcblx0XHRcdFx0XHRcdHZhbCA9IGZpbHRlcnNbaW5keF0gfHwgJyc7XG5cdFx0XHRcdFx0XHQvLyBicmVhayBvdXQgb2YgbG9vcCBpZiB3ZSd2ZSBhbHJlYWR5IGRldGVybWluZWQgbm90IHRvIHNlYXJjaCBmaWx0ZXJlZCByb3dzXG5cdFx0XHRcdFx0XHRpZiAoIXNlYXJjaEZpbHRlcmVkKSB7IGluZHggPSBjb2x1bW5JbmRleDsgfVxuXHRcdFx0XHRcdFx0Ly8gc2VhcmNoIGFscmVhZHkgZmlsdGVyZWQgcm93cyBpZi4uLlxuXHRcdFx0XHRcdFx0c2VhcmNoRmlsdGVyZWQgPSBzZWFyY2hGaWx0ZXJlZCAmJiBsYXN0U2VhcmNoLmxlbmd0aCAmJlxuXHRcdFx0XHRcdFx0XHQvLyB0aGVyZSBhcmUgbm8gY2hhbmdlcyBmcm9tIGJlZ2lubmluZyBvZiBmaWx0ZXJcblx0XHRcdFx0XHRcdFx0dmFsLmluZGV4T2YobGFzdFNlYXJjaFtpbmR4XSB8fCAnJykgPT09IDAgJiZcblx0XHRcdFx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgTk9UIGEgbG9naWNhbCBcIm9yXCIsIG9yIHJhbmdlIChcInRvXCIgb3IgXCItXCIpIGluIHRoZSBzdHJpbmdcblx0XHRcdFx0XHRcdFx0IXJlZ2V4LmFscmVhZHlGaWx0ZXJlZC50ZXN0KHZhbCkgJiZcblx0XHRcdFx0XHRcdFx0Ly8gaWYgd2UgYXJlIG5vdCBkb2luZyBleGFjdCBtYXRjaGVzLCB1c2luZyBcInxcIiAobG9naWNhbCBvcikgb3Igbm90IFwiIVwiXG5cdFx0XHRcdFx0XHRcdCEvWz1cXFwiXFx8IV0vLnRlc3QodmFsKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBkb24ndCBzZWFyY2ggb25seSBmaWx0ZXJlZCBpZiB0aGUgdmFsdWUgaXMgbmVnYXRpdmUgKCc+IC0xMCcgPT4gJz4gLTEwMCcgd2lsbCBpZ25vcmUgaGlkZGVuIHJvd3MpXG5cdFx0XHRcdFx0XHRcdCEoLyg+PT9cXHMqLVxcZCkvLnRlc3QodmFsKSB8fCAvKDw9P1xccypcXGQpLy50ZXN0KHZhbCkpICYmXG5cdFx0XHRcdFx0XHRcdC8vIGlmIGZpbHRlcmluZyB1c2luZyBhIHNlbGVjdCB3aXRob3V0IGEgXCJmaWx0ZXItbWF0Y2hcIiBjbGFzcyAoZXhhY3QgbWF0Y2gpIC0gZml4ZXMgIzU5M1xuXHRcdFx0XHRcdFx0XHQhKCB2YWwgIT09ICcnICYmIGMuJGZpbHRlcnMgJiYgYy4kZmlsdGVycy5lcShpbmR4KS5maW5kKCdzZWxlY3QnKS5sZW5ndGggJiYgIWMuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgaW5keCArICdcIl06bGFzdCcpLmhhc0NsYXNzKCdmaWx0ZXItbWF0Y2gnKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRub3RGaWx0ZXJlZCA9ICRyb3dzLm5vdCgnLicgKyB3by5maWx0ZXJfZmlsdGVyZWRSb3cpLmxlbmd0aDtcblx0XHRcdFx0Ly8gY2FuJ3Qgc2VhcmNoIHdoZW4gYWxsIHJvd3MgYXJlIGhpZGRlbiAtIHRoaXMgaGFwcGVucyB3aGVuIGxvb2tpbmcgZm9yIGV4YWN0IG1hdGNoZXNcblx0XHRcdFx0aWYgKHNlYXJjaEZpbHRlcmVkICYmIG5vdEZpbHRlcmVkID09PSAwKSB7IHNlYXJjaEZpbHRlcmVkID0gZmFsc2U7IH1cblx0XHRcdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdFx0XHR0cy5sb2coIFwiU2VhcmNoaW5nIHRocm91Z2ggXCIgKyAoIHNlYXJjaEZpbHRlcmVkICYmIG5vdEZpbHRlcmVkIDwgbGVuID8gbm90RmlsdGVyZWQgOiBcImFsbFwiICkgKyBcIiByb3dzXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoKHdvLmZpbHRlcl8kYW55TWF0Y2ggJiYgd28uZmlsdGVyXyRhbnlNYXRjaC5sZW5ndGgpIHx8IGZpbHRlcnNbYy5jb2x1bW5zXSkge1xuXHRcdFx0XHRcdGRhdGEuYW55TWF0Y2hGbGFnID0gdHJ1ZTtcblx0XHRcdFx0XHRkYXRhLmFueU1hdGNoRmlsdGVyID0gd28uZmlsdGVyXyRhbnlNYXRjaCAmJiB0cy5maWx0ZXIuZ2V0TGF0ZXN0U2VhcmNoKCB3by5maWx0ZXJfJGFueU1hdGNoICkudmFsKCkgfHwgZmlsdGVyc1tjLmNvbHVtbnNdIHx8ICcnO1xuXHRcdFx0XHRcdGlmIChjLnNvcnRMb2NhbGVDb21wYXJlKSB7XG5cdFx0XHRcdFx0XHQvLyByZXBsYWNlIGFjY2VudHNcblx0XHRcdFx0XHRcdGRhdGEuYW55TWF0Y2hGaWx0ZXIgPSB0cy5yZXBsYWNlQWNjZW50cyhkYXRhLmFueU1hdGNoRmlsdGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHdvLmZpbHRlcl9kZWZhdWx0RmlsdGVyICYmIHJlZ2V4LmlRdWVyeS50ZXN0KCB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgd28uZmlsdGVyX2RlZmF1bHRGaWx0ZXIsIGMuY29sdW1ucywgdHJ1ZSApIHx8ICcnKSkge1xuXHRcdFx0XHRcdFx0ZGF0YS5hbnlNYXRjaEZpbHRlciA9IHRzLmZpbHRlci5kZWZhdWx0RmlsdGVyKCBkYXRhLmFueU1hdGNoRmlsdGVyLCB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgd28uZmlsdGVyX2RlZmF1bHRGaWx0ZXIsIGMuY29sdW1ucywgdHJ1ZSApICk7XG5cdFx0XHRcdFx0XHQvLyBjbGVhciBzZWFyY2ggZmlsdGVyZWQgZmxhZyBiZWNhdXNlIGRlZmF1bHQgZmlsdGVycyBhcmUgbm90IHNhdmVkIHRvIHRoZSBsYXN0IHNlYXJjaFxuXHRcdFx0XHRcdFx0c2VhcmNoRmlsdGVyZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gbWFrZSBpQW55TWF0Y2hGaWx0ZXIgbG93ZXJjYXNlIHVubGVzcyBib3RoIGZpbHRlciB3aWRnZXQgJiBjb3JlIGlnbm9yZUNhc2Ugb3B0aW9ucyBhcmUgdHJ1ZVxuXHRcdFx0XHRcdC8vIHdoZW4gYy5pZ25vcmVDYXNlIGlzIHRydWUsIHRoZSBjYWNoZSBjb250YWlucyBhbGwgbG93ZXIgY2FzZSBkYXRhXG5cdFx0XHRcdFx0ZGF0YS5pQW55TWF0Y2hGaWx0ZXIgPSAhKHdvLmZpbHRlcl9pZ25vcmVDYXNlICYmIGMuaWdub3JlQ2FzZSkgPyBkYXRhLmFueU1hdGNoRmlsdGVyIDogZGF0YS5hbnlNYXRjaEZpbHRlci50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbG9vcCB0aHJvdWdoIHRoZSByb3dzXG5cdFx0XHRcdGZvciAocm93SW5kZXggPSAwOyByb3dJbmRleCA8IGxlbjsgcm93SW5kZXgrKykge1xuXG5cdFx0XHRcdFx0ZGF0YS5jYWNoZUFycmF5ID0gYy5jYWNoZVt0Ym9keUluZGV4XS5ub3JtYWxpemVkW3Jvd0luZGV4XTtcblxuXHRcdFx0XHRcdGNoaWxkUm93ID0gJHJvd3Nbcm93SW5kZXhdLmNsYXNzTmFtZTtcblx0XHRcdFx0XHQvLyBza2lwIGNoaWxkIHJvd3MgJiBhbHJlYWR5IGZpbHRlcmVkIHJvd3Ncblx0XHRcdFx0XHRpZiAoIHJlZ2V4LmNoaWxkLnRlc3QoY2hpbGRSb3cpIHx8IChzZWFyY2hGaWx0ZXJlZCAmJiByZWdleC5maWx0ZXJlZC50ZXN0KGNoaWxkUm93KSkgKSB7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0c2hvd1JvdyA9IHRydWU7XG5cdFx0XHRcdFx0Ly8gKioqIG5leHRBbGwvbmV4dFVudGlsIG5vdCBzdXBwb3J0ZWQgYnkgWmVwdG8hICoqKlxuXHRcdFx0XHRcdGNoaWxkUm93ID0gJHJvd3MuZXEocm93SW5kZXgpLm5leHRVbnRpbCgndHI6bm90KC4nICsgYy5jc3NDaGlsZFJvdyArICcpJyk7XG5cdFx0XHRcdFx0Ly8gc28sIGlmIFwidGFibGUuY29uZmlnLndpZGdldE9wdGlvbnMuZmlsdGVyX2NoaWxkUm93c1wiIGlzIHRydWUgYW5kIHRoZXJlIGlzXG5cdFx0XHRcdFx0Ly8gYSBtYXRjaCBhbnl3aGVyZSBpbiB0aGUgY2hpbGQgcm93LCB0aGVuIGl0IHdpbGwgbWFrZSB0aGUgcm93IHZpc2libGVcblx0XHRcdFx0XHQvLyBjaGVja2VkIGhlcmUgc28gdGhlIG9wdGlvbiBjYW4gYmUgY2hhbmdlZCBkeW5hbWljYWxseVxuXHRcdFx0XHRcdGRhdGEuY2hpbGRSb3dUZXh0ID0gKGNoaWxkUm93Lmxlbmd0aCAmJiB3by5maWx0ZXJfY2hpbGRSb3dzKSA/IGNoaWxkUm93LnRleHQoKSA6ICcnO1xuXHRcdFx0XHRcdGRhdGEuY2hpbGRSb3dUZXh0ID0gd28uZmlsdGVyX2lnbm9yZUNhc2UgPyBkYXRhLmNoaWxkUm93VGV4dC50b0xvY2FsZUxvd2VyQ2FzZSgpIDogZGF0YS5jaGlsZFJvd1RleHQ7XG5cdFx0XHRcdFx0JGNlbGxzID0gJHJvd3MuZXEocm93SW5kZXgpLmNoaWxkcmVuKCk7XG5cdFx0XHRcdFx0aWYgKGRhdGEuYW55TWF0Y2hGbGFnKSB7XG5cdFx0XHRcdFx0XHQvLyBsb29rIGZvciBtdWx0aXBsZSBjb2x1bW5zIFwiMS0zLDQtNiw4XCJcblx0XHRcdFx0XHRcdGNvbHVtbkluZGV4ID0gdHMuZmlsdGVyLm11bHRpcGxlQ29sdW1ucyggYywgd28uZmlsdGVyXyRhbnlNYXRjaCApO1xuXHRcdFx0XHRcdFx0ZGF0YS5hbnlNYXRjaCA9IHRydWU7XG5cdFx0XHRcdFx0XHRkYXRhLnJvd0FycmF5ID0gJGNlbGxzLm1hcChmdW5jdGlvbihpKXtcblx0XHRcdFx0XHRcdFx0aWYgKCAkLmluQXJyYXkoaSwgY29sdW1uSW5kZXgpID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHR4dDtcblx0XHRcdFx0XHRcdFx0XHRpZiAoZGF0YS5wYXJzZWRbaV0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdHR4dCA9IGRhdGEuY2FjaGVBcnJheVtpXTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHh0ID0gd28uZmlsdGVyX2lnbm9yZUNhc2UgPyAkKHRoaXMpLnRleHQoKS50b0xvd2VyQ2FzZSgpIDogJCh0aGlzKS50ZXh0KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoYy5zb3J0TG9jYWxlQ29tcGFyZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0eHQgPSB0cy5yZXBsYWNlQWNjZW50cyh0eHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHh0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KS5nZXQoKTtcblx0XHRcdFx0XHRcdGRhdGEuZmlsdGVyID0gZGF0YS5hbnlNYXRjaEZpbHRlcjtcblx0XHRcdFx0XHRcdGRhdGEuaUZpbHRlciA9IGRhdGEuaUFueU1hdGNoRmlsdGVyO1xuXHRcdFx0XHRcdFx0ZGF0YS5leGFjdCA9IGRhdGEucm93QXJyYXkuam9pbignICcpO1xuXHRcdFx0XHRcdFx0ZGF0YS5pRXhhY3QgPSB3by5maWx0ZXJfaWdub3JlQ2FzZSA/IGRhdGEuZXhhY3QudG9Mb3dlckNhc2UoKSA6IGRhdGEuZXhhY3Q7XG5cdFx0XHRcdFx0XHRkYXRhLmNhY2hlID0gZGF0YS5jYWNoZUFycmF5LnNsaWNlKDAsLTEpLmpvaW4oJyAnKTtcblx0XHRcdFx0XHRcdGZpbHRlck1hdGNoZWQgPSBudWxsO1xuXHRcdFx0XHRcdFx0JC5lYWNoKHRzLmZpbHRlci50eXBlcywgZnVuY3Rpb24odHlwZSwgdHlwZUZ1bmN0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdGlmICgkLmluQXJyYXkodHlwZSwgbm9BbnlNYXRjaCkgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWF0Y2hlcyA9IHR5cGVGdW5jdGlvbiggYywgZGF0YSApO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJNYXRjaGVkID0gbWF0Y2hlcztcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0aWYgKGZpbHRlck1hdGNoZWQgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0c2hvd1JvdyA9IGZpbHRlck1hdGNoZWQ7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAod28uZmlsdGVyX3N0YXJ0c1dpdGgpIHtcblx0XHRcdFx0XHRcdFx0XHRzaG93Um93ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uSW5kZXggPSBjLmNvbHVtbnM7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCFzaG93Um93ICYmIGNvbHVtbkluZGV4ID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29sdW1uSW5kZXgtLTtcblx0XHRcdFx0XHRcdFx0XHRcdHNob3dSb3cgPSBzaG93Um93IHx8IGRhdGEucm93QXJyYXlbY29sdW1uSW5kZXhdLmluZGV4T2YoZGF0YS5pRmlsdGVyKSA9PT0gMDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0c2hvd1JvdyA9IChkYXRhLmlFeGFjdCArIGRhdGEuY2hpbGRSb3dUZXh0KS5pbmRleE9mKGRhdGEuaUZpbHRlcikgPj0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGF0YS5hbnlNYXRjaCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoY29sdW1uSW5kZXggPSAwOyBjb2x1bW5JbmRleCA8IGMuY29sdW1uczsgY29sdW1uSW5kZXgrKykge1xuXHRcdFx0XHRcdFx0ZGF0YS5maWx0ZXIgPSBmaWx0ZXJzW2NvbHVtbkluZGV4XTtcblx0XHRcdFx0XHRcdGRhdGEuaW5kZXggPSBjb2x1bW5JbmRleDtcblxuXHRcdFx0XHRcdFx0Ly8gZmlsdGVyIHR5cGVzIHRvIGV4Y2x1ZGUsIHBlciBjb2x1bW5cblx0XHRcdFx0XHRcdGV4Y2x1ZGVNYXRjaCA9ICggdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIHdvLmZpbHRlcl9leGNsdWRlRmlsdGVyLCBjb2x1bW5JbmRleCwgdHJ1ZSApIHx8ICcnICkuc3BsaXQoL1xccysvKTtcblxuXHRcdFx0XHRcdFx0Ly8gaWdub3JlIGlmIGZpbHRlciBpcyBlbXB0eSBvciBkaXNhYmxlZFxuXHRcdFx0XHRcdFx0aWYgKGRhdGEuZmlsdGVyKSB7XG5cdFx0XHRcdFx0XHRcdGRhdGEuY2FjaGUgPSBkYXRhLmNhY2hlQXJyYXlbY29sdW1uSW5kZXhdO1xuXHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBjb2x1bW4gZGF0YSBzaG91bGQgYmUgZnJvbSB0aGUgY2VsbCBvciBmcm9tIHBhcnNlZCBkYXRhXG5cdFx0XHRcdFx0XHRcdGlmICh3by5maWx0ZXJfdXNlUGFyc2VkRGF0YSB8fCBkYXRhLnBhcnNlZFtjb2x1bW5JbmRleF0pIHtcblx0XHRcdFx0XHRcdFx0XHRkYXRhLmV4YWN0ID0gZGF0YS5jYWNoZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gdXNpbmcgb2xkZXIgb3Igb3JpZ2luYWwgdGFibGVzb3J0ZXJcblx0XHRcdFx0XHRcdFx0XHRkYXRhLmV4YWN0ID0gJC50cmltKCAkY2VsbHMuZXEoY29sdW1uSW5kZXgpLnRleHQoKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGEuZXhhY3QgPSBjLnNvcnRMb2NhbGVDb21wYXJlID8gdHMucmVwbGFjZUFjY2VudHMoZGF0YS5leGFjdCkgOiBkYXRhLmV4YWN0OyAvLyBpc3N1ZSAjNDA1XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZGF0YS5pRXhhY3QgPSAhcmVnZXgudHlwZS50ZXN0KHR5cGVvZiBkYXRhLmV4YWN0KSAmJiB3by5maWx0ZXJfaWdub3JlQ2FzZSA/IGRhdGEuZXhhY3QudG9Mb2NhbGVMb3dlckNhc2UoKSA6IGRhdGEuZXhhY3Q7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdCA9IHNob3dSb3c7IC8vIGlmIHNob3dSb3cgaXMgdHJ1ZSwgc2hvdyB0aGF0IHJvd1xuXG5cdFx0XHRcdFx0XHRcdC8vIGluIGNhc2Ugc2VsZWN0IGZpbHRlciBvcHRpb24gaGFzIGEgZGlmZmVyZW50IHZhbHVlIHZzIHRleHQgXCJhIC0genxBIHRocm91Z2ggWlwiXG5cdFx0XHRcdFx0XHRcdGZmeG4gPSB3by5maWx0ZXJfY29sdW1uRmlsdGVycyA/XG5cdFx0XHRcdFx0XHRcdFx0Yy4kZmlsdGVycy5hZGQoYy4kZXh0ZXJuYWxGaWx0ZXJzKS5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicrIGNvbHVtbkluZGV4ICsgJ1wiXScpLmZpbmQoJ3NlbGVjdCBvcHRpb246c2VsZWN0ZWQnKS5hdHRyKCdkYXRhLWZ1bmN0aW9uLW5hbWUnKSB8fCAnJyA6ICcnO1xuXG5cdFx0XHRcdFx0XHRcdC8vIHJlcGxhY2UgYWNjZW50cyAtIHNlZSAjMzU3XG5cdFx0XHRcdFx0XHRcdGRhdGEuZmlsdGVyID0gYy5zb3J0TG9jYWxlQ29tcGFyZSA/IHRzLnJlcGxhY2VBY2NlbnRzKGRhdGEuZmlsdGVyKSA6IGRhdGEuZmlsdGVyO1xuXG5cdFx0XHRcdFx0XHRcdHZhbCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGlmICh3by5maWx0ZXJfZGVmYXVsdEZpbHRlciAmJiByZWdleC5pUXVlcnkudGVzdCggdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIHdvLmZpbHRlcl9kZWZhdWx0RmlsdGVyLCBjb2x1bW5JbmRleCApIHx8ICcnKSkge1xuXHRcdFx0XHRcdFx0XHRcdGRhdGEuZmlsdGVyID0gdHMuZmlsdGVyLmRlZmF1bHRGaWx0ZXIoIGRhdGEuZmlsdGVyLCB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgd28uZmlsdGVyX2RlZmF1bHRGaWx0ZXIsIGNvbHVtbkluZGV4ICkgKTtcblx0XHRcdFx0XHRcdFx0XHQvLyB2YWwgaXMgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IGEgZmlsdGVyIHNlbGVjdCBpcyB1c2luZyBhIGRlZmF1bHQgZmlsdGVyOyBzbyB3ZSBvdmVycmlkZSB0aGUgZXhhY3QgJiBwYXJ0aWFsIG1hdGNoZXNcblx0XHRcdFx0XHRcdFx0XHR2YWwgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQvLyBkYXRhLmlGaWx0ZXIgPSBjYXNlIGluc2Vuc2l0aXZlIChpZiB3by5maWx0ZXJfaWdub3JlQ2FzZSBpcyB0cnVlKSwgZGF0YS5maWx0ZXIgPSBjYXNlIHNlbnNpdGl2ZVxuXHRcdFx0XHRcdFx0XHRkYXRhLmlGaWx0ZXIgPSB3by5maWx0ZXJfaWdub3JlQ2FzZSA/IChkYXRhLmZpbHRlciB8fCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKSA6IGRhdGEuZmlsdGVyO1xuXHRcdFx0XHRcdFx0XHRmeG4gPSB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgd28uZmlsdGVyX2Z1bmN0aW9ucywgY29sdW1uSW5kZXggKTtcblx0XHRcdFx0XHRcdFx0JGNlbGwgPSBjLiRoZWFkZXJzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJyArIGNvbHVtbkluZGV4ICsgJ1wiXTpsYXN0Jyk7XG5cdFx0XHRcdFx0XHRcdGhhc1NlbGVjdCA9ICRjZWxsLmhhc0NsYXNzKCdmaWx0ZXItc2VsZWN0Jyk7XG5cdFx0XHRcdFx0XHRcdGlmICggZnhuIHx8ICggaGFzU2VsZWN0ICYmIHZhbCApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChmeG4gPT09IHRydWUgfHwgaGFzU2VsZWN0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkZWZhdWx0IHNlbGVjdG9yIHVzZXMgZXhhY3QgbWF0Y2ggdW5sZXNzIFwiZmlsdGVyLW1hdGNoXCIgY2xhc3MgaXMgZm91bmRcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9ICgkY2VsbC5oYXNDbGFzcygnZmlsdGVyLW1hdGNoJykpID8gZGF0YS5pRXhhY3Quc2VhcmNoKGRhdGEuaUZpbHRlcikgPj0gMCA6IGRhdGEuZmlsdGVyID09PSBkYXRhLmV4YWN0O1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGZ4biA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsdGVyIGNhbGxiYWNrKCBleGFjdCBjZWxsIGNvbnRlbnQsIHBhcnNlciBub3JtYWxpemVkIGNvbnRlbnQsIGZpbHRlciBpbnB1dCB2YWx1ZSwgY29sdW1uIGluZGV4LCBqUXVlcnkgcm93IG9iamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSBmeG4oZGF0YS5leGFjdCwgZGF0YS5jYWNoZSwgZGF0YS5maWx0ZXIsIGNvbHVtbkluZGV4LCAkcm93cy5lcShyb3dJbmRleCkpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGZ4bltmZnhuIHx8IGRhdGEuZmlsdGVyXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gc2VsZWN0b3Igb3B0aW9uIGZ1bmN0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSBmeG5bZmZ4biB8fCBkYXRhLmZpbHRlcl0oZGF0YS5leGFjdCwgZGF0YS5jYWNoZSwgZGF0YS5maWx0ZXIsIGNvbHVtbkluZGV4LCAkcm93cy5lcShyb3dJbmRleCkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJNYXRjaGVkID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHQvLyBjeWNsZSB0aHJvdWdoIHRoZSBkaWZmZXJlbnQgZmlsdGVyc1xuXHRcdFx0XHRcdFx0XHRcdC8vIGZpbHRlcnMgcmV0dXJuIGEgYm9vbGVhbiBvciBudWxsIGlmIG5vdGhpbmcgbWF0Y2hlc1xuXHRcdFx0XHRcdFx0XHRcdCQuZWFjaCh0cy5maWx0ZXIudHlwZXMsIGZ1bmN0aW9uKHR5cGUsIHR5cGVGdW5jdGlvbikge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCQuaW5BcnJheSh0eXBlLCBleGNsdWRlTWF0Y2gpIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRtYXRjaGVzID0gdHlwZUZ1bmN0aW9uKCBjLCBkYXRhICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChtYXRjaGVzICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZmlsdGVyTWF0Y2hlZCA9IG1hdGNoZXM7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGZpbHRlck1hdGNoZWQgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9IGZpbHRlck1hdGNoZWQ7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTG9vayBmb3IgbWF0Y2gsIGFuZCBhZGQgY2hpbGQgcm93IGRhdGEgZm9yIG1hdGNoaW5nXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGEuZXhhY3QgPSAoZGF0YS5pRXhhY3QgKyBkYXRhLmNoaWxkUm93VGV4dCkuaW5kZXhPZiggdHMuZmlsdGVyLnBhcnNlRmlsdGVyKGMsIGRhdGEuaUZpbHRlciwgY29sdW1uSW5kZXgsIGRhdGEucGFyc2VkW2NvbHVtbkluZGV4XSkgKTtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdCA9ICggKCF3by5maWx0ZXJfc3RhcnRzV2l0aCAmJiBkYXRhLmV4YWN0ID49IDApIHx8ICh3by5maWx0ZXJfc3RhcnRzV2l0aCAmJiBkYXRhLmV4YWN0ID09PSAwKSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRzaG93Um93ID0gKHJlc3VsdCkgPyBzaG93Um93IDogZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCRyb3dzLmVxKHJvd0luZGV4KVxuXHRcdFx0XHRcdFx0LnRvZ2dsZShzaG93Um93KVxuXHRcdFx0XHRcdFx0LnRvZ2dsZUNsYXNzKHdvLmZpbHRlcl9maWx0ZXJlZFJvdywgIXNob3dSb3cpO1xuXHRcdFx0XHRcdGlmIChjaGlsZFJvdy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdGNoaWxkUm93LnRvZ2dsZUNsYXNzKHdvLmZpbHRlcl9maWx0ZXJlZFJvdywgIXNob3dSb3cpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Yy5maWx0ZXJlZFJvd3MgKz0gJHJvd3Mubm90KCcuJyArIHdvLmZpbHRlcl9maWx0ZXJlZFJvdykubGVuZ3RoO1xuXHRcdFx0Yy50b3RhbFJvd3MgKz0gJHJvd3MubGVuZ3RoO1xuXHRcdFx0dHMucHJvY2Vzc1Rib2R5KHRhYmxlLCAkdGJvZHksIGZhbHNlKTtcblx0XHR9XG5cdFx0Yy5sYXN0Q29tYmluZWRGaWx0ZXIgPSBjb21iaW5lZEZpbHRlcnM7IC8vIHNhdmUgbGFzdCBzZWFyY2hcblx0XHRjLmxhc3RTZWFyY2ggPSBmaWx0ZXJzO1xuXHRcdGMuJHRhYmxlLmRhdGEoJ2xhc3RTZWFyY2gnLCBmaWx0ZXJzKTtcblx0XHRpZiAod28uZmlsdGVyX3NhdmVGaWx0ZXJzICYmIHRzLnN0b3JhZ2UpIHtcblx0XHRcdHRzLnN0b3JhZ2UoIHRhYmxlLCAndGFibGVzb3J0ZXItZmlsdGVycycsIGZpbHRlcnMgKTtcblx0XHR9XG5cdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdHRzLmJlbmNobWFyayhcIkNvbXBsZXRlZCBmaWx0ZXIgd2lkZ2V0IHNlYXJjaFwiLCB0aW1lKTtcblx0XHR9XG5cdFx0aWYgKHdvLmZpbHRlcl9pbml0aWFsaXplZCkgeyBjLiR0YWJsZS50cmlnZ2VyKCdmaWx0ZXJFbmQnLCBjICk7IH1cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRjLiR0YWJsZS50cmlnZ2VyKCdhcHBseVdpZGdldHMnKTsgLy8gbWFrZSBzdXJlIHplYnJhIHdpZGdldCBpcyBhcHBsaWVkXG5cdFx0fSwgMCk7XG5cdH0sXG5cdGdldE9wdGlvblNvdXJjZTogZnVuY3Rpb24odGFibGUsIGNvbHVtbiwgb25seUF2YWlsKSB7XG5cdFx0dmFyIGN0cyxcblx0XHRcdGMgPSB0YWJsZS5jb25maWcsXG5cdFx0XHR3byA9IGMud2lkZ2V0T3B0aW9ucyxcblx0XHRcdHBhcnNlZCA9IFtdLFxuXHRcdFx0YXJyeSA9IGZhbHNlLFxuXHRcdFx0c291cmNlID0gd28uZmlsdGVyX3NlbGVjdFNvdXJjZSxcblx0XHRcdGxhc3QgPSBjLiR0YWJsZS5kYXRhKCdsYXN0U2VhcmNoJykgfHwgW10sXG5cdFx0XHRmeG4gPSAkLmlzRnVuY3Rpb24oc291cmNlKSA/IHRydWUgOiB0cy5nZXRDb2x1bW5EYXRhKCB0YWJsZSwgc291cmNlLCBjb2x1bW4gKTtcblxuXHRcdGlmIChvbmx5QXZhaWwgJiYgbGFzdFtjb2x1bW5dICE9PSAnJykge1xuXHRcdFx0b25seUF2YWlsID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gZmlsdGVyIHNlbGVjdCBzb3VyY2Ugb3B0aW9uXG5cdFx0aWYgKGZ4biA9PT0gdHJ1ZSkge1xuXHRcdFx0Ly8gT1ZFUkFMTCBzb3VyY2Vcblx0XHRcdGFycnkgPSBzb3VyY2UodGFibGUsIGNvbHVtbiwgb25seUF2YWlsKTtcblx0XHR9IGVsc2UgaWYgKCBmeG4gaW5zdGFuY2VvZiAkIHx8ICgkLnR5cGUoZnhuKSA9PT0gJ3N0cmluZycgJiYgZnhuLmluZGV4T2YoJzwvb3B0aW9uPicpID49IDApICkge1xuXHRcdFx0Ly8gc2VsZWN0U291cmNlIGlzIGEgalF1ZXJ5IG9iamVjdCBvciBzdHJpbmcgb2Ygb3B0aW9uc1xuXHRcdFx0cmV0dXJuIGZ4bjtcblx0XHR9IGVsc2UgaWYgKCQuaXNBcnJheShmeG4pKSB7XG5cdFx0XHRhcnJ5ID0gZnhuO1xuXHRcdH0gZWxzZSBpZiAoJC50eXBlKHNvdXJjZSkgPT09ICdvYmplY3QnICYmIGZ4bikge1xuXHRcdFx0Ly8gY3VzdG9tIHNlbGVjdCBzb3VyY2UgZnVuY3Rpb24gZm9yIGEgU1BFQ0lGSUMgQ09MVU1OXG5cdFx0XHRhcnJ5ID0gZnhuKHRhYmxlLCBjb2x1bW4sIG9ubHlBdmFpbCk7XG5cdFx0fVxuXHRcdGlmIChhcnJ5ID09PSBmYWxzZSkge1xuXHRcdFx0Ly8gZmFsbCBiYWNrIHRvIG9yaWdpbmFsIG1ldGhvZFxuXHRcdFx0YXJyeSA9IHRzLmZpbHRlci5nZXRPcHRpb25zKHRhYmxlLCBjb2x1bW4sIG9ubHlBdmFpbCk7XG5cdFx0fVxuXG5cdFx0Ly8gZ2V0IHVuaXF1ZSBlbGVtZW50cyBhbmQgc29ydCB0aGUgbGlzdFxuXHRcdC8vIGlmICQudGFibGVzb3J0ZXIuc29ydFRleHQgZXhpc3RzIChub3QgaW4gdGhlIG9yaWdpbmFsIHRhYmxlc29ydGVyKSxcblx0XHQvLyB0aGVuIG5hdHVyYWwgc29ydCB0aGUgbGlzdCBvdGhlcndpc2UgdXNlIGEgYmFzaWMgc29ydFxuXHRcdGFycnkgPSAkLmdyZXAoYXJyeSwgZnVuY3Rpb24odmFsdWUsIGluZHgpIHtcblx0XHRcdHJldHVybiAkLmluQXJyYXkodmFsdWUsIGFycnkpID09PSBpbmR4O1xuXHRcdH0pO1xuXG5cdFx0aWYgKGMuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgY29sdW1uICsgJ1wiXTpsYXN0JykuaGFzQ2xhc3MoJ2ZpbHRlci1zZWxlY3Qtbm9zb3J0JykpIHtcblx0XHRcdC8vIHVuc29ydGVkIHNlbGVjdCBvcHRpb25zXG5cdFx0XHRyZXR1cm4gYXJyeTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGFyc2Ugc2VsZWN0IG9wdGlvbiB2YWx1ZXNcblx0XHRcdCQuZWFjaChhcnJ5LCBmdW5jdGlvbihpLCB2KXtcblx0XHRcdFx0Ly8gcGFyc2UgYXJyYXkgZGF0YSB1c2luZyBzZXQgY29sdW1uIHBhcnNlcjsgdGhpcyBET0VTIE5PVCBwYXNzIHRoZSBvcmlnaW5hbFxuXHRcdFx0XHQvLyB0YWJsZSBjZWxsIHRvIHRoZSBwYXJzZXIgZm9ybWF0IGZ1bmN0aW9uXG5cdFx0XHRcdHBhcnNlZC5wdXNoKHsgdCA6IHYsIHAgOiBjLnBhcnNlcnMgJiYgYy5wYXJzZXJzW2NvbHVtbl0uZm9ybWF0KCB2LCB0YWJsZSwgW10sIGNvbHVtbiApIH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIHNvcnQgcGFyc2VkIHNlbGVjdCBvcHRpb25zXG5cdFx0XHRjdHMgPSBjLnRleHRTb3J0ZXIgfHwgJyc7XG5cdFx0XHRwYXJzZWQuc29ydChmdW5jdGlvbihhLCBiKXtcblx0XHRcdFx0Ly8gc29ydE5hdHVyYWwgYnJlYWtzIGlmIHlvdSBkb24ndCBwYXNzIGl0IHN0cmluZ3Ncblx0XHRcdFx0dmFyIHggPSBhLnAudG9TdHJpbmcoKSwgeSA9IGIucC50b1N0cmluZygpO1xuXHRcdFx0XHRpZiAoJC5pc0Z1bmN0aW9uKGN0cykpIHtcblx0XHRcdFx0XHQvLyBjdXN0b20gT1ZFUkFMTCB0ZXh0IHNvcnRlclxuXHRcdFx0XHRcdHJldHVybiBjdHMoeCwgeSwgdHJ1ZSwgY29sdW1uLCB0YWJsZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKGN0cykgPT09ICdvYmplY3QnICYmIGN0cy5oYXNPd25Qcm9wZXJ0eShjb2x1bW4pKSB7XG5cdFx0XHRcdFx0Ly8gY3VzdG9tIHRleHQgc29ydGVyIGZvciBhIFNQRUNJRklDIENPTFVNTlxuXHRcdFx0XHRcdHJldHVybiBjdHNbY29sdW1uXSh4LCB5LCB0cnVlLCBjb2x1bW4sIHRhYmxlKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0cy5zb3J0TmF0dXJhbCkge1xuXHRcdFx0XHRcdC8vIGZhbGwgYmFjayB0byBuYXR1cmFsIHNvcnRcblx0XHRcdFx0XHRyZXR1cm4gdHMuc29ydE5hdHVyYWwoeCwgeSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gdXNpbmcgYW4gb2xkZXIgdmVyc2lvbiEgZG8gYSBiYXNpYyBzb3J0XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0XHQvLyByZWJ1aWxkIGFycnkgZnJvbSBzb3J0ZWQgcGFyc2VkIGRhdGFcblx0XHRcdGFycnkgPSBbXTtcblx0XHRcdCQuZWFjaChwYXJzZWQsIGZ1bmN0aW9uKGksIHYpe1xuXHRcdFx0XHRhcnJ5LnB1c2godi50KTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGFycnk7XG5cdFx0fVxuXHR9LFxuXHRnZXRPcHRpb25zOiBmdW5jdGlvbih0YWJsZSwgY29sdW1uLCBvbmx5QXZhaWwpIHtcblx0XHR2YXIgcm93SW5kZXgsIHRib2R5SW5kZXgsIGxlbiwgcm93LCBjYWNoZSwgY2VsbCxcblx0XHRcdGMgPSB0YWJsZS5jb25maWcsXG5cdFx0XHR3byA9IGMud2lkZ2V0T3B0aW9ucyxcblx0XHRcdCR0Ym9kaWVzID0gYy4kdGFibGUuY2hpbGRyZW4oJ3Rib2R5JyksXG5cdFx0XHRhcnJ5ID0gW107XG5cdFx0Zm9yICh0Ym9keUluZGV4ID0gMDsgdGJvZHlJbmRleCA8ICR0Ym9kaWVzLmxlbmd0aDsgdGJvZHlJbmRleCsrICkge1xuXHRcdFx0aWYgKCEkdGJvZGllcy5lcSh0Ym9keUluZGV4KS5oYXNDbGFzcyhjLmNzc0luZm9CbG9jaykpIHtcblx0XHRcdFx0Y2FjaGUgPSBjLmNhY2hlW3Rib2R5SW5kZXhdO1xuXHRcdFx0XHRsZW4gPSBjLmNhY2hlW3Rib2R5SW5kZXhdLm5vcm1hbGl6ZWQubGVuZ3RoO1xuXHRcdFx0XHQvLyBsb29wIHRocm91Z2ggdGhlIHJvd3Ncblx0XHRcdFx0Zm9yIChyb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgbGVuOyByb3dJbmRleCsrKSB7XG5cdFx0XHRcdFx0Ly8gZ2V0IGNhY2hlZCByb3cgZnJvbSBjYWNoZS5yb3cgKG9sZCkgb3Igcm93IGRhdGEgb2JqZWN0IChuZXc7IGxhc3QgaXRlbSBpbiBub3JtYWxpemVkIGFycmF5KVxuXHRcdFx0XHRcdHJvdyA9IGNhY2hlLnJvdyA/IGNhY2hlLnJvd1tyb3dJbmRleF0gOiBjYWNoZS5ub3JtYWxpemVkW3Jvd0luZGV4XVtjLmNvbHVtbnNdLiRyb3dbMF07XG5cdFx0XHRcdFx0Ly8gY2hlY2sgaWYgaGFzIGNsYXNzIGZpbHRlcmVkXG5cdFx0XHRcdFx0aWYgKG9ubHlBdmFpbCAmJiByb3cuY2xhc3NOYW1lLm1hdGNoKHdvLmZpbHRlcl9maWx0ZXJlZFJvdykpIHsgY29udGludWU7IH1cblx0XHRcdFx0XHQvLyBnZXQgbm9uLW5vcm1hbGl6ZWQgY2VsbCBjb250ZW50XG5cdFx0XHRcdFx0aWYgKHdvLmZpbHRlcl91c2VQYXJzZWREYXRhIHx8IGMucGFyc2Vyc1tjb2x1bW5dLnBhcnNlZCB8fCBjLiRoZWFkZXJzLmZpbHRlcignW2RhdGEtY29sdW1uPVwiJyArIGNvbHVtbiArICdcIl06bGFzdCcpLmhhc0NsYXNzKCdmaWx0ZXItcGFyc2VkJykpIHtcblx0XHRcdFx0XHRcdGFycnkucHVzaCggJycgKyBjYWNoZS5ub3JtYWxpemVkW3Jvd0luZGV4XVtjb2x1bW5dICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNlbGwgPSByb3cuY2VsbHNbY29sdW1uXTtcblx0XHRcdFx0XHRcdGlmIChjZWxsKSB7XG5cdFx0XHRcdFx0XHRcdGFycnkucHVzaCggJC50cmltKCBjZWxsLnRleHRDb250ZW50IHx8IGNlbGwuaW5uZXJUZXh0IHx8ICQoY2VsbCkudGV4dCgpICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGFycnk7XG5cdH0sXG5cdGJ1aWxkU2VsZWN0OiBmdW5jdGlvbih0YWJsZSwgY29sdW1uLCBhcnJ5LCB1cGRhdGluZywgb25seUF2YWlsKSB7XG5cdFx0dGFibGUgPSAkKHRhYmxlKVswXTtcblx0XHRjb2x1bW4gPSBwYXJzZUludChjb2x1bW4sIDEwKTtcblx0XHRpZiAoIXRhYmxlLmNvbmZpZy5jYWNoZSB8fCAkLmlzRW1wdHlPYmplY3QodGFibGUuY29uZmlnLmNhY2hlKSkgeyByZXR1cm47IH1cblx0XHR2YXIgaW5keCwgdmFsLCB0eHQsIHQsICRmaWx0ZXJzLCAkZmlsdGVyLFxuXHRcdFx0YyA9IHRhYmxlLmNvbmZpZyxcblx0XHRcdHdvID0gYy53aWRnZXRPcHRpb25zLFxuXHRcdFx0bm9kZSA9IGMuJGhlYWRlcnMuZmlsdGVyKCdbZGF0YS1jb2x1bW49XCInICsgY29sdW1uICsgJ1wiXTpsYXN0JyksXG5cdFx0XHQvLyB0LmRhdGEoJ3BsYWNlaG9sZGVyJykgd29uJ3Qgd29yayBpbiBqUXVlcnkgb2xkZXIgdGhhbiAxLjQuM1xuXHRcdFx0b3B0aW9ucyA9ICc8b3B0aW9uIHZhbHVlPVwiXCI+JyArICggbm9kZS5kYXRhKCdwbGFjZWhvbGRlcicpIHx8IG5vZGUuYXR0cignZGF0YS1wbGFjZWhvbGRlcicpIHx8IHdvLmZpbHRlcl9wbGFjZWhvbGRlci5zZWxlY3QgfHwgJycgKSArICc8L29wdGlvbj4nLFxuXHRcdFx0Ly8gR2V0IGN1cmVudCBmaWx0ZXIgdmFsdWVcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGMuJHRhYmxlLmZpbmQoJ3RoZWFkJykuZmluZCgnc2VsZWN0LicgKyB0cy5jc3MuZmlsdGVyICsgJ1tkYXRhLWNvbHVtbj1cIicgKyBjb2x1bW4gKyAnXCJdJykudmFsKCk7XG5cdFx0Ly8gbm90aGluZyBpbmNsdWRlZCBpbiBhcnJ5IChleHRlcm5hbCBzb3VyY2UpLCBzbyBnZXQgdGhlIG9wdGlvbnMgZnJvbSBmaWx0ZXJfc2VsZWN0U291cmNlIG9yIGNvbHVtbiBkYXRhXG5cdFx0aWYgKHR5cGVvZiBhcnJ5ID09PSAndW5kZWZpbmVkJyB8fCBhcnJ5ID09PSAnJykge1xuXHRcdFx0YXJyeSA9IHRzLmZpbHRlci5nZXRPcHRpb25Tb3VyY2UodGFibGUsIGNvbHVtbiwgb25seUF2YWlsKTtcblx0XHR9XG5cblx0XHRpZiAoJC5pc0FycmF5KGFycnkpKSB7XG5cdFx0XHQvLyBidWlsZCBvcHRpb24gbGlzdFxuXHRcdFx0Zm9yIChpbmR4ID0gMDsgaW5keCA8IGFycnkubGVuZ3RoOyBpbmR4KyspIHtcblx0XHRcdFx0dHh0ID0gYXJyeVtpbmR4XSA9ICgnJyArIGFycnlbaW5keF0pLnJlcGxhY2UoL1xcXCIvZywgXCImcXVvdDtcIik7XG5cdFx0XHRcdHZhbCA9IHR4dDtcblx0XHRcdFx0Ly8gYWxsb3cgaW5jbHVkaW5nIGEgc3ltYm9sIGluIHRoZSBzZWxlY3RTb3VyY2UgYXJyYXlcblx0XHRcdFx0Ly8gXCJhLXp8QSB0aHJvdWdoIFpcIiBzbyB0aGF0IFwiYS16XCIgYmVjb21lcyB0aGUgb3B0aW9uIHZhbHVlXG5cdFx0XHRcdC8vIGFuZCBcIkEgdGhyb3VnaCBaXCIgYmVjb21lcyB0aGUgb3B0aW9uIHRleHRcblx0XHRcdFx0aWYgKHR4dC5pbmRleE9mKHdvLmZpbHRlcl9zZWxlY3RTb3VyY2VTZXBhcmF0b3IpID49IDApIHtcblx0XHRcdFx0XHR0ID0gdHh0LnNwbGl0KHdvLmZpbHRlcl9zZWxlY3RTb3VyY2VTZXBhcmF0b3IpO1xuXHRcdFx0XHRcdHZhbCA9IHRbMF07XG5cdFx0XHRcdFx0dHh0ID0gdFsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyByZXBsYWNlIHF1b3RlcyAtIGZpeGVzICMyNDIgJiBpZ25vcmUgZW1wdHkgc3RyaW5ncyAtIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xNDk5MDk3MS8xNDUzNDZcblx0XHRcdFx0b3B0aW9ucyArPSBhcnJ5W2luZHhdICE9PSAnJyA/ICc8b3B0aW9uICcgKyAodmFsID09PSB0eHQgPyAnJyA6ICdkYXRhLWZ1bmN0aW9uLW5hbWU9XCInICsgYXJyeVtpbmR4XSArICdcIiAnKSArICd2YWx1ZT1cIicgKyB2YWwgKyAnXCI+JyArIHR4dCArICc8L29wdGlvbj4nIDogJyc7XG5cdFx0XHR9XG5cdFx0XHQvLyBjbGVhciBhcnJ5IHNvIGl0IGRvZXNuJ3QgZ2V0IGFwcGVuZGVkIHR3aWNlXG5cdFx0XHRhcnJ5ID0gW107XG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGFsbCBzZWxlY3RzIGluIHRoZSBzYW1lIGNvbHVtbiAoY2xvbmUgdGhlYWQgaW4gc3RpY2t5IGhlYWRlcnMgJiBhbnkgZXh0ZXJuYWwgc2VsZWN0cykgLSBmaXhlcyA0NzNcblx0XHQkZmlsdGVycyA9ICggYy4kZmlsdGVycyA/IGMuJGZpbHRlcnMgOiBjLiR0YWJsZS5jaGlsZHJlbigndGhlYWQnKSApLmZpbmQoJy4nICsgdHMuY3NzLmZpbHRlcik7XG5cdFx0aWYgKHdvLmZpbHRlcl8kZXh0ZXJuYWxGaWx0ZXJzKSB7XG5cdFx0XHQkZmlsdGVycyA9ICRmaWx0ZXJzICYmICRmaWx0ZXJzLmxlbmd0aCA/ICRmaWx0ZXJzLmFkZCh3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycykgOiB3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycztcblx0XHR9XG5cdFx0JGZpbHRlciA9ICRmaWx0ZXJzLmZpbHRlcignc2VsZWN0W2RhdGEtY29sdW1uPVwiJyArIGNvbHVtbiArICdcIl0nKTtcblxuXHRcdC8vIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIHNlbGVjdCB0aGVyZSFcblx0XHRpZiAoJGZpbHRlci5sZW5ndGgpIHtcblx0XHRcdCRmaWx0ZXJbIHVwZGF0aW5nID8gJ2h0bWwnIDogJ2FwcGVuZCcgXShvcHRpb25zKTtcblx0XHRcdGlmICghJC5pc0FycmF5KGFycnkpKSB7XG5cdFx0XHRcdC8vIGFwcGVuZCBvcHRpb25zIGlmIGFycnkgaXMgcHJvdmlkZWQgZXh0ZXJuYWxseSBhcyBhIHN0cmluZyBvciBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdC8vIG9wdGlvbnMgKGRlZmF1bHQgdmFsdWUpIHdhcyBhbHJlYWR5IGFkZGVkXG5cdFx0XHRcdCRmaWx0ZXIuYXBwZW5kKGFycnkpLnZhbChjdXJyZW50VmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0JGZpbHRlci52YWwoY3VycmVudFZhbHVlKTtcblx0XHR9XG5cdH0sXG5cdGJ1aWxkRGVmYXVsdDogZnVuY3Rpb24odGFibGUsIHVwZGF0aW5nKSB7XG5cdFx0dmFyIGNvbHVtbkluZGV4LCAkaGVhZGVyLCBub1NlbGVjdCxcblx0XHRcdGMgPSB0YWJsZS5jb25maWcsXG5cdFx0XHR3byA9IGMud2lkZ2V0T3B0aW9ucyxcblx0XHRcdGNvbHVtbnMgPSBjLmNvbHVtbnM7XG5cdFx0Ly8gYnVpbGQgZGVmYXVsdCBzZWxlY3QgZHJvcGRvd25cblx0XHRmb3IgKGNvbHVtbkluZGV4ID0gMDsgY29sdW1uSW5kZXggPCBjb2x1bW5zOyBjb2x1bW5JbmRleCsrKSB7XG5cdFx0XHQkaGVhZGVyID0gYy4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyBjb2x1bW5JbmRleCArICdcIl06bGFzdCcpO1xuXHRcdFx0bm9TZWxlY3QgPSAhKCRoZWFkZXIuaGFzQ2xhc3MoJ2ZpbHRlci1mYWxzZScpIHx8ICRoZWFkZXIuaGFzQ2xhc3MoJ3BhcnNlci1mYWxzZScpKTtcblx0XHRcdC8vIGxvb2sgZm9yIHRoZSBmaWx0ZXItc2VsZWN0IGNsYXNzOyBidWlsZC91cGRhdGUgaXQgaWYgZm91bmRcblx0XHRcdGlmICgoJGhlYWRlci5oYXNDbGFzcygnZmlsdGVyLXNlbGVjdCcpIHx8IHRzLmdldENvbHVtbkRhdGEoIHRhYmxlLCB3by5maWx0ZXJfZnVuY3Rpb25zLCBjb2x1bW5JbmRleCApID09PSB0cnVlKSAmJiBub1NlbGVjdCkge1xuXHRcdFx0XHR0cy5maWx0ZXIuYnVpbGRTZWxlY3QodGFibGUsIGNvbHVtbkluZGV4LCAnJywgdXBkYXRpbmcsICRoZWFkZXIuaGFzQ2xhc3Mod28uZmlsdGVyX29ubHlBdmFpbCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudHMuZ2V0RmlsdGVycyA9IGZ1bmN0aW9uKHRhYmxlLCBnZXRSYXcsIHNldEZpbHRlcnMsIHNraXBGaXJzdCkge1xuXHR2YXIgaSwgJGZpbHRlcnMsICRjb2x1bW4sIGNvbHMsXG5cdFx0ZmlsdGVycyA9IGZhbHNlLFxuXHRcdGMgPSB0YWJsZSA/ICQodGFibGUpWzBdLmNvbmZpZyA6ICcnLFxuXHRcdHdvID0gYyA/IGMud2lkZ2V0T3B0aW9ucyA6ICcnO1xuXHRpZiAoZ2V0UmF3ICE9PSB0cnVlICYmIHdvICYmICF3by5maWx0ZXJfY29sdW1uRmlsdGVycykge1xuXHRcdHJldHVybiAkKHRhYmxlKS5kYXRhKCdsYXN0U2VhcmNoJyk7XG5cdH1cblx0aWYgKGMpIHtcblx0XHRpZiAoYy4kZmlsdGVycykge1xuXHRcdFx0JGZpbHRlcnMgPSBjLiRmaWx0ZXJzLmZpbmQoJy4nICsgdHMuY3NzLmZpbHRlcik7XG5cdFx0fVxuXHRcdGlmICh3by5maWx0ZXJfJGV4dGVybmFsRmlsdGVycykge1xuXHRcdFx0JGZpbHRlcnMgPSAkZmlsdGVycyAmJiAkZmlsdGVycy5sZW5ndGggPyAkZmlsdGVycy5hZGQod28uZmlsdGVyXyRleHRlcm5hbEZpbHRlcnMpIDogd28uZmlsdGVyXyRleHRlcm5hbEZpbHRlcnM7XG5cdFx0fVxuXHRcdGlmICgkZmlsdGVycyAmJiAkZmlsdGVycy5sZW5ndGgpIHtcblx0XHRcdGZpbHRlcnMgPSBzZXRGaWx0ZXJzIHx8IFtdO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGMuY29sdW1ucyArIDE7IGkrKykge1xuXHRcdFx0XHRjb2xzID0gKCBpID09PSBjLmNvbHVtbnMgP1xuXHRcdFx0XHRcdC8vIFwiYWxsXCIgY29sdW1ucyBjYW4gbm93IGluY2x1ZGUgYSByYW5nZSBvciBzZXQgb2YgY29sdW1tcyAoZGF0YS1jb2x1bW49XCIwLTIsNCw2LTdcIilcblx0XHRcdFx0XHR3by5maWx0ZXJfYW55Q29sdW1uU2VsZWN0b3IgKyAnLCcgKyB3by5maWx0ZXJfbXVsdGlwbGVDb2x1bW5TZWxlY3RvciA6XG5cdFx0XHRcdFx0J1tkYXRhLWNvbHVtbj1cIicgKyBpICsgJ1wiXScgKTtcblx0XHRcdFx0JGNvbHVtbiA9ICRmaWx0ZXJzLmZpbHRlcihjb2xzKTtcblx0XHRcdFx0aWYgKCRjb2x1bW4ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0Ly8gbW92ZSB0aGUgbGF0ZXN0IHNlYXJjaCB0byB0aGUgZmlyc3Qgc2xvdCBpbiB0aGUgYXJyYXlcblx0XHRcdFx0XHQkY29sdW1uID0gdHMuZmlsdGVyLmdldExhdGVzdFNlYXJjaCggJGNvbHVtbiApO1xuXHRcdFx0XHRcdGlmICgkLmlzQXJyYXkoc2V0RmlsdGVycykpIHtcblx0XHRcdFx0XHRcdC8vIHNraXAgZmlyc3QgKGxhdGVzdCBpbnB1dCkgdG8gbWFpbnRhaW4gY3Vyc29yIHBvc2l0aW9uIHdoaWxlIHR5cGluZ1xuXHRcdFx0XHRcdFx0aWYgKHNraXBGaXJzdCkgeyAkY29sdW1uLnNsaWNlKDEpOyB9XG5cdFx0XHRcdFx0XHRpZiAoaSA9PT0gYy5jb2x1bW5zKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHByZXZlbnQgZGF0YS1jb2x1bW49XCJhbGxcIiBmcm9tIGZpbGxpbmcgZGF0YS1jb2x1bW49XCIwLDFcIiAoZXRjKVxuXHRcdFx0XHRcdFx0XHRjb2xzID0gJGNvbHVtbi5maWx0ZXIod28uZmlsdGVyX2FueUNvbHVtblNlbGVjdG9yKTtcblx0XHRcdFx0XHRcdFx0JGNvbHVtbiA9IGNvbHMubGVuZ3RoID8gY29scyA6ICRjb2x1bW47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQkY29sdW1uXG5cdFx0XHRcdFx0XHRcdC52YWwoIHNldEZpbHRlcnNbaV0gKVxuXHRcdFx0XHRcdFx0XHQudHJpZ2dlcignY2hhbmdlLnRzZmlsdGVyJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpbHRlcnNbaV0gPSAkY29sdW1uLnZhbCgpIHx8ICcnO1xuXHRcdFx0XHRcdFx0Ly8gZG9uJ3QgY2hhbmdlIHRoZSBmaXJzdC4uLiBpdCB3aWxsIG1vdmUgdGhlIGN1cnNvclxuXHRcdFx0XHRcdFx0aWYgKGkgPT09IGMuY29sdW1ucykge1xuXHRcdFx0XHRcdFx0XHQvLyBkb24ndCB1cGRhdGUgcmFuZ2UgY29sdW1ucyBmcm9tIFwiYWxsXCIgc2V0dGluZ1xuXHRcdFx0XHRcdFx0XHQkY29sdW1uLnNsaWNlKDEpLmZpbHRlcignW2RhdGEtY29sdW1uKj1cIicgKyAkY29sdW1uLmF0dHIoJ2RhdGEtY29sdW1uJykgKyAnXCJdJykudmFsKCBmaWx0ZXJzW2ldICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQkY29sdW1uLnNsaWNlKDEpLnZhbCggZmlsdGVyc1tpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBzYXZlIGFueSBtYXRjaCBpbnB1dCBkeW5hbWljYWxseVxuXHRcdFx0XHRcdGlmIChpID09PSBjLmNvbHVtbnMgJiYgJGNvbHVtbi5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHdvLmZpbHRlcl8kYW55TWF0Y2ggPSAkY29sdW1uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAoZmlsdGVycy5sZW5ndGggPT09IDApIHtcblx0XHRmaWx0ZXJzID0gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGZpbHRlcnM7XG59O1xuXG50cy5zZXRGaWx0ZXJzID0gZnVuY3Rpb24odGFibGUsIGZpbHRlciwgYXBwbHksIHNraXBGaXJzdCkge1xuXHR2YXIgYyA9IHRhYmxlID8gJCh0YWJsZSlbMF0uY29uZmlnIDogJycsXG5cdFx0dmFsaWQgPSB0cy5nZXRGaWx0ZXJzKHRhYmxlLCB0cnVlLCBmaWx0ZXIsIHNraXBGaXJzdCk7XG5cdGlmIChjICYmIGFwcGx5KSB7XG5cdFx0Ly8gZW5zdXJlIG5ldyBzZXQgZmlsdGVycyBhcmUgYXBwbGllZCwgZXZlbiBpZiB0aGUgc2VhcmNoIGlzIHRoZSBzYW1lXG5cdFx0Yy5sYXN0Q29tYmluZWRGaWx0ZXIgPSBudWxsO1xuXHRcdGMubGFzdFNlYXJjaCA9IFtdO1xuXHRcdHRzLmZpbHRlci5zZWFyY2hpbmcoYy4kdGFibGVbMF0sIGZpbHRlciwgc2tpcEZpcnN0KTtcblx0XHRjLiR0YWJsZS50cmlnZ2VyKCdmaWx0ZXJGb21hdHRlclVwZGF0ZScpO1xuXHR9XG5cdHJldHVybiAhIXZhbGlkO1xufTtcblxuLy8gV2lkZ2V0OiBTdGlja3kgaGVhZGVyc1xuLy8gYmFzZWQgb24gdGhpcyBhd2Vzb21lIGFydGljbGU6XG4vLyBodHRwOi8vY3NzLXRyaWNrcy5jb20vMTM0NjUtcGVyc2lzdGVudC1oZWFkZXJzL1xuLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9qbW9zYmVjaC9TdGlja3lUYWJsZUhlYWRlcnMgYnkgSm9uYXMgTW9zYmVjaFxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZFdpZGdldCh7XG5cdGlkOiBcInN0aWNreUhlYWRlcnNcIixcblx0cHJpb3JpdHk6IDYwLCAvLyBzdGlja3kgd2lkZ2V0IG11c3QgYmUgaW5pdGlhbGl6ZWQgYWZ0ZXIgdGhlIGZpbHRlciB3aWRnZXQhXG5cdG9wdGlvbnM6IHtcblx0XHRzdGlja3lIZWFkZXJzIDogJycsICAgICAgIC8vIGV4dHJhIGNsYXNzIG5hbWUgYWRkZWQgdG8gdGhlIHN0aWNreSBoZWFkZXIgcm93XG5cdFx0c3RpY2t5SGVhZGVyc19hdHRhY2hUbyA6IG51bGwsIC8vIGpRdWVyeSBzZWxlY3RvciBvciBvYmplY3QgdG8gYXR0YWNoIHN0aWNreSBoZWFkZXIgdG9cblx0XHRzdGlja3lIZWFkZXJzX3hTY3JvbGwgOiBudWxsLCAvLyBqUXVlcnkgc2VsZWN0b3Igb3Igb2JqZWN0IHRvIG1vbml0b3IgaG9yaXpvbnRhbCBzY3JvbGwgcG9zaXRpb24gKGRlZmF1bHRzOiB4U2Nyb2xsID4gYXR0YWNoVG8gPiB3aW5kb3cpXG5cdFx0c3RpY2t5SGVhZGVyc195U2Nyb2xsIDogbnVsbCwgLy8galF1ZXJ5IHNlbGVjdG9yIG9yIG9iamVjdCB0byBtb25pdG9yIHZlcnRpY2FsIHNjcm9sbCBwb3NpdGlvbiAoZGVmYXVsdHM6IHlTY3JvbGwgPiBhdHRhY2hUbyA+IHdpbmRvdylcblx0XHRzdGlja3lIZWFkZXJzX29mZnNldCA6IDAsIC8vIG51bWJlciBvciBqcXVlcnkgc2VsZWN0b3IgdGFyZ2V0aW5nIHRoZSBwb3NpdGlvbjpmaXhlZCBlbGVtZW50XG5cdFx0c3RpY2t5SGVhZGVyc19maWx0ZXJlZFRvVG9wOiB0cnVlLCAvLyBzY3JvbGwgdGFibGUgdG9wIGludG8gdmlldyBhZnRlciBmaWx0ZXJpbmdcblx0XHRzdGlja3lIZWFkZXJzX2Nsb25lSWQgOiAnLXN0aWNreScsIC8vIGFkZGVkIHRvIHRhYmxlIElELCBpZiBpdCBleGlzdHNcblx0XHRzdGlja3lIZWFkZXJzX2FkZFJlc2l6ZUV2ZW50IDogdHJ1ZSwgLy8gdHJpZ2dlciBcInJlc2l6ZVwiIGV2ZW50IG9uIGhlYWRlcnNcblx0XHRzdGlja3lIZWFkZXJzX2luY2x1ZGVDYXB0aW9uIDogdHJ1ZSwgLy8gaWYgZmFsc2UgYW5kIGEgY2FwdGlvbiBleGlzdCwgaXQgd29uJ3QgYmUgaW5jbHVkZWQgaW4gdGhlIHN0aWNreSBoZWFkZXJcblx0XHRzdGlja3lIZWFkZXJzX3pJbmRleCA6IDIgLy8gVGhlIHpJbmRleCBvZiB0aGUgc3RpY2t5SGVhZGVycywgYWxsb3dzIHRoZSB1c2VyIHRvIGFkanVzdCB0aGlzIHRvIHRoZWlyIG5lZWRzXG5cdH0sXG5cdGZvcm1hdDogZnVuY3Rpb24odGFibGUsIGMsIHdvKSB7XG5cdFx0Ly8gZmlsdGVyIHdpZGdldCBkb2Vzbid0IGluaXRpYWxpemUgb24gYW4gZW1wdHkgdGFibGUuIEZpeGVzICM0NDlcblx0XHRpZiAoIGMuJHRhYmxlLmhhc0NsYXNzKCdoYXNTdGlja3lIZWFkZXJzJykgfHwgKCQuaW5BcnJheSgnZmlsdGVyJywgYy53aWRnZXRzKSA+PSAwICYmICFjLiR0YWJsZS5oYXNDbGFzcygnaGFzRmlsdGVycycpKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyICR0YWJsZSA9IGMuJHRhYmxlLFxuXHRcdFx0JGF0dGFjaCA9ICQod28uc3RpY2t5SGVhZGVyc19hdHRhY2hUbyksXG5cdFx0XHRuYW1lc3BhY2UgPSBjLm5hbWVzcGFjZSArICdzdGlja3loZWFkZXJzICcsXG5cdFx0XHQvLyBlbGVtZW50IHRvIHdhdGNoIGZvciB0aGUgc2Nyb2xsIGV2ZW50XG5cdFx0XHQkeVNjcm9sbCA9ICQod28uc3RpY2t5SGVhZGVyc195U2Nyb2xsIHx8IHdvLnN0aWNreUhlYWRlcnNfYXR0YWNoVG8gfHwgd2luZG93KSxcblx0XHRcdCR4U2Nyb2xsID0gJCh3by5zdGlja3lIZWFkZXJzX3hTY3JvbGwgfHwgd28uc3RpY2t5SGVhZGVyc19hdHRhY2hUbyB8fCB3aW5kb3cpLFxuXHRcdFx0JHRoZWFkID0gJHRhYmxlLmNoaWxkcmVuKCd0aGVhZDpmaXJzdCcpLFxuXHRcdFx0JGhlYWRlciA9ICR0aGVhZC5jaGlsZHJlbigndHInKS5ub3QoJy5zdGlja3ktZmFsc2UnKS5jaGlsZHJlbigpLFxuXHRcdFx0JHRmb290ID0gJHRhYmxlLmNoaWxkcmVuKCd0Zm9vdCcpLFxuXHRcdFx0JHN0aWNreU9mZnNldCA9IGlzTmFOKHdvLnN0aWNreUhlYWRlcnNfb2Zmc2V0KSA/ICQod28uc3RpY2t5SGVhZGVyc19vZmZzZXQpIDogJycsXG5cdFx0XHRzdGlja3lPZmZzZXQgPSAkYXR0YWNoLmxlbmd0aCA/IDAgOiAkc3RpY2t5T2Zmc2V0Lmxlbmd0aCA/XG5cdFx0XHRcdCRzdGlja3lPZmZzZXQuaGVpZ2h0KCkgfHwgMCA6IHBhcnNlSW50KHdvLnN0aWNreUhlYWRlcnNfb2Zmc2V0LCAxMCkgfHwgMCxcblx0XHRcdC8vIGlzIHRoaXMgdGFibGUgbmVzdGVkPyBJZiBzbywgZmluZCBwYXJlbnQgc3RpY2t5IGhlYWRlciB3cmFwcGVyIChkaXYsIG5vdCB0YWJsZSlcblx0XHRcdCRuZXN0ZWRTdGlja3kgPSAkdGFibGUucGFyZW50KCkuY2xvc2VzdCgnLicgKyB0cy5jc3MudGFibGUpLmhhc0NsYXNzKCdoYXNTdGlja3lIZWFkZXJzJykgP1xuXHRcdFx0XHQkdGFibGUucGFyZW50KCkuY2xvc2VzdCgndGFibGUudGFibGVzb3J0ZXInKVswXS5jb25maWcud2lkZ2V0T3B0aW9ucy4kc3RpY2t5LnBhcmVudCgpIDogW10sXG5cdFx0XHRuZXN0ZWRTdGlja3lUb3AgPSAkbmVzdGVkU3RpY2t5Lmxlbmd0aCA/ICRuZXN0ZWRTdGlja3kuaGVpZ2h0KCkgOiAwLFxuXHRcdFx0Ly8gY2xvbmUgdGFibGUsIHRoZW4gd3JhcCB0byBtYWtlIHN0aWNreSBoZWFkZXJcblx0XHRcdCRzdGlja3lUYWJsZSA9IHdvLiRzdGlja3kgPSAkdGFibGUuY2xvbmUoKVxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2NvbnRhaW5zU3RpY2t5SGVhZGVycyAnICsgdHMuY3NzLnN0aWNreSArICcgJyArIHdvLnN0aWNreUhlYWRlcnMpXG5cdFx0XHRcdC53cmFwKCc8ZGl2IGNsYXNzPVwiJyArIHRzLmNzcy5zdGlja3lXcmFwICsgJ1wiPicpLFxuXHRcdFx0JHN0aWNreVdyYXAgPSAkc3RpY2t5VGFibGUucGFyZW50KCkuY3NzKHtcblx0XHRcdFx0cG9zaXRpb24gICA6ICRhdHRhY2gubGVuZ3RoID8gJ2Fic29sdXRlJyA6ICdmaXhlZCcsXG5cdFx0XHRcdG1hcmdpbiAgICAgOiAwLFxuXHRcdFx0XHR0b3AgICAgICAgIDogc3RpY2t5T2Zmc2V0ICsgbmVzdGVkU3RpY2t5VG9wLFxuXHRcdFx0XHRsZWZ0ICAgICAgIDogMCxcblx0XHRcdFx0dmlzaWJpbGl0eSA6ICdoaWRkZW4nLFxuXHRcdFx0XHR6SW5kZXggICAgIDogd28uc3RpY2t5SGVhZGVyc196SW5kZXggfHwgMlxuXHRcdFx0fSksXG5cdFx0XHQkc3RpY2t5VGhlYWQgPSAkc3RpY2t5VGFibGUuY2hpbGRyZW4oJ3RoZWFkOmZpcnN0JyksXG5cdFx0XHQkc3RpY2t5Q2VsbHMsXG5cdFx0XHRsYXN0c3RhdGUgPSAnJyxcblx0XHRcdHNwYWNpbmcgPSAwLFxuXHRcdFx0c2V0V2lkdGggPSBmdW5jdGlvbigkb3JpZywgJGNsb25lKXtcblx0XHRcdFx0JG9yaWcuZmlsdGVyKCc6dmlzaWJsZScpLmVhY2goZnVuY3Rpb24oaSkge1xuXHRcdFx0XHRcdHZhciB3aWR0aCwgYm9yZGVyLFxuXHRcdFx0XHRcdFx0JGNlbGwgPSAkY2xvbmUuZmlsdGVyKCc6dmlzaWJsZScpLmVxKGkpLFxuXHRcdFx0XHRcdFx0JHRoaXMgPSAkKHRoaXMpO1xuXHRcdFx0XHRcdC8vIGNvZGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam1vc2JlY2gvU3RpY2t5VGFibGVIZWFkZXJzXG5cdFx0XHRcdFx0aWYgKCR0aGlzLmNzcygnYm94LXNpemluZycpID09PSAnYm9yZGVyLWJveCcpIHtcblx0XHRcdFx0XHRcdHdpZHRoID0gJHRoaXMub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoJGNlbGwuY3NzKCdib3JkZXItY29sbGFwc2UnKSA9PT0gJ2NvbGxhcHNlJykge1xuXHRcdFx0XHRcdFx0XHRpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCA9IHBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLndpZHRoICk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaWU4IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRib3JkZXIgPSBwYXJzZUZsb2F0KCAkdGhpcy5jc3MoJ2JvcmRlci13aWR0aCcpICk7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGggPSAkdGhpcy5vdXRlcldpZHRoKCkgLSBwYXJzZUZsb2F0KCAkdGhpcy5jc3MoJ3BhZGRpbmctbGVmdCcpICkgLSBwYXJzZUZsb2F0KCAkdGhpcy5jc3MoJ3BhZGRpbmctcmlnaHQnKSApIC0gYm9yZGVyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR3aWR0aCA9ICR0aGlzLndpZHRoKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCRjZWxsLmNzcyh7XG5cdFx0XHRcdFx0XHQnbWluLXdpZHRoJzogd2lkdGgsXG5cdFx0XHRcdFx0XHQnbWF4LXdpZHRoJzogd2lkdGhcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0cmVzaXplSGVhZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0aWNreU9mZnNldCA9ICRzdGlja3lPZmZzZXQubGVuZ3RoID8gJHN0aWNreU9mZnNldC5oZWlnaHQoKSB8fCAwIDogcGFyc2VJbnQod28uc3RpY2t5SGVhZGVyc19vZmZzZXQsIDEwKSB8fCAwO1xuXHRcdFx0XHRzcGFjaW5nID0gMDtcblx0XHRcdFx0JHN0aWNreVdyYXAuY3NzKHtcblx0XHRcdFx0XHRsZWZ0IDogJGF0dGFjaC5sZW5ndGggPyBwYXJzZUludCgkYXR0YWNoLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSB8fCAwIDpcblx0XHRcdFx0XHRcdFx0JHRhYmxlLm9mZnNldCgpLmxlZnQgLSBwYXJzZUludCgkdGFibGUuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMCkgLSAkeFNjcm9sbC5zY3JvbGxMZWZ0KCkgLSBzcGFjaW5nLFxuXHRcdFx0XHRcdHdpZHRoOiAkdGFibGUub3V0ZXJXaWR0aCgpXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzZXRXaWR0aCggJHRhYmxlLCAkc3RpY2t5VGFibGUgKTtcblx0XHRcdFx0c2V0V2lkdGgoICRoZWFkZXIsICRzdGlja3lDZWxscyApO1xuXHRcdFx0fTtcblx0XHQvLyBmaXggY2xvbmUgSUQsIGlmIGl0IGV4aXN0cyAtIGZpeGVzICMyNzFcblx0XHRpZiAoJHN0aWNreVRhYmxlLmF0dHIoJ2lkJykpIHsgJHN0aWNreVRhYmxlWzBdLmlkICs9IHdvLnN0aWNreUhlYWRlcnNfY2xvbmVJZDsgfVxuXHRcdC8vIGNsZWFyIG91dCBjbG9uZWQgdGFibGUsIGV4Y2VwdCBmb3Igc3RpY2t5IGhlYWRlclxuXHRcdC8vIGluY2x1ZGUgY2FwdGlvbiAmIGZpbHRlciByb3cgKGZpeGVzICMxMjYgJiAjMjQ5KSAtIGRvbid0IHJlbW92ZSBjZWxscyB0byBnZXQgY29ycmVjdCBjZWxsIGluZGV4aW5nXG5cdFx0JHN0aWNreVRhYmxlLmZpbmQoJ3RoZWFkOmd0KDApLCB0ci5zdGlja3ktZmFsc2UnKS5oaWRlKCk7XG5cdFx0JHN0aWNreVRhYmxlLmZpbmQoJ3Rib2R5LCB0Zm9vdCcpLnJlbW92ZSgpO1xuXHRcdGlmICghd28uc3RpY2t5SGVhZGVyc19pbmNsdWRlQ2FwdGlvbikge1xuXHRcdFx0JHN0aWNreVRhYmxlLmZpbmQoJ2NhcHRpb24nKS5yZW1vdmUoKTtcblx0XHR9XG5cdFx0Ly8gaXNzdWUgIzE3MiAtIGZpbmQgdGQvdGggaW4gc3RpY2t5IGhlYWRlclxuXHRcdCRzdGlja3lDZWxscyA9ICRzdGlja3lUaGVhZC5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG5cdFx0JHN0aWNreVRhYmxlLmNzcyh7IGhlaWdodDowLCB3aWR0aDowLCBtYXJnaW46IDAgfSk7XG5cdFx0Ly8gcmVtb3ZlIHJlc2l6YWJsZSBibG9ja1xuXHRcdCRzdGlja3lDZWxscy5maW5kKCcuJyArIHRzLmNzcy5yZXNpemVyKS5yZW1vdmUoKTtcblx0XHQvLyB1cGRhdGUgc3RpY2t5IGhlYWRlciBjbGFzcyBuYW1lcyB0byBtYXRjaCByZWFsIGhlYWRlciBhZnRlciBzb3J0aW5nXG5cdFx0JHRhYmxlXG5cdFx0XHQuYWRkQ2xhc3MoJ2hhc1N0aWNreUhlYWRlcnMnKVxuXHRcdFx0LmJpbmQoJ3BhZ2VyQ29tcGxldGUnICsgbmFtZXNwYWNlLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVzaXplSGVhZGVyKCk7XG5cdFx0XHR9KTtcblxuXHRcdHRzLmJpbmRFdmVudHModGFibGUsICRzdGlja3lUaGVhZC5jaGlsZHJlbigpLmNoaWxkcmVuKCcudGFibGVzb3J0ZXItaGVhZGVyJykpO1xuXG5cdFx0Ly8gYWRkIHN0aWNreWhlYWRlcnMgQUZURVIgdGhlIHRhYmxlLiBJZiB0aGUgdGFibGUgaXMgc2VsZWN0ZWQgYnkgSUQsIHRoZSBvcmlnaW5hbCBvbmUgKGZpcnN0KSB3aWxsIGJlIHJldHVybmVkLlxuXHRcdCR0YWJsZS5hZnRlciggJHN0aWNreVdyYXAgKTtcblxuXHRcdC8vIG9uUmVuZGVySGVhZGVyIGlzIGRlZmluZWQsIHdlIG5lZWQgdG8gZG8gc29tZXRoaW5nIGFib3V0IGl0IChmaXhlcyAjNjQxKVxuXHRcdGlmIChjLm9uUmVuZGVySGVhZGVyKSB7XG5cdFx0XHQkc3RpY2t5VGhlYWQuY2hpbGRyZW4oJ3RyJykuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdFx0Ly8gc2VuZCBzZWNvbmQgcGFyYW1ldGVyXG5cdFx0XHRcdGMub25SZW5kZXJIZWFkZXIuYXBwbHkoICQodGhpcyksIFsgaW5kZXgsIGMsICRzdGlja3lUYWJsZSBdICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBtYWtlIGl0IHN0aWNreSFcblx0XHQkeFNjcm9sbC5hZGQoJHlTY3JvbGwpXG5cdFx0LnVuYmluZCgnc2Nyb2xsIHJlc2l6ZSAnLnNwbGl0KCcgJykuam9pbiggbmFtZXNwYWNlICkgKVxuXHRcdC5iaW5kKCdzY3JvbGwgcmVzaXplICcuc3BsaXQoJyAnKS5qb2luKCBuYW1lc3BhY2UgKSwgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGlmICghJHRhYmxlLmlzKCc6dmlzaWJsZScpKSB7IHJldHVybjsgfSAvLyBmaXhlcyAjMjc4XG5cdFx0XHQvLyBEZXRlY3QgbmVzdGVkIHRhYmxlcyAtIGZpeGVzICM3MjRcblx0XHRcdG5lc3RlZFN0aWNreVRvcCA9ICRuZXN0ZWRTdGlja3kubGVuZ3RoID8gJG5lc3RlZFN0aWNreS5vZmZzZXQoKS50b3AgLSAkeVNjcm9sbC5zY3JvbGxUb3AoKSArICRuZXN0ZWRTdGlja3kuaGVpZ2h0KCkgOiAwO1xuXHRcdFx0dmFyIHByZWZpeCA9ICd0YWJsZXNvcnRlci1zdGlja3ktJyxcblx0XHRcdFx0b2Zmc2V0ID0gJHRhYmxlLm9mZnNldCgpLFxuXHRcdFx0XHR5V2luZG93ID0gJC5pc1dpbmRvdyggJHlTY3JvbGxbMF0gKSxcblx0XHRcdFx0eFdpbmRvdyA9ICQuaXNXaW5kb3coICR4U2Nyb2xsWzBdICksXG5cdFx0XHRcdC8vIHNjcm9sbFRvcCA9ICggJGF0dGFjaC5sZW5ndGggPyAkYXR0YWNoLm9mZnNldCgpLnRvcCA6ICR5U2Nyb2xsLnNjcm9sbFRvcCgpICkgKyBzdGlja3lPZmZzZXQgKyBuZXN0ZWRTdGlja3lUb3AsXG5cdFx0XHRcdHNjcm9sbFRvcCA9ICggJGF0dGFjaC5sZW5ndGggPyAoIHlXaW5kb3cgPyAkeVNjcm9sbC5zY3JvbGxUb3AoKSA6ICR5U2Nyb2xsLm9mZnNldCgpLnRvcCApIDogJHlTY3JvbGwuc2Nyb2xsVG9wKCkgKSArIHN0aWNreU9mZnNldCArIG5lc3RlZFN0aWNreVRvcCxcblx0XHRcdFx0dGFibGVIZWlnaHQgPSAkdGFibGUuaGVpZ2h0KCkgLSAoJHN0aWNreVdyYXAuaGVpZ2h0KCkgKyAoJHRmb290LmhlaWdodCgpIHx8IDApKSxcblx0XHRcdFx0aXNWaXNpYmxlID0gKCBzY3JvbGxUb3AgPiBvZmZzZXQudG9wKSAmJiAoc2Nyb2xsVG9wIDwgb2Zmc2V0LnRvcCArIHRhYmxlSGVpZ2h0KSA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nLFxuXHRcdFx0XHRjc3NTZXR0aW5ncyA9IHsgdmlzaWJpbGl0eSA6IGlzVmlzaWJsZSB9O1xuXG5cdFx0XHRpZiAoJGF0dGFjaC5sZW5ndGgpIHtcblx0XHRcdFx0Y3NzU2V0dGluZ3MudG9wID0geVdpbmRvdyA/IHNjcm9sbFRvcCA6ICRhdHRhY2guc2Nyb2xsVG9wKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoeFdpbmRvdykge1xuXHRcdFx0XHQvLyBhZGp1c3Qgd2hlbiBzY3JvbGxpbmcgaG9yaXpvbnRhbGx5IC0gZml4ZXMgaXNzdWUgIzE0M1xuXHRcdFx0XHRjc3NTZXR0aW5ncy5sZWZ0ID0gJHRhYmxlLm9mZnNldCgpLmxlZnQgLSBwYXJzZUludCgkdGFibGUuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMCkgLSAkeFNjcm9sbC5zY3JvbGxMZWZ0KCkgLSBzcGFjaW5nO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRuZXN0ZWRTdGlja3kubGVuZ3RoKSB7XG5cdFx0XHRcdGNzc1NldHRpbmdzLnRvcCA9ICggY3NzU2V0dGluZ3MudG9wIHx8IDAgKSArIHN0aWNreU9mZnNldCArIG5lc3RlZFN0aWNreVRvcDtcblx0XHRcdH1cblx0XHRcdCRzdGlja3lXcmFwXG5cdFx0XHRcdC5yZW1vdmVDbGFzcyhwcmVmaXggKyAndmlzaWJsZSAnICsgcHJlZml4ICsgJ2hpZGRlbicpXG5cdFx0XHRcdC5hZGRDbGFzcyhwcmVmaXggKyBpc1Zpc2libGUpXG5cdFx0XHRcdC5jc3MoY3NzU2V0dGluZ3MpO1xuXHRcdFx0aWYgKGlzVmlzaWJsZSAhPT0gbGFzdHN0YXRlIHx8IGV2ZW50LnR5cGUgPT09ICdyZXNpemUnKSB7XG5cdFx0XHRcdC8vIG1ha2Ugc3VyZSB0aGUgY29sdW1uIHdpZHRocyBtYXRjaFxuXHRcdFx0XHRyZXNpemVIZWFkZXIoKTtcblx0XHRcdFx0bGFzdHN0YXRlID0gaXNWaXNpYmxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmICh3by5zdGlja3lIZWFkZXJzX2FkZFJlc2l6ZUV2ZW50KSB7XG5cdFx0XHR0cy5hZGRIZWFkZXJSZXNpemVFdmVudCh0YWJsZSk7XG5cdFx0fVxuXG5cdFx0Ly8gbG9vayBmb3IgZmlsdGVyIHdpZGdldFxuXHRcdGlmICgkdGFibGUuaGFzQ2xhc3MoJ2hhc0ZpbHRlcnMnKSAmJiB3by5maWx0ZXJfY29sdW1uRmlsdGVycykge1xuXHRcdFx0Ly8gc2Nyb2xsIHRhYmxlIGludG8gdmlldyBhZnRlciBmaWx0ZXJpbmcsIGlmIHN0aWNreSBoZWFkZXIgaXMgYWN0aXZlIC0gIzQ4MlxuXHRcdFx0JHRhYmxlLmJpbmQoJ2ZpbHRlckVuZCcgKyBuYW1lc3BhY2UsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyAkKCc6Zm9jdXMnKSBuZWVkcyBqUXVlcnkgMS42K1xuXHRcdFx0XHR2YXIgJHRkID0gJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5jbG9zZXN0KCd0ZCcpLFxuXHRcdFx0XHRcdGNvbHVtbiA9ICR0ZC5wYXJlbnQoKS5jaGlsZHJlbigpLmluZGV4KCR0ZCk7XG5cdFx0XHRcdC8vIG9ubHkgc2Nyb2xsIGlmIHN0aWNreSBoZWFkZXIgaXMgYWN0aXZlXG5cdFx0XHRcdGlmICgkc3RpY2t5V3JhcC5oYXNDbGFzcyh0cy5jc3Muc3RpY2t5VmlzKSAmJiB3by5zdGlja3lIZWFkZXJzX2ZpbHRlcmVkVG9Ub3ApIHtcblx0XHRcdFx0XHQvLyBzY3JvbGwgdG8gb3JpZ2luYWwgdGFibGUgKG5vdCBzdGlja3kgY2xvbmUpXG5cdFx0XHRcdFx0d2luZG93LnNjcm9sbFRvKDAsICR0YWJsZS5wb3NpdGlvbigpLnRvcCk7XG5cdFx0XHRcdFx0Ly8gZ2l2ZSBzYW1lIGlucHV0L3NlbGVjdCBmb2N1czsgY2hlY2sgaWYgYy4kZmlsdGVycyBleGlzdHM7IGZpeGVzICM1OTRcblx0XHRcdFx0XHRpZiAoY29sdW1uID49IDAgJiYgYy4kZmlsdGVycykge1xuXHRcdFx0XHRcdFx0Yy4kZmlsdGVycy5lcShjb2x1bW4pLmZpbmQoJ2EsIHNlbGVjdCwgaW5wdXQnKS5maWx0ZXIoJzp2aXNpYmxlJykuZm9jdXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0dHMuZmlsdGVyLmJpbmRTZWFyY2goICR0YWJsZSwgJHN0aWNreUNlbGxzLmZpbmQoJy4nICsgdHMuY3NzLmZpbHRlcikgKTtcblx0XHRcdC8vIHN1cHBvcnQgaGlkZUZpbHRlcnNcblx0XHRcdGlmICh3by5maWx0ZXJfaGlkZUZpbHRlcnMpIHtcblx0XHRcdFx0dHMuZmlsdGVyLmhpZGVGaWx0ZXJzKCRzdGlja3lUYWJsZSwgYyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0JHRhYmxlLnRyaWdnZXIoJ3N0aWNreUhlYWRlcnNJbml0Jyk7XG5cblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbih0YWJsZSwgYywgd28pIHtcblx0XHR2YXIgbmFtZXNwYWNlID0gYy5uYW1lc3BhY2UgKyAnc3RpY2t5aGVhZGVycyAnO1xuXHRcdGMuJHRhYmxlXG5cdFx0XHQucmVtb3ZlQ2xhc3MoJ2hhc1N0aWNreUhlYWRlcnMnKVxuXHRcdFx0LnVuYmluZCggJ3BhZ2VyQ29tcGxldGUgZmlsdGVyRW5kICcuc3BsaXQoJyAnKS5qb2luKG5hbWVzcGFjZSkgKVxuXHRcdFx0Lm5leHQoJy4nICsgdHMuY3NzLnN0aWNreVdyYXApLnJlbW92ZSgpO1xuXHRcdGlmICh3by4kc3RpY2t5ICYmIHdvLiRzdGlja3kubGVuZ3RoKSB7IHdvLiRzdGlja3kucmVtb3ZlKCk7IH0gLy8gcmVtb3ZlIGNsb25lZCB0YWJsZVxuXHRcdC8vIGRvbid0IHVuYmluZCBpZiBhbnkgdGFibGUgb24gdGhlIHBhZ2Ugc3RpbGwgaGFzIHN0aWNreWhlYWRlcnMgYXBwbGllZFxuXHRcdGlmICghJCgnLmhhc1N0aWNreUhlYWRlcnMnKS5sZW5ndGgpIHtcblx0XHRcdCQod2luZG93KS5hZGQod28uc3RpY2t5SGVhZGVyc194U2Nyb2xsKS5hZGQod28uc3RpY2t5SGVhZGVyc195U2Nyb2xsKS5hZGQod28uc3RpY2t5SGVhZGVyc19hdHRhY2hUbylcblx0XHRcdFx0LnVuYmluZCggJ3Njcm9sbCByZXNpemUgJy5zcGxpdCgnICcpLmpvaW4obmFtZXNwYWNlKSApO1xuXHRcdH1cblx0XHR0cy5hZGRIZWFkZXJSZXNpemVFdmVudCh0YWJsZSwgZmFsc2UpO1xuXHR9XG59KTtcblxuLy8gQWRkIENvbHVtbiByZXNpemluZyB3aWRnZXRcbi8vIHRoaXMgd2lkZ2V0IHNhdmVzIHRoZSBjb2x1bW4gd2lkdGhzIGlmXG4vLyAkLnRhYmxlc29ydGVyLnN0b3JhZ2UgZnVuY3Rpb24gaXMgaW5jbHVkZWRcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqXG50cy5hZGRXaWRnZXQoe1xuXHRpZDogXCJyZXNpemFibGVcIixcblx0cHJpb3JpdHk6IDQwLFxuXHRvcHRpb25zOiB7XG5cdFx0cmVzaXphYmxlIDogdHJ1ZSxcblx0XHRyZXNpemFibGVfYWRkTGFzdENvbHVtbiA6IGZhbHNlLFxuXHRcdHJlc2l6YWJsZV93aWR0aHMgOiBbXSxcblx0XHRyZXNpemFibGVfdGhyb3R0bGUgOiBmYWxzZSAvLyBzZXQgdG8gdHJ1ZSAoNW1zKSBvciBhbnkgbnVtYmVyIDAtMTAgcmFuZ2Vcblx0fSxcblx0Zm9ybWF0OiBmdW5jdGlvbih0YWJsZSwgYywgd28pIHtcblx0XHRpZiAoYy4kdGFibGUuaGFzQ2xhc3MoJ2hhc1Jlc2l6YWJsZScpKSB7IHJldHVybjsgfVxuXHRcdGMuJHRhYmxlLmFkZENsYXNzKCdoYXNSZXNpemFibGUnKTtcblx0XHR0cy5yZXNpemFibGVSZXNldCh0YWJsZSwgdHJ1ZSk7IC8vIHNldCBkZWZhdWx0IHdpZHRoc1xuXHRcdHZhciAkcm93cywgJGNvbHVtbnMsICRjb2x1bW4sIGNvbHVtbiwgdGltZXIsXG5cdFx0XHRzdG9yZWRTaXplcyA9IHt9LFxuXHRcdFx0JHRhYmxlID0gYy4kdGFibGUsXG5cdFx0XHQkd3JhcCA9ICR0YWJsZS5wYXJlbnQoKSxcblx0XHRcdG92ZXJmbG93ID0gJHRhYmxlLnBhcmVudCgpLmNzcygnb3ZlcmZsb3cnKSA9PT0gJ2F1dG8nLFxuXHRcdFx0bW91c2VYUG9zaXRpb24gPSAwLFxuXHRcdFx0JHRhcmdldCA9IG51bGwsXG5cdFx0XHQkbmV4dCA9IG51bGwsXG5cdFx0XHRmdWxsV2lkdGggPSBNYXRoLmFicygkdGFibGUucGFyZW50KCkud2lkdGgoKSAtICR0YWJsZS53aWR0aCgpKSA8IDIwLFxuXHRcdFx0bW91c2VNb3ZlID0gZnVuY3Rpb24oZXZlbnQpe1xuXHRcdFx0XHRpZiAobW91c2VYUG9zaXRpb24gPT09IDAgfHwgISR0YXJnZXQpIHsgcmV0dXJuOyB9XG5cdFx0XHRcdC8vIHJlc2l6ZSBjb2x1bW5zXG5cdFx0XHRcdHZhciBsZWZ0RWRnZSA9IGV2ZW50LnBhZ2VYIC0gbW91c2VYUG9zaXRpb24sXG5cdFx0XHRcdFx0dGFyZ2V0V2lkdGggPSAkdGFyZ2V0LndpZHRoKCk7XG5cdFx0XHRcdCR0YXJnZXQud2lkdGgoIHRhcmdldFdpZHRoICsgbGVmdEVkZ2UgKTtcblx0XHRcdFx0aWYgKCR0YXJnZXQud2lkdGgoKSAhPT0gdGFyZ2V0V2lkdGggJiYgZnVsbFdpZHRoKSB7XG5cdFx0XHRcdFx0JG5leHQud2lkdGgoICRuZXh0LndpZHRoKCkgLSBsZWZ0RWRnZSApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKG92ZXJmbG93KSB7XG5cdFx0XHRcdFx0JHRhYmxlLndpZHRoKGZ1bmN0aW9uKGksIHcpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHcgKyBsZWZ0RWRnZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZiAoISRuZXh0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Ly8gaWYgZXhwYW5kaW5nIHJpZ2h0LW1vc3QgY29sdW1uLCBzY3JvbGwgdGhlIHdyYXBwZXJcblx0XHRcdFx0XHRcdCR3cmFwWzBdLnNjcm9sbExlZnQgPSAkdGFibGUud2lkdGgoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0bW91c2VYUG9zaXRpb24gPSBldmVudC5wYWdlWDtcblx0XHRcdH0sXG5cdFx0XHRzdG9wUmVzaXplID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0cy5zdG9yYWdlICYmICR0YXJnZXQgJiYgJG5leHQpIHtcblx0XHRcdFx0XHRzdG9yZWRTaXplcyA9IHt9O1xuXHRcdFx0XHRcdHN0b3JlZFNpemVzWyR0YXJnZXQuaW5kZXgoKV0gPSAkdGFyZ2V0LndpZHRoKCk7XG5cdFx0XHRcdFx0c3RvcmVkU2l6ZXNbJG5leHQuaW5kZXgoKV0gPSAkbmV4dC53aWR0aCgpO1xuXHRcdFx0XHRcdCR0YXJnZXQud2lkdGgoIHN0b3JlZFNpemVzWyR0YXJnZXQuaW5kZXgoKV0gKTtcblx0XHRcdFx0XHQkbmV4dC53aWR0aCggc3RvcmVkU2l6ZXNbJG5leHQuaW5kZXgoKV0gKTtcblx0XHRcdFx0XHRpZiAod28ucmVzaXphYmxlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0Ly8gc2F2ZSBhbGwgY29sdW1uIHdpZHRoc1xuXHRcdFx0XHRcdFx0dHMuc3RvcmFnZSh0YWJsZSwgJ3RhYmxlc29ydGVyLXJlc2l6YWJsZScsIGMuJGhlYWRlcnMubWFwKGZ1bmN0aW9uKCl7IHJldHVybiAkKHRoaXMpLndpZHRoKCk7IH0pLmdldCgpICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdG1vdXNlWFBvc2l0aW9uID0gMDtcblx0XHRcdFx0JHRhcmdldCA9ICRuZXh0ID0gbnVsbDtcblx0XHRcdFx0JCh3aW5kb3cpLnRyaWdnZXIoJ3Jlc2l6ZScpOyAvLyB3aWxsIHVwZGF0ZSBzdGlja3lIZWFkZXJzLCBqdXN0IGluIGNhc2Vcblx0XHRcdH07XG5cdFx0c3RvcmVkU2l6ZXMgPSAodHMuc3RvcmFnZSAmJiB3by5yZXNpemFibGUgIT09IGZhbHNlKSA/IHRzLnN0b3JhZ2UodGFibGUsICd0YWJsZXNvcnRlci1yZXNpemFibGUnKSA6IHt9O1xuXHRcdC8vIHByb2Nlc3Mgb25seSBpZiB0YWJsZSBJRCBvciB1cmwgbWF0Y2hcblx0XHRpZiAoc3RvcmVkU2l6ZXMpIHtcblx0XHRcdGZvciAoY29sdW1uIGluIHN0b3JlZFNpemVzKSB7XG5cdFx0XHRcdGlmICghaXNOYU4oY29sdW1uKSAmJiBjb2x1bW4gPCBjLiRoZWFkZXJzLmxlbmd0aCkge1xuXHRcdFx0XHRcdGMuJGhlYWRlcnMuZXEoY29sdW1uKS53aWR0aChzdG9yZWRTaXplc1tjb2x1bW5dKTsgLy8gc2V0IHNhdmVkIHJlc2l6YWJsZSB3aWR0aHNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQkcm93cyA9ICR0YWJsZS5jaGlsZHJlbigndGhlYWQ6Zmlyc3QnKS5jaGlsZHJlbigndHInKTtcblx0XHQvLyBhZGQgcmVzaXphYmxlLWZhbHNlIGNsYXNzIG5hbWUgdG8gaGVhZGVycyAoYWNyb3NzIHJvd3MgYXMgbmVlZGVkKVxuXHRcdCRyb3dzLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjYW5SZXNpemUsXG5cdFx0XHRcdCRjb2x1bW4gPSAkKHRoaXMpO1xuXHRcdFx0Y29sdW1uID0gJGNvbHVtbi5hdHRyKCdkYXRhLWNvbHVtbicpO1xuXHRcdFx0Y2FuUmVzaXplID0gdHMuZ2V0RGF0YSggJGNvbHVtbiwgdHMuZ2V0Q29sdW1uRGF0YSggdGFibGUsIGMuaGVhZGVycywgY29sdW1uICksICdyZXNpemFibGUnKSA9PT0gXCJmYWxzZVwiO1xuXHRcdFx0JHJvd3MuY2hpbGRyZW4oKS5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyBjb2x1bW4gKyAnXCJdJylbY2FuUmVzaXplID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKCdyZXNpemFibGUtZmFsc2UnKTtcblx0XHR9KTtcblx0XHQvLyBhZGQgd3JhcHBlciBpbnNpZGUgZWFjaCBjZWxsIHRvIGFsbG93IGZvciBwb3NpdGlvbmluZyBvZiB0aGUgcmVzaXphYmxlIHRhcmdldCBibG9ja1xuXHRcdCRyb3dzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHQkY29sdW1uID0gJCh0aGlzKS5jaGlsZHJlbigpLm5vdCgnLnJlc2l6YWJsZS1mYWxzZScpO1xuXHRcdFx0aWYgKCEkKHRoaXMpLmZpbmQoJy4nICsgdHMuY3NzLndyYXBwZXIpLmxlbmd0aCkge1xuXHRcdFx0XHQvLyBGaXJlZm94IG5lZWRzIHRoaXMgaW5uZXIgZGl2IHRvIHBvc2l0aW9uIHRoZSByZXNpemVyIGNvcnJlY3RseVxuXHRcdFx0XHQkY29sdW1uLndyYXBJbm5lcignPGRpdiBjbGFzcz1cIicgKyB0cy5jc3Mud3JhcHBlciArICdcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDoxMDAlO3dpZHRoOjEwMCVcIj48L2Rpdj4nKTtcblx0XHRcdH1cblx0XHRcdC8vIGRvbid0IGluY2x1ZGUgdGhlIGxhc3QgY29sdW1uIG9mIHRoZSByb3dcblx0XHRcdGlmICghd28ucmVzaXphYmxlX2FkZExhc3RDb2x1bW4pIHsgJGNvbHVtbiA9ICRjb2x1bW4uc2xpY2UoMCwtMSk7IH1cblx0XHRcdCRjb2x1bW5zID0gJGNvbHVtbnMgPyAkY29sdW1ucy5hZGQoJGNvbHVtbikgOiAkY29sdW1uO1xuXHRcdH0pO1xuXHRcdCRjb2x1bW5zXG5cdFx0LmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgJGNvbHVtbiA9ICQodGhpcyksXG5cdFx0XHRcdHBhZGRpbmcgPSBwYXJzZUludCgkY29sdW1uLmNzcygncGFkZGluZy1yaWdodCcpLCAxMCkgKyAxMDsgLy8gMTAgaXMgMS8yIG9mIHRoZSAyMHB4IHdpZGUgcmVzaXplclxuXHRcdFx0JGNvbHVtblxuXHRcdFx0XHQuZmluZCgnLicgKyB0cy5jc3Mud3JhcHBlcilcblx0XHRcdFx0LmFwcGVuZCgnPGRpdiBjbGFzcz1cIicgKyB0cy5jc3MucmVzaXplciArICdcIiBzdHlsZT1cImN1cnNvcjp3LXJlc2l6ZTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7cmlnaHQ6LScgK1xuXHRcdFx0XHRcdHBhZGRpbmcgKyAncHg7dG9wOjA7aGVpZ2h0OjEwMCU7d2lkdGg6MjBweDtcIj48L2Rpdj4nKTtcblx0XHR9KVxuXHRcdC5maW5kKCcuJyArIHRzLmNzcy5yZXNpemVyKVxuXHRcdC5iaW5kKCdtb3VzZWRvd24nLCBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0Ly8gc2F2ZSBoZWFkZXIgY2VsbCBhbmQgbW91c2UgcG9zaXRpb25cblx0XHRcdCR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgndGgnKTtcblx0XHRcdHZhciAkaGVhZGVyID0gYy4kaGVhZGVycy5maWx0ZXIoJ1tkYXRhLWNvbHVtbj1cIicgKyAkdGFyZ2V0LmF0dHIoJ2RhdGEtY29sdW1uJykgKyAnXCJdJyk7XG5cdFx0XHRpZiAoJGhlYWRlci5sZW5ndGggPiAxKSB7ICR0YXJnZXQgPSAkdGFyZ2V0LmFkZCgkaGVhZGVyKTsgfVxuXHRcdFx0Ly8gaWYgdGFibGUgaXMgbm90IGFzIHdpZGUgYXMgaXQncyBwYXJlbnQsIHRoZW4gcmVzaXplIHRoZSB0YWJsZVxuXHRcdFx0JG5leHQgPSBldmVudC5zaGlmdEtleSA/ICR0YXJnZXQucGFyZW50KCkuZmluZCgndGgnKS5ub3QoJy5yZXNpemFibGUtZmFsc2UnKS5maWx0ZXIoJzpsYXN0JykgOiAkdGFyZ2V0Lm5leHRBbGwoJzpub3QoLnJlc2l6YWJsZS1mYWxzZSknKS5lcSgwKTtcblx0XHRcdG1vdXNlWFBvc2l0aW9uID0gZXZlbnQucGFnZVg7XG5cdFx0fSk7XG5cdFx0JChkb2N1bWVudClcblx0XHQuYmluZCgnbW91c2Vtb3ZlLnRzcmVzaXplJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdC8vIGlnbm9yZSBtb3VzZW1vdmUgaWYgbm8gbW91c2Vkb3duXG5cdFx0XHRpZiAobW91c2VYUG9zaXRpb24gPT09IDAgfHwgISR0YXJnZXQpIHsgcmV0dXJuOyB9XG5cdFx0XHRpZiAod28ucmVzaXphYmxlX3Rocm90dGxlKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lcik7XG5cdFx0XHRcdHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdG1vdXNlTW92ZShldmVudCk7XG5cdFx0XHRcdH0sIGlzTmFOKHdvLnJlc2l6YWJsZV90aHJvdHRsZSkgPyA1IDogd28ucmVzaXphYmxlX3Rocm90dGxlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtb3VzZU1vdmUoZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH0pXG5cdFx0LmJpbmQoJ21vdXNldXAudHNyZXNpemUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHN0b3BSZXNpemUoKTtcblx0XHR9KTtcblxuXHRcdC8vIHJpZ2h0IGNsaWNrIHRvIHJlc2V0IGNvbHVtbnMgdG8gZGVmYXVsdCB3aWR0aHNcblx0XHQkdGFibGUuZmluZCgndGhlYWQ6Zmlyc3QnKS5iaW5kKCdjb250ZXh0bWVudS50c3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dHMucmVzaXphYmxlUmVzZXQodGFibGUpO1xuXHRcdFx0Ly8gJC5pc0VtcHR5T2JqZWN0KCkgbmVlZHMgalF1ZXJ5IDEuNCs7IGFsbG93IHJpZ2h0IGNsaWNrIGlmIGFscmVhZHkgcmVzZXRcblx0XHRcdHZhciBhbGxvd0NsaWNrID0gJC5pc0VtcHR5T2JqZWN0ID8gJC5pc0VtcHR5T2JqZWN0KHN0b3JlZFNpemVzKSA6IHRydWU7XG5cdFx0XHRzdG9yZWRTaXplcyA9IHt9O1xuXHRcdFx0cmV0dXJuIGFsbG93Q2xpY2s7XG5cdFx0fSk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24odGFibGUsIGMpIHtcblx0XHRjLiR0YWJsZVxuXHRcdFx0LnJlbW92ZUNsYXNzKCdoYXNSZXNpemFibGUnKVxuXHRcdFx0LmNoaWxkcmVuKCd0aGVhZCcpXG5cdFx0XHQudW5iaW5kKCdtb3VzZXVwLnRzcmVzaXplIG1vdXNlbGVhdmUudHNyZXNpemUgY29udGV4dG1lbnUudHNyZXNpemUnKVxuXHRcdFx0LmNoaWxkcmVuKCd0cicpLmNoaWxkcmVuKClcblx0XHRcdC51bmJpbmQoJ21vdXNlbW92ZS50c3Jlc2l6ZSBtb3VzZXVwLnRzcmVzaXplJylcblx0XHRcdC8vIGRvbid0IHJlbW92ZSBcInRhYmxlc29ydGVyLXdyYXBwZXJcIiBhcyB1aXRoZW1lIHVzZXMgaXQgdG9vXG5cdFx0XHQuZmluZCgnLicgKyB0cy5jc3MucmVzaXplcikucmVtb3ZlKCk7XG5cdFx0dHMucmVzaXphYmxlUmVzZXQodGFibGUpO1xuXHR9XG59KTtcbnRzLnJlc2l6YWJsZVJlc2V0ID0gZnVuY3Rpb24odGFibGUsIG5vc2F2ZSkge1xuXHQkKHRhYmxlKS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0dmFyICR0LFxuXHRcdFx0YyA9IHRoaXMuY29uZmlnLFxuXHRcdFx0d28gPSBjICYmIGMud2lkZ2V0T3B0aW9ucztcblx0XHRpZiAodGFibGUgJiYgYykge1xuXHRcdFx0Yy4kaGVhZGVycy5lYWNoKGZ1bmN0aW9uKGkpe1xuXHRcdFx0XHQkdCA9ICQodGhpcyk7XG5cdFx0XHRcdGlmICh3by5yZXNpemFibGVfd2lkdGhzW2ldKSB7XG5cdFx0XHRcdFx0JHQuY3NzKCd3aWR0aCcsIHdvLnJlc2l6YWJsZV93aWR0aHNbaV0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCEkdC5oYXNDbGFzcygncmVzaXphYmxlLWZhbHNlJykpIHtcblx0XHRcdFx0XHQvLyBkb24ndCBjbGVhciB0aGUgd2lkdGggb2YgYW55IGNvbHVtbiB0aGF0IGlzIG5vdCByZXNpemFibGVcblx0XHRcdFx0XHQkdC5jc3MoJ3dpZHRoJywnJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0aWYgKHRzLnN0b3JhZ2UgJiYgIW5vc2F2ZSkgeyB0cy5zdG9yYWdlKHRoaXMsICd0YWJsZXNvcnRlci1yZXNpemFibGUnLCB7fSk7IH1cblx0XHR9XG5cdH0pO1xufTtcblxuLy8gU2F2ZSB0YWJsZSBzb3J0IHdpZGdldFxuLy8gdGhpcyB3aWRnZXQgc2F2ZXMgdGhlIGxhc3Qgc29ydCBvbmx5IGlmIHRoZVxuLy8gc2F2ZVNvcnQgd2lkZ2V0IG9wdGlvbiBpcyB0cnVlIEFORCB0aGVcbi8vICQudGFibGVzb3J0ZXIuc3RvcmFnZSBmdW5jdGlvbiBpcyBpbmNsdWRlZFxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKipcbnRzLmFkZFdpZGdldCh7XG5cdGlkOiAnc2F2ZVNvcnQnLFxuXHRwcmlvcml0eTogMjAsXG5cdG9wdGlvbnM6IHtcblx0XHRzYXZlU29ydCA6IHRydWVcblx0fSxcblx0aW5pdDogZnVuY3Rpb24odGFibGUsIHRoaXNXaWRnZXQsIGMsIHdvKSB7XG5cdFx0Ly8gcnVuIHdpZGdldCBmb3JtYXQgYmVmb3JlIGFsbCBvdGhlciB3aWRnZXRzIGFyZSBhcHBsaWVkIHRvIHRoZSB0YWJsZVxuXHRcdHRoaXNXaWRnZXQuZm9ybWF0KHRhYmxlLCBjLCB3bywgdHJ1ZSk7XG5cdH0sXG5cdGZvcm1hdDogZnVuY3Rpb24odGFibGUsIGMsIHdvLCBpbml0KSB7XG5cdFx0dmFyIHN0b3JlZCwgdGltZSxcblx0XHRcdCR0YWJsZSA9IGMuJHRhYmxlLFxuXHRcdFx0c2F2ZVNvcnQgPSB3by5zYXZlU29ydCAhPT0gZmFsc2UsIC8vIG1ha2Ugc2F2ZVNvcnQgYWN0aXZlL2luYWN0aXZlOyBkZWZhdWx0IHRvIHRydWVcblx0XHRcdHNvcnRMaXN0ID0geyBcInNvcnRMaXN0XCIgOiBjLnNvcnRMaXN0IH07XG5cdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdHRpbWUgPSBuZXcgRGF0ZSgpO1xuXHRcdH1cblx0XHRpZiAoJHRhYmxlLmhhc0NsYXNzKCdoYXNTYXZlU29ydCcpKSB7XG5cdFx0XHRpZiAoc2F2ZVNvcnQgJiYgdGFibGUuaGFzSW5pdGlhbGl6ZWQgJiYgdHMuc3RvcmFnZSkge1xuXHRcdFx0XHR0cy5zdG9yYWdlKCB0YWJsZSwgJ3RhYmxlc29ydGVyLXNhdmVzb3J0Jywgc29ydExpc3QgKTtcblx0XHRcdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdFx0XHR0cy5iZW5jaG1hcmsoJ3NhdmVTb3J0IHdpZGdldDogU2F2aW5nIGxhc3Qgc29ydDogJyArIGMuc29ydExpc3QsIHRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHNldCB0YWJsZSBzb3J0IG9uIGluaXRpYWwgcnVuIG9mIHRoZSB3aWRnZXRcblx0XHRcdCR0YWJsZS5hZGRDbGFzcygnaGFzU2F2ZVNvcnQnKTtcblx0XHRcdHNvcnRMaXN0ID0gJyc7XG5cdFx0XHQvLyBnZXQgZGF0YVxuXHRcdFx0aWYgKHRzLnN0b3JhZ2UpIHtcblx0XHRcdFx0c3RvcmVkID0gdHMuc3RvcmFnZSggdGFibGUsICd0YWJsZXNvcnRlci1zYXZlc29ydCcgKTtcblx0XHRcdFx0c29ydExpc3QgPSAoc3RvcmVkICYmIHN0b3JlZC5oYXNPd25Qcm9wZXJ0eSgnc29ydExpc3QnKSAmJiAkLmlzQXJyYXkoc3RvcmVkLnNvcnRMaXN0KSkgPyBzdG9yZWQuc29ydExpc3QgOiAnJztcblx0XHRcdFx0aWYgKGMuZGVidWcpIHtcblx0XHRcdFx0XHR0cy5iZW5jaG1hcmsoJ3NhdmVTb3J0OiBMYXN0IHNvcnQgbG9hZGVkOiBcIicgKyBzb3J0TGlzdCArICdcIicsIHRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCR0YWJsZS5iaW5kKCdzYXZlU29ydFJlc2V0JywgZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0cy5zdG9yYWdlKCB0YWJsZSwgJ3RhYmxlc29ydGVyLXNhdmVzb3J0JywgJycgKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBpbml0IGlzIHRydWUgd2hlbiB3aWRnZXQgaW5pdCBpcyBydW4sIHRoaXMgd2lsbCBydW4gdGhpcyB3aWRnZXQgYmVmb3JlIGFsbCBvdGhlciB3aWRnZXRzIGhhdmUgaW5pdGlhbGl6ZWRcblx0XHRcdC8vIHRoaXMgbWV0aG9kIGFsbG93cyB1c2luZyB0aGlzIHdpZGdldCBpbiB0aGUgb3JpZ2luYWwgdGFibGVzb3J0ZXIgcGx1Z2luOyBidXQgdGhlbiBpdCB3aWxsIHJ1biBhbGwgd2lkZ2V0cyB0d2ljZS5cblx0XHRcdGlmIChpbml0ICYmIHNvcnRMaXN0ICYmIHNvcnRMaXN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Yy5zb3J0TGlzdCA9IHNvcnRMaXN0O1xuXHRcdFx0fSBlbHNlIGlmICh0YWJsZS5oYXNJbml0aWFsaXplZCAmJiBzb3J0TGlzdCAmJiBzb3J0TGlzdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdC8vIHVwZGF0ZSBzb3J0IGNoYW5nZVxuXHRcdFx0XHQkdGFibGUudHJpZ2dlcignc29ydG9uJywgW3NvcnRMaXN0XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKHRhYmxlKSB7XG5cdFx0Ly8gY2xlYXIgc3RvcmFnZVxuXHRcdGlmICh0cy5zdG9yYWdlKSB7IHRzLnN0b3JhZ2UoIHRhYmxlLCAndGFibGVzb3J0ZXItc2F2ZXNvcnQnLCAnJyApOyB9XG5cdH1cbn0pO1xuXG59KShqUXVlcnksIHdpbmRvdyk7XG4iLCIoZnVuY3Rpb24gKCQpIHtcblxuICAgICQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCgnI2VkaXQtZmllbGQtdmFsZ2hhbGxhLW1haWwtYXR0YWNobWVudHMtdW5kLTAtdXBsb2FkJyk7XG4gICAgICAgIGlucHV0LmFkZENsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAkKCcjZWRpdC1maWVsZC12YWxnaGFsbGEtbWFpbC1hdHRhY2htZW50cy11bmQtMC11cGxvYWQtYnV0dG9uJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAkKFwiOmZpbGVcIikuZmlsZXN0eWxlKHtidXR0b25UZXh0OiBcIlbDpmxnIGZpbFwifSk7XG5cbiAgICAgICAgJChcIjpmaWxlXCIpLmZpbGVzdHlsZSh7cGxhY2Vob2xkZXI6IFwiSW5nZW4gZmlsXCJ9KTtcblxuICAgIH0pO1xuXG59KShqUXVlcnkpO1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBEcnVwYWwuYmVoYXZpb3JzLmluc2VydEJ1dHRvbiA9IHtcbiAgICAgICAgYXR0YWNoOiBmdW5jdGlvbiAoY29udGV4dCwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBlbmRwb2ludCA9ICcvdmFsZ2hhbGxhL3JlcG9ydCc7XG4gICAgICAgICAgICB2YXIgJHdyYXBwZXIgPSAkKCcuZnJvbnQgLmJyZWFkY3J1bWJfX3dyYXBwZXInKTtcbiAgICAgICAgICAgIHZhciAkYnJlYWRjcnVtYiA9ICQoJy5icmVhZGNydW1iJyk7XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSB3cmFwcGVyLCBzdG9wIHdoYXQgd2UgYXJlIGRvaW5nIVxuICAgICAgICAgICAgaWYgKCR3cmFwcGVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBEb24ndCBwcm9jZWVkIGlmIGEgYnJlYWRjcnVtYiBpcyBwcmVzZW50LiBUaGlzIHdpbGwgYnJlYWsgc3R5bGluZy5cbiAgICAgICAgICAgIGlmICgkYnJlYWRjcnVtYi5sZW5ndGggPiAwKSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIFBERiBkb3dubG9hZCBsaW5rLlxuICAgICAgICAgICAgdmFyICRidXR0b24gPSAkKCc8YS8+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignaHJlZicsIGVuZHBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2J0biBidG4tc2Vjb25kYXJ5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgkKCc8aS8+JykuYWRkQ2xhc3MoJ2ZhIGZhLWZpbGUtcGRmLW8nKSArICcgJyArIERydXBhbC50KCdHZW5lcsOpciBQREYgcmFwcG9ydCcpKTtcblxuICAgICAgICAgICAgLy8gSW5zZXJ0cyBhIGJ1dHRvbiBpbnRvIHRoZSB3cmFwcGVyLlxuICAgICAgICAgICAgJHdyYXBwZXIuaHRtbCgkYnV0dG9uKTtcbiAgICAgICAgfVxuICAgIH07XG59KShqUXVlcnkpO1xuIiwiLypcbiAqIGJvb3RzdHJhcC1maWxlc3R5bGVcbiAqIGRvYzogaHR0cDovL21hcmt1c3NsaW1hLmdpdGh1Yi5pby9ib290c3RyYXAtZmlsZXN0eWxlL1xuICogZ2l0aHViOiBodHRwczovL2dpdGh1Yi5jb20vbWFya3Vzc2xpbWEvYm9vdHN0cmFwLWZpbGVzdHlsZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBNYXJrdXMgVmluaWNpdXMgZGEgU2lsdmEgTGltYVxuICogVmVyc2lvbiAxLjIuMVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oJCkge1widXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIG5leHRJZCA9IDA7XG5cblx0dmFyIEZpbGVzdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUgPSBbXTtcblx0XHR0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcblx0fTtcblxuXHRGaWxlc3R5bGUucHJvdG90eXBlID0ge1xuXHRcdGNsZWFyIDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRlbGVtZW50LnZhbCgnJyk7XG5cdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJzp0ZXh0JykudmFsKCcnKTtcblx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmJhZGdlJykucmVtb3ZlKCk7XG5cdFx0fSxcblxuXHRcdGRlc3Ryb3kgOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cignc3R5bGUnKS5yZW1vdmVEYXRhKCdmaWxlc3R5bGUnKTtcblx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUucmVtb3ZlKCk7XG5cdFx0fSxcblxuXHRcdGRpc2FibGVkIDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignZGlzYWJsZWQnLCAndHJ1ZScpO1xuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnbGFiZWwnKS5hdHRyKCdkaXNhYmxlZCcsICd0cnVlJyk7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0aWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCkge1xuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnQucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcblx0XHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2xhYmVsJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5kaXNhYmxlZDtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YnV0dG9uQmVmb3JlIDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRpZiAoIXRoaXMub3B0aW9ucy5idXR0b25CZWZvcmUpIHtcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuYnV0dG9uQmVmb3JlID0gdHJ1ZTtcblx0XHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmlucHV0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy5jb25zdHJ1Y3RvcigpO1xuXHRcdFx0XHRcdFx0dGhpcy5wdXNoTmFtZUZpbGVzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmJ1dHRvbkJlZm9yZSkge1xuXHRcdFx0XHRcdHRoaXMub3B0aW9ucy5idXR0b25CZWZvcmUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmlucHV0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy5jb25zdHJ1Y3RvcigpO1xuXHRcdFx0XHRcdFx0dGhpcy5wdXNoTmFtZUZpbGVzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmJ1dHRvbkJlZm9yZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0aWNvbiA6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUgPT09IHRydWUpIHtcblx0XHRcdFx0aWYgKCF0aGlzLm9wdGlvbnMuaWNvbikge1xuXHRcdFx0XHRcdHRoaXMub3B0aW9ucy5pY29uID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2xhYmVsJykucHJlcGVuZCh0aGlzLmh0bWxJY29uKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmljb24pIHtcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuaWNvbiA9IGZhbHNlO1xuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmljb24tc3Bhbi1maWxlc3R5bGUnKS5yZW1vdmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5pY29uO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XG5cdFx0aW5wdXQgOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKHZhbHVlID09PSB0cnVlKSB7XG5cdFx0XHRcdGlmICghdGhpcy5vcHRpb25zLmlucHV0KSB7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmlucHV0ID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICh0aGlzLm9wdGlvbnMuYnV0dG9uQmVmb3JlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmFwcGVuZCh0aGlzLmh0bWxJbnB1dCgpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy4kZWxlbWVudEZpbGVzdHlsZS5wcmVwZW5kKHRoaXMuaHRtbElucHV0KCkpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmJhZGdlJykucmVtb3ZlKCk7XG5cblx0XHRcdFx0XHR0aGlzLnB1c2hOYW1lRmlsZXMoKTtcblxuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmdyb3VwLXNwYW4tZmlsZXN0eWxlJykuYWRkQ2xhc3MoJ2lucHV0LWdyb3VwLWJ0bicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRpZiAodGhpcy5vcHRpb25zLmlucHV0KSB7XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmlucHV0ID0gZmFsc2U7XG5cdFx0XHRcdFx0dGhpcy4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCc6dGV4dCcpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdHZhciBmaWxlcyA9IHRoaXMucHVzaE5hbWVGaWxlcygpO1xuXHRcdFx0XHRcdGlmIChmaWxlcy5sZW5ndGggPiAwICYmIHRoaXMub3B0aW9ucy5iYWRnZSkge1xuXHRcdFx0XHRcdFx0dGhpcy4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCdsYWJlbCcpLmFwcGVuZCgnIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj4nICsgZmlsZXMubGVuZ3RoICsgJzwvc3Bhbj4nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCcuZ3JvdXAtc3Bhbi1maWxlc3R5bGUnKS5yZW1vdmVDbGFzcygnaW5wdXQtZ3JvdXAtYnRuJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuaW5wdXQ7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNpemUgOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dmFyIGJ0biA9IHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnbGFiZWwnKSwgaW5wdXQgPSB0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2lucHV0Jyk7XG5cblx0XHRcdFx0YnRuLnJlbW92ZUNsYXNzKCdidG4tbGcgYnRuLXNtJyk7XG5cdFx0XHRcdGlucHV0LnJlbW92ZUNsYXNzKCdpbnB1dC1sZyBpbnB1dC1zbScpO1xuXHRcdFx0XHRpZiAodmFsdWUgIT0gJ25yJykge1xuXHRcdFx0XHRcdGJ0bi5hZGRDbGFzcygnYnRuLScgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0aW5wdXQuYWRkQ2xhc3MoJ2lucHV0LScgKyB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuc2l6ZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdFxuXHRcdHBsYWNlaG9sZGVyIDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlciA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2lucHV0JykuYXR0cigncGxhY2Vob2xkZXInLCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyO1xuXHRcdFx0fVxuXHRcdH0sXHRcdFxuXG5cdFx0YnV0dG9uVGV4dCA6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLm9wdGlvbnMuYnV0dG9uVGV4dCA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2xhYmVsIC5idXR0b25UZXh0JykuaHRtbCh0aGlzLm9wdGlvbnMuYnV0dG9uVGV4dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmJ1dHRvblRleHQ7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcblx0XHRidXR0b25OYW1lIDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5idXR0b25OYW1lID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnbGFiZWwnKS5hdHRyKHtcblx0XHRcdFx0XHQnY2xhc3MnIDogJ2J0biAnICsgdGhpcy5vcHRpb25zLmJ1dHRvbk5hbWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmJ1dHRvbk5hbWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGljb25OYW1lIDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmljb24tc3Bhbi1maWxlc3R5bGUnKS5hdHRyKHtcblx0XHRcdFx0XHQnY2xhc3MnIDogJ2ljb24tc3Bhbi1maWxlc3R5bGUgJyArIHRoaXMub3B0aW9ucy5pY29uTmFtZVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuaWNvbk5hbWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGh0bWxJY29uIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAodGhpcy5vcHRpb25zLmljb24pIHtcblx0XHRcdFx0cmV0dXJuICc8c3BhbiBjbGFzcz1cImljb24tc3Bhbi1maWxlc3R5bGUgJyArIHRoaXMub3B0aW9ucy5pY29uTmFtZSArICdcIj48L3NwYW4+ICc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGh0bWxJbnB1dCA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5pbnB1dCkge1xuXHRcdFx0XHRyZXR1cm4gJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sICcgKyAodGhpcy5vcHRpb25zLnNpemUgPT0gJ25yJyA/ICcnIDogJ2lucHV0LScgKyB0aGlzLm9wdGlvbnMuc2l6ZSkgKyAnXCIgcGxhY2Vob2xkZXI9XCInKyB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXIgKydcIiBkaXNhYmxlZD4gJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gcHV0cyB0aGUgbmFtZSBvZiB0aGUgaW5wdXQgZmlsZXNcblx0XHQvLyByZXR1cm4gZmlsZXNcblx0XHRwdXNoTmFtZUZpbGVzIDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY29udGVudCA9ICcnLCBmaWxlcyA9IFtdO1xuXHRcdFx0aWYgKHRoaXMuJGVsZW1lbnRbMF0uZmlsZXMgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRmaWxlc1swXSA9IHtcblx0XHRcdFx0XHQnbmFtZScgOiB0aGlzLiRlbGVtZW50WzBdICYmIHRoaXMuJGVsZW1lbnRbMF0udmFsdWVcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpbGVzID0gdGhpcy4kZWxlbWVudFswXS5maWxlcztcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb250ZW50ICs9IGZpbGVzW2ldLm5hbWUuc3BsaXQoXCJcXFxcXCIpLnBvcCgpICsgJywgJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbnRlbnQgIT09ICcnKSB7XG5cdFx0XHRcdHRoaXMuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnOnRleHQnKS52YWwoY29udGVudC5yZXBsYWNlKC9cXCwgJC9nLCAnJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCc6dGV4dCcpLnZhbCgnJyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBmaWxlcztcblx0XHR9LFxuXG5cdFx0Y29uc3RydWN0b3IgOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBfc2VsZiA9IHRoaXMsIFxuXHRcdFx0XHRodG1sID0gJycsIFxuXHRcdFx0XHRpZCA9IF9zZWxmLiRlbGVtZW50LmF0dHIoJ2lkJyksIFxuXHRcdFx0XHRmaWxlcyA9IFtdLCBcblx0XHRcdFx0YnRuID0gJycsIFxuXHRcdFx0XHQkbGFiZWw7XG5cblx0XHRcdGlmIChpZCA9PT0gJycgfHwgIWlkKSB7XG5cdFx0XHRcdGlkID0gJ2ZpbGVzdHlsZS0nICsgbmV4dElkO1xuXHRcdFx0XHRfc2VsZi4kZWxlbWVudC5hdHRyKHtcblx0XHRcdFx0XHQnaWQnIDogaWRcblx0XHRcdFx0fSk7XG4gICAgICAgICAgICAgICAgbmV4dElkKys7XG5cdFx0XHR9XG5cblx0XHRcdGJ0biA9ICc8c3BhbiBjbGFzcz1cImdyb3VwLXNwYW4tZmlsZXN0eWxlICcgKyAoX3NlbGYub3B0aW9ucy5pbnB1dCA/ICdpbnB1dC1ncm91cC1idG4nIDogJycpICsgJ1wiPicgKyBcblx0XHRcdCAgJzxsYWJlbCBmb3I9XCInICsgaWQgKyAnXCIgY2xhc3M9XCJidG4gJyArIF9zZWxmLm9wdGlvbnMuYnV0dG9uTmFtZSArICcgJyArIFxuXHRcdFx0KF9zZWxmLm9wdGlvbnMuc2l6ZSA9PSAnbnInID8gJycgOiAnYnRuLScgKyBfc2VsZi5vcHRpb25zLnNpemUpICsgJ1wiICcgKyBcblx0XHRcdChfc2VsZi5vcHRpb25zLmRpc2FibGVkID8gJ2Rpc2FibGVkPVwidHJ1ZVwiJyA6ICcnKSArICc+JyArIFxuXHRcdFx0X3NlbGYuaHRtbEljb24oKSArICc8c3BhbiBjbGFzcz1cImJ1dHRvblRleHRcIj4nICsgX3NlbGYub3B0aW9ucy5idXR0b25UZXh0ICsgJzwvc3Bhbj4nICsgXG5cdFx0XHQgICc8L2xhYmVsPicgKyBcblx0XHRcdCAgJzwvc3Bhbj4nO1xuXHRcdFx0XG5cdFx0XHRodG1sID0gX3NlbGYub3B0aW9ucy5idXR0b25CZWZvcmUgPyBidG4gKyBfc2VsZi5odG1sSW5wdXQoKSA6IF9zZWxmLmh0bWxJbnB1dCgpICsgYnRuO1xuXHRcdFx0XG5cdFx0XHRfc2VsZi4kZWxlbWVudEZpbGVzdHlsZSA9ICQoJzxkaXYgY2xhc3M9XCJib290c3RyYXAtZmlsZXN0eWxlIGlucHV0LWdyb3VwXCI+JyArIGh0bWwgKyAnPC9kaXY+Jyk7XG5cdFx0XHRfc2VsZi4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCcuZ3JvdXAtc3Bhbi1maWxlc3R5bGUnKS5hdHRyKCd0YWJpbmRleCcsIFwiMFwiKS5rZXlwcmVzcyhmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoZS5rZXlDb2RlID09PSAxMyB8fCBlLmNoYXJDb2RlID09PSAzMikge1xuXHRcdFx0XHRfc2VsZi4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCdsYWJlbCcpLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gaGlkZGluZyBpbnB1dCBmaWxlIGFuZCBhZGQgZmlsZXN0eWxlXG5cdFx0XHRfc2VsZi4kZWxlbWVudC5jc3Moe1xuXHRcdFx0XHQncG9zaXRpb24nIDogJ2Fic29sdXRlJyxcblx0XHRcdFx0J2NsaXAnIDogJ3JlY3QoMHB4IDBweCAwcHggMHB4KScgLy8gdXNpbmcgMHB4IGZvciB3b3JrIGluIElFOFxuXHRcdFx0fSkuYXR0cigndGFiaW5kZXgnLCBcIi0xXCIpLmFmdGVyKF9zZWxmLiRlbGVtZW50RmlsZXN0eWxlKTtcblxuXHRcdFx0aWYgKF9zZWxmLm9wdGlvbnMuZGlzYWJsZWQpIHtcblx0XHRcdFx0X3NlbGYuJGVsZW1lbnQuYXR0cignZGlzYWJsZWQnLCAndHJ1ZScpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBHZXR0aW5nIGlucHV0IGZpbGUgdmFsdWVcblx0XHRcdF9zZWxmLiRlbGVtZW50LmNoYW5nZShmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGZpbGVzID0gX3NlbGYucHVzaE5hbWVGaWxlcygpO1xuXG5cdFx0XHRcdGlmIChfc2VsZi5vcHRpb25zLmlucHV0ID09IGZhbHNlICYmIF9zZWxmLm9wdGlvbnMuYmFkZ2UpIHtcblx0XHRcdFx0XHRpZiAoX3NlbGYuJGVsZW1lbnRGaWxlc3R5bGUuZmluZCgnLmJhZGdlJykubGVuZ3RoID09IDApIHtcblx0XHRcdFx0XHRcdF9zZWxmLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJ2xhYmVsJykuYXBwZW5kKCcgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPicgKyBmaWxlcy5sZW5ndGggKyAnPC9zcGFuPicpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZmlsZXMubGVuZ3RoID09IDApIHtcblx0XHRcdFx0XHRcdF9zZWxmLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJy5iYWRnZScpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRfc2VsZi4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCcuYmFkZ2UnKS5odG1sKGZpbGVzLmxlbmd0aCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9zZWxmLiRlbGVtZW50RmlsZXN0eWxlLmZpbmQoJy5iYWRnZScpLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYnJvd3NlciBpcyBGaXJlZm94XG5cdFx0XHRpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuc2VhcmNoKC9maXJlZm94L2kpID4gLTEpIHtcblx0XHRcdFx0Ly8gU2ltdWxhdGluZyBjaG9vc2UgZmlsZSBmb3IgZmlyZWZveFxuXHRcdFx0XHRfc2VsZi4kZWxlbWVudEZpbGVzdHlsZS5maW5kKCdsYWJlbCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdF9zZWxmLiRlbGVtZW50LmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dmFyIG9sZCA9ICQuZm4uZmlsZXN0eWxlO1xuXG5cdCQuZm4uZmlsZXN0eWxlID0gZnVuY3Rpb24ob3B0aW9uLCB2YWx1ZSkge1xuXHRcdHZhciBnZXQgPSAnJywgZWxlbWVudCA9IHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICgkKHRoaXMpLmF0dHIoJ3R5cGUnKSA9PT0gJ2ZpbGUnKSB7XG5cdFx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksIGRhdGEgPSAkdGhpcy5kYXRhKCdmaWxlc3R5bGUnKSwgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLmZpbGVzdHlsZS5kZWZhdWx0cywgb3B0aW9uLCB0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiBvcHRpb24pO1xuXG5cdFx0XHRcdGlmICghZGF0YSkge1xuXHRcdFx0XHRcdCR0aGlzLmRhdGEoJ2ZpbGVzdHlsZScsICggZGF0YSA9IG5ldyBGaWxlc3R5bGUodGhpcywgb3B0aW9ucykpKTtcblx0XHRcdFx0XHRkYXRhLmNvbnN0cnVjdG9yKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0Z2V0ID0gZGF0YVtvcHRpb25dKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKCB0eXBlb2YgZ2V0ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBnZXQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLmZpbGVzdHlsZS5kZWZhdWx0cyA9IHtcblx0XHQnYnV0dG9uVGV4dCcgOiAnQ2hvb3NlIGZpbGUnLFxuXHRcdCdpY29uTmFtZScgOiAnZ2x5cGhpY29uIGdseXBoaWNvbi1mb2xkZXItb3BlbicsXG5cdFx0J2J1dHRvbk5hbWUnIDogJ2J0bi1kZWZhdWx0Jyxcblx0XHQnc2l6ZScgOiAnbnInLFxuXHRcdCdpbnB1dCcgOiB0cnVlLFxuXHRcdCdiYWRnZScgOiB0cnVlLFxuXHRcdCdpY29uJyA6IHRydWUsXG5cdFx0J2J1dHRvbkJlZm9yZScgOiBmYWxzZSxcblx0XHQnZGlzYWJsZWQnIDogZmFsc2UsXG5cdFx0J3BsYWNlaG9sZGVyJzogJydcblx0fTtcblxuXHQkLmZuLmZpbGVzdHlsZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0JC5mbi5maWxlc3R5bGUgPSBvbGQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0JChmdW5jdGlvbigpIHtcblx0XHQkKCcuZmlsZXN0eWxlJykuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksIG9wdGlvbnMgPSB7XG5cblx0XHRcdFx0J2lucHV0JyA6ICR0aGlzLmF0dHIoJ2RhdGEtaW5wdXQnKSA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDogdHJ1ZSxcblx0XHRcdFx0J2ljb24nIDogJHRoaXMuYXR0cignZGF0YS1pY29uJykgPT09ICdmYWxzZScgPyBmYWxzZSA6IHRydWUsXG5cdFx0XHRcdCdidXR0b25CZWZvcmUnIDogJHRoaXMuYXR0cignZGF0YS1idXR0b25CZWZvcmUnKSA9PT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlLFxuXHRcdFx0XHQnZGlzYWJsZWQnIDogJHRoaXMuYXR0cignZGF0YS1kaXNhYmxlZCcpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2UsXG5cdFx0XHRcdCdzaXplJyA6ICR0aGlzLmF0dHIoJ2RhdGEtc2l6ZScpLFxuXHRcdFx0XHQnYnV0dG9uVGV4dCcgOiAkdGhpcy5hdHRyKCdkYXRhLWJ1dHRvblRleHQnKSxcblx0XHRcdFx0J2J1dHRvbk5hbWUnIDogJHRoaXMuYXR0cignZGF0YS1idXR0b25OYW1lJyksXG5cdFx0XHRcdCdpY29uTmFtZScgOiAkdGhpcy5hdHRyKCdkYXRhLWljb25OYW1lJyksXG5cdFx0XHRcdCdiYWRnZScgOiAkdGhpcy5hdHRyKCdkYXRhLWJhZGdlJykgPT09ICdmYWxzZScgPyBmYWxzZSA6IHRydWUsXG5cdFx0XHRcdCdwbGFjZWhvbGRlcic6ICR0aGlzLmF0dHIoJ2RhdGEtcGxhY2Vob2xkZXInKVxuXHRcdFx0fTtcblxuXHRcdFx0JHRoaXMuZmlsZXN0eWxlKG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9KTtcbn0pKHdpbmRvdy5qUXVlcnkpO1xuIiwiLypcbiAqIFNsaW5reVxuICogQSBsaWdodC13ZWlnaHQsIHJlc3BvbnNpdmUsIG1vYmlsZS1saWtlIG5hdmlnYXRpb24gbWVudSBwbHVnaW4gZm9yIGpRdWVyeVxuICogQnVpbHQgYnkgQWxpIFphaGlkIDxhbGkuemFoaWRAbGl2ZS5jb20+XG4gKiBQdWJsaXNoZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cblxuOyhmdW5jdGlvbigkKVxue1xuICB2YXIgbGFzdENsaWNrO1xuXG4gICQuZm4uc2xpbmt5ID0gZnVuY3Rpb24ob3B0aW9ucylcbiAge1xuICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kXG4gICAgKHtcbiAgICAgIGxhYmVsOiAnQmFjaycsXG4gICAgICB0aXRsZTogZmFsc2UsXG4gICAgICBzcGVlZDogMzAwLFxuICAgICAgcmVzaXplOiB0cnVlLFxuICAgICAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAgICAgaGVhZGVyQ2xhc3M6ICdoZWFkZXInLFxuICAgICAgaGVhZGluZ1RhZzogJzxoMj4nLFxuICAgICAgYmFja0ZpcnN0OiBmYWxzZSxcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIHZhciBtZW51ID0gJCh0aGlzKSxcbiAgICAgICAgcm9vdCA9IG1lbnUuY2hpbGRyZW4oKS5maXJzdCgpO1xuXG4gICAgbWVudS5hZGRDbGFzcygnc2xpbmt5LW1lbnUnKTtcblxuICAgIHZhciBtb3ZlID0gZnVuY3Rpb24oZGVwdGgsIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgIHZhciBsZWZ0ID0gTWF0aC5yb3VuZChwYXJzZUludChyb290LmdldCgwKS5zdHlsZS5sZWZ0KSkgfHwgMDtcblxuICAgICAgcm9vdC5jc3MoJ2xlZnQnLCBsZWZ0IC0gKGRlcHRoICogMTAwKSArICclJyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpXG4gICAgICB7XG4gICAgICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIHNldHRpbmdzLnNwZWVkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc2l6ZSA9IGZ1bmN0aW9uKGNvbnRlbnQpXG4gICAge1xuICAgICAgbWVudS5oZWlnaHQoY29udGVudC5vdXRlckhlaWdodCgpKTtcbiAgICB9O1xuXG4gICAgdmFyIHRyYW5zaXRpb24gPSBmdW5jdGlvbihzcGVlZClcbiAgICB7XG4gICAgICBtZW51LmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHNwZWVkICsgJ21zJyk7XG4gICAgICByb290LmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsIHNwZWVkICsgJ21zJyk7XG4gICAgfTtcblxuICAgIHRyYW5zaXRpb24oc2V0dGluZ3Muc3BlZWQpO1xuXG4gICAgJCgnYSArIHVsJywgbWVudSkucHJldigpLmFkZENsYXNzKCduZXh0Jyk7XG5cbiAgICAkKCdsaSA+IHVsJywgbWVudSkucHJlcGVuZCgnPGxpIGNsYXNzPVwiJyArIHNldHRpbmdzLmhlYWRlckNsYXNzICsgJ1wiPicpO1xuXG4gICAgaWYgKHNldHRpbmdzLnRpdGxlID09PSB0cnVlKVxuICAgIHtcbiAgICAgICQoJ2xpID4gdWwnLCBtZW51KS5lYWNoKGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgdmFyICRsaW5rID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKCdhJykuZmlyc3QoKSxcbiAgICAgICAgICAgIGxhYmVsID0gJGxpbmsudGV4dCgpLFxuICAgICAgICAgICAgdGl0bGUgPSAkKCc8YT4nKS5hZGRDbGFzcygndGl0bGUnKS50ZXh0KGxhYmVsKS5hdHRyKCdocmVmJywgJGxpbmsuYXR0cignaHJlZicpKTtcblxuICAgICAgICAkKCc+IC4nICsgc2V0dGluZ3MuaGVhZGVyQ2xhc3MsIHRoaXMpLmFwcGVuZCh0aXRsZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXNldHRpbmdzLnRpdGxlICYmIHNldHRpbmdzLmxhYmVsID09PSB0cnVlKVxuICAgIHtcbiAgICAgICQoJ2xpID4gdWwnLCBtZW51KS5lYWNoKGZ1bmN0aW9uKClcbiAgICAgIHtcbiAgICAgICAgdmFyIGxhYmVsID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKCdhJykuZmlyc3QoKS50ZXh0KCksXG4gICAgICAgICAgICBiYWNrTGluayA9ICQoJzxhPicpLnRleHQobGFiZWwpLnByb3AoJ2hyZWYnLCAnIycpLmFkZENsYXNzKCdiYWNrJyk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmJhY2tGaXJzdClcbiAgICAgICAge1xuICAgICAgICAgICQoJz4gLicgKyBzZXR0aW5ncy5oZWFkZXJDbGFzcywgdGhpcykucHJlcGVuZChiYWNrTGluayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgJCgnPiAuJyArIHNldHRpbmdzLmhlYWRlckNsYXNzLCB0aGlzKS5hcHBlbmQoYmFja0xpbmspO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgIHZhciBiYWNrTGluayA9ICQoJzxhPicpLnRleHQoc2V0dGluZ3MubGFiZWwpLnByb3AoJ2hyZWYnLCAnIycpLmFkZENsYXNzKCdiYWNrJyk7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5iYWNrRmlyc3QpXG4gICAgICB7XG4gICAgICAgICQoJy4nICsgc2V0dGluZ3MuaGVhZGVyQ2xhc3MsIG1lbnUpLnByZXBlbmQoYmFja0xpbmspO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICAkKCcuJyArIHNldHRpbmdzLmhlYWRlckNsYXNzLCBtZW51KS5hcHBlbmQoYmFja0xpbmspO1xuICAgICAgfVxuICAgIH1cblxuICAgICQoJ2EnLCBtZW51KS5vbignY2xpY2snLCBmdW5jdGlvbihlKVxuICAgIHtcbiAgICAgIGlmICgobGFzdENsaWNrICsgc2V0dGluZ3Muc3BlZWQpID4gRGF0ZS5ub3coKSlcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBsYXN0Q2xpY2sgPSBEYXRlLm5vdygpO1xuXG4gICAgICB2YXIgYSA9ICQodGhpcyk7XG5cbiAgICAgIGlmIChhLmhhc0NsYXNzKCduZXh0JykgfHwgYS5oYXNDbGFzcygnYmFjaycpKVxuICAgICAge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmhhc0NsYXNzKCduZXh0JykpXG4gICAgICB7XG4gICAgICAgIG1lbnUuZmluZCgnLicgKyBzZXR0aW5ncy5hY3RpdmVDbGFzcykucmVtb3ZlQ2xhc3Moc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgIGEubmV4dCgpLnNob3coKS5hZGRDbGFzcyhzZXR0aW5ncy5hY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgbW92ZSgxKTtcblxuICAgICAgICBpZiAoc2V0dGluZ3MucmVzaXplKVxuICAgICAgICB7XG4gICAgICAgICAgcmVzaXplKGEubmV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYS5oYXNDbGFzcygnYmFjaycpKVxuICAgICAge1xuICAgICAgICBtb3ZlKC0xLCBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICBtZW51LmZpbmQoJy4nICsgc2V0dGluZ3MuYWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKHNldHRpbmdzLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgICAgIGEucGFyZW50KCkucGFyZW50KCkuaGlkZSgpLnBhcmVudHNVbnRpbChtZW51LCAndWwnKS5maXJzdCgpLmFkZENsYXNzKHNldHRpbmdzLmFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLnJlc2l6ZSlcbiAgICAgICAge1xuICAgICAgICAgIHJlc2l6ZShhLnBhcmVudCgpLnBhcmVudCgpLnBhcmVudHNVbnRpbChtZW51LCAndWwnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuanVtcCA9IGZ1bmN0aW9uKHRvLCBhbmltYXRlKVxuICAgIHtcbiAgICAgIHRvID0gJCh0byk7XG5cbiAgICAgIHZhciBhY3RpdmUgPSBtZW51LmZpbmQoJy4nICsgc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAoYWN0aXZlLmxlbmd0aCA+IDApXG4gICAgICB7XG4gICAgICAgIGFjdGl2ZSA9IGFjdGl2ZS5wYXJlbnRzVW50aWwobWVudSwgJ3VsJykubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICBhY3RpdmUgPSAwO1xuICAgICAgfVxuXG4gICAgICBtZW51LmZpbmQoJ3VsJykucmVtb3ZlQ2xhc3Moc2V0dGluZ3MuYWN0aXZlQ2xhc3MpLmhpZGUoKTtcblxuICAgICAgdmFyIG1lbnVzID0gdG8ucGFyZW50c1VudGlsKG1lbnUsICd1bCcpO1xuXG4gICAgICBtZW51cy5zaG93KCk7XG4gICAgICB0by5zaG93KCkuYWRkQ2xhc3Moc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAoYW5pbWF0ZSA9PT0gZmFsc2UpXG4gICAgICB7XG4gICAgICAgIHRyYW5zaXRpb24oMCk7XG4gICAgICB9XG5cbiAgICAgIG1vdmUobWVudXMubGVuZ3RoIC0gYWN0aXZlKTtcblxuICAgICAgaWYgKHNldHRpbmdzLnJlc2l6ZSlcbiAgICAgIHtcbiAgICAgICAgcmVzaXplKHRvKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGUgPT09IGZhbHNlKVxuICAgICAge1xuICAgICAgICB0cmFuc2l0aW9uKHNldHRpbmdzLnNwZWVkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5ob21lID0gZnVuY3Rpb24oYW5pbWF0ZSlcbiAgICB7XG4gICAgICBpZiAoYW5pbWF0ZSA9PT0gZmFsc2UpXG4gICAgICB7XG4gICAgICAgIHRyYW5zaXRpb24oMCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmUgPSBtZW51LmZpbmQoJy4nICsgc2V0dGluZ3MuYWN0aXZlQ2xhc3MpLFxuICAgICAgICAgIGNvdW50ID0gYWN0aXZlLnBhcmVudHNVbnRpbChtZW51LCAnbGknKS5sZW5ndGg7XG5cbiAgICAgIGlmIChjb3VudCA+IDApXG4gICAgICB7XG4gICAgICAgIG1vdmUoLWNvdW50LCBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICBhY3RpdmUucmVtb3ZlQ2xhc3Moc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2V0dGluZ3MucmVzaXplKVxuICAgICAgICB7XG4gICAgICAgICAgcmVzaXplKCQoYWN0aXZlLnBhcmVudHNVbnRpbChtZW51LCAnbGknKS5nZXQoY291bnQgLSAxKSkucGFyZW50KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlID09PSBmYWxzZSlcbiAgICAgIHtcbiAgICAgICAgdHJhbnNpdGlvbihzZXR0aW5ncy5zcGVlZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uKClcbiAgICB7XG4gICAgICAkKCcuJyArIHNldHRpbmdzLmhlYWRlckNsYXNzLCBtZW51KS5yZW1vdmUoKTtcbiAgICAgICQoJ2EnLCBtZW51KS5yZW1vdmVDbGFzcygnbmV4dCcpLm9mZignY2xpY2snKTtcblxuICAgICAgbWVudS5yZW1vdmVDbGFzcygnc2xpbmt5LW1lbnUnKS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnJyk7XG4gICAgICByb290LmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnKTtcbiAgICB9O1xuXG4gICAgdmFyIGFjdGl2ZSA9IG1lbnUuZmluZCgnLicgKyBzZXR0aW5ncy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZiAoYWN0aXZlLmxlbmd0aCA+IDApXG4gICAge1xuICAgICAgYWN0aXZlLnJlbW92ZUNsYXNzKHNldHRpbmdzLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgdGhpcy5qdW1wKGFjdGl2ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufShqUXVlcnkpKTsiLCJqUXVlcnkoZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIEZsZXh5IGhlYWRlclxuICAgIGZsZXh5X2hlYWRlci5pbml0KCk7XG5cbiAgICAvLyBTaWRyXG4gICAgJCgnLnNsaW5reS1tZW51JylcbiAgICAgICAgLmZpbmQoJ3VsLCBsaSwgYScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygpO1xuXG4gICAgJCgnLnNpZHItdG9nZ2xlLS1yaWdodCcpLnNpZHIoe1xuICAgICAgICBuYW1lOiAnc2lkci1tYWluJyxcbiAgICAgICAgc2lkZTogJ3JpZ2h0JyxcbiAgICAgICAgcmVuYW1pbmc6IGZhbHNlLFxuICAgICAgICBib2R5OiAnLmxheW91dF9fd3JhcHBlcicsXG4gICAgICAgIHNvdXJjZTogJy5zaWRyLXNvdXJjZS1wcm92aWRlcidcbiAgICB9KTtcblxuICAgIC8vIFNsaW5reVxuICAgICQoJy5zaWRyIC5zbGlua3ktbWVudScpLnNsaW5reSh7XG4gICAgICAgIHRpdGxlOiB0cnVlLFxuICAgICAgICBsYWJlbDogJydcbiAgICB9KTtcblxuICAgIC8vIEVuYWJsZSAvIGRpc2FibGUgQm9vdHN0cmFwIHRvb2x0aXBzLCBiYXNlZCB1cG9uIHRvdWNoIGV2ZW50c1xuICAgIGlmKE1vZGVybml6ci50b3VjaGV2ZW50cykge1xuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgnaGlkZScpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgICB9XG59KTtcbiJdfQ==

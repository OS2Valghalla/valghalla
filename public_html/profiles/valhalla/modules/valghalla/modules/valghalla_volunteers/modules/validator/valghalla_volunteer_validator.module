<?php

/**
 * @file
 * Volunteer validate module.
 */

/**
 * Implements hook_menu().
 */
function valghalla_volunteer_validator_menu() {
  $items['admin/valghalla/validator'] = array(
    'title' => 'Deltager validering',
    'description' => 'Indstillinger for CPR validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_settings'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/valghalla/validator/batch'] = array(
    'title' => 'Deltager validering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_volunteer_validator_batch'),
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_volunteer_validator.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function valghalla_volunteer_validator_ctools_plugin_type() {
  return array(
    'cpr_service' => array(
      'use hooks' => TRUE,
    ),
    'validate' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function valghalla_volunteer_validator_node_presave($node) {
  if ($node->type != 'volunteers') {
    return;
  }
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $cpr = $node_wrapper->field_cpr_number->value();

  // Fetching the name and address.
  if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
    $get_address_messages = valghalla_volunteer_validator_query_service('get_address', $cpr);

    foreach ($get_address_messages as $get_address_message) {
      if ($get_address_message['status']) {
        $field_map = array(
          'field_address_road' => 'road',
          'field_address_road_no' => 'road_no',
          'field_address_floor' => 'floor',
          'field_address_door' => 'door',
          'field_address_zipcode' => 'zipcode',
          'field_address_city' => 'city',
          'field_address_coname' => 'coname',
          'field_municipality' => 'municipality',
        );

        foreach ($field_map as $field => $index) {
          $node_wrapper->{$field} = $get_address_message[$index];
        }
      }
    }
  }

  // Fetching names split.
  if (variable_get('valghalla_volunteer_validator_get_name')) {
    $field_map = array(
      'field_first_name' => 'fornavn',
      'field_second_name' => 'efternavn',
    );

    $data = vcv_person_lookup_extended_query($cpr);

    if ($data['status']) {
      $names_arr = array();
      foreach ($field_map as $field => $index) {
        $node_wrapper->{$field} = $data['persondata']->navn->{$index};
        $names_arr[] = $data['persondata']->navn->{$index};
      }

      $node_wrapper->title = implode(' ', $names_arr);
    }
  }

  // Fetching subscription.
  if (variable_get('valghalla_volunteer_validator_get_subscription_status')) {
    $subscriptions = valghalla_volunteer_validator_query_service('get_subscriptions_status', $cpr);
    if (!empty($subscriptions[0]['status'])) {
      $node_wrapper->field_no_mail = (int) $subscriptions[0]['digital_post'] == FALSE ? '1' : '0';
      $node_wrapper->field_no_sms = $subscriptions[0]['nem_sms'] == FALSE ? '1' : '0';
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function valghalla_volunteer_validator_node_validate($node, $form, &$form_state) {
  if ($node->type != 'volunteers') {
    return;
  }

  if ($form_state['clicked_button']['#parents'][0] == 'delete') {
    return;
  }

  $cpr_field = reset($form_state['values']['field_cpr_number']);
  $cpr = $cpr_field[0]['value'];

  // Check formatting.
  if (!valghalla_volunteer_validator_validate_format($cpr)) {
    form_set_error('field_cpr_number', t('Det angivne CPR-nummer er ikke korrekt formatteret (f.eks. 123456-8910).'));
  }

  // Check for duplicates.
  if ($nid = valghalla_volunteer_validator_check_duplicates($cpr)) {
    if ($nid !== $node->nid) {
      form_set_error('field_cpr_number', t('Der er allerede oprettet en deltager med det angivne CPR-nummer'));
    }
  }

  // Query service.
  if (variable_get('valghalla_volunteer_validator_enable', FALSE)) {
    // Run validator.
    $messages = valghalla_volunteer_validator_query_service('validate_cpr', $cpr, 'single');

    foreach ($messages as $message) {
      if ($message['status'] === FALSE) {
        form_set_error('field_cpr_number', t('Det angivne CPR-nummer kan ikke valideres: @text', array('@text' => $message['text'])));
      }
    }

    if ($errors = valghalla_volunteer_validator_validate($node, 'single')) {
      form_set_error('field_cpr_number', t('Det angivne CPR-nummer kan ikke valideres: @text', array('@text' => $errors['age']['text'])));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable address fields, and let user know that the values
 * will be fetched from the CPR service.
 */
function valghalla_volunteer_validator_form_volunteers_node_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('valghalla_volunteer_validator_get_address', FALSE)) {
    $fields = array(
      'field_address_road',
      'field_address_road_no',
      'field_address_floor',
      'field_address_door',
      'field_address_zipcode',
      'field_address_city',
      'field_address_coname',
      'field_municipality',
    );

    foreach ($fields as $field) {
      $form[$field]['#disabled'] = TRUE;
      $form[$field]['#suffix'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';
    }
  }

  if (!$form['title']['#default_value']) {
    $form['title']['#default_value'] = 'Hentes når indholdet gemmes';
  }
  $form['title']['#disabled'] = TRUE;
  $form['title']['#description'] = '<em>Indholdet af dette felt bliver automatisk hentet fra CPR service, når indholdet gemmes.</em>';

  if (variable_get('valghalla_volunteer_validator_get_name')) {
    $form['field_first_name']['#disabled'] = TRUE;
    $form['field_second_name']['#disabled'] = TRUE;
  }

  if (variable_get('valghalla_volunteer_validator_get_subscription_status')) {
    $form['field_no_mail']['#disabled'] = TRUE;
    $form['field_no_sms']['#disabled'] = TRUE;
  }

}

/**
 * Validate the format of the CPR number.
 *
 * The format must be 123456-1234
 */
function valghalla_volunteer_validator_validate_format($cpr) {
  return preg_match("/^[0-9]{6}-[0-9]{4}$/", $cpr);
}

/**
 * Check if the cpr is used already.
 *
 * If it is we send back the nid for the volunteer.
 */
function valghalla_volunteer_validator_check_duplicates($cpr) {
  if ($volunteer = _valghalla_helper_get_volunteer_by_cpr($cpr)) {
    return $volunteer->nid;
  }
  return FALSE;
}

/**
 * Query cpr service.
 */
function valghalla_volunteer_validator_query_service($action, $cpr, $process = 'unkown') {
  $messages = array();
  ctools_include('plugins');

  $enabled_services = variable_get('valghalla_volunteer_validator_cpr_service', FALSE);
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'cpr_service');

  foreach ($plugins as $plugin_key => $plugin) {
    if ($enabled_services[$plugin_key] && isset($plugin[$action]) && function_exists($plugin[$action])) {
      $message = call_user_func($plugin[$action], $cpr, $process);
      $messages[] = $message;
    }
  }

  return $messages;
}

/**
 * Validate volunteer, using enabled plugins.
 */
function valghalla_volunteer_validator_validate(&$volunteer, $cpr_message) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('valghalla_volunteer_validator', 'validate');

  $enabled = variable_get('valghalla_volunteer_validator_services', array());

  $log = array();
  foreach ($enabled as $service) {
    if (isset($plugins[$service])) {
      $callback = $plugins[$service]['validate'];
      $message = call_user_func($callback, $volunteer, $cpr_message);

      if (!$message['valid']) {
        $log[$service] = $message;
      }
    }
  }

  if (count($log)) {
    return $log;
  }
  return FALSE;
}

/**
 * Get a volunteers CPR.
 */
function valghalla_volunteer_validator_get_cpr($volunteer) {
  ctools_include('plugins');
  if ($service = variable_get('valghalla_volunteer_validator_cpr_service', FALSE)) {
    $plugin = ctools_get_plugins('valghalla_volunteer_validator', 'cpr_service', $service);

    if (isset($plugin['get_cpr'])) {
      if ($field = field_get_items('node', $volunteer, 'field_address_road')) {
        $volunteer_info['road'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_road_no')) {
        $volunteer_info['road_no'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_floor')) {
        $volunteer_info['floor'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_address_zipcode')) {
        $volunteer_info['zipcode'] = $field[0]['value'];
      }

      if ($field = field_get_items('node', $volunteer, 'field_cpr_number')) {
        $volunteer_info['birthdate'] = substr($field[0]['value'], 0, 6);
      }

      $volunteer_info['name'] = $volunteer->title;

      $return = call_user_func($plugin['get_cpr'], $volunteer_info);
      $language = field_language('node', $volunteer, 'field_cpr_number');

      if ($return['status'] == 'success') {
        $cpr = substr($return['pnr'], 0, 6) . '-' . substr($return['pnr'], 6, 10);

        $volunteer->field_cpr_number[$language][0]['value'] = $cpr;
      }

      $volunteer->field_cpr_valid_date[$language][0]['value'] = time();
      $volunteer->field_cpr_status[$language][0]['value'] = $return['status'];

      node_save($volunteer);
    }
  }
}

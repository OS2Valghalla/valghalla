<?php
/**
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright 2012 OS2 - Offentligt Digitaliseringsfællesskab.
 * See README.md at https://github.com/os2web/valghalla_mail
 */

/**
 * Implements hook_menu()
 */
function vvv_validate_age_menu() {
  $items['admin/valghalla/validator/validate_age'] = array(
    'title' => 'Indstillinger for "Valider Alder"',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vvv_validate_age_settings'),
    'access arguments' => array('administer valhalla'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_valghalla_vol_validator_validate()
 *
 */
function vvv_validate_age_valghalla_volunteer_validator_validate() {
  return array(
    'age' => array(
      'label' => 'Valider alder',
      'description' => t('Valider den frivilliges alder'),
      'validate' => 'vvv_validate_age_validate',
      'config' => 'admin/valghalla/vvv/validate_age',
    )
  );
}

/**
 * Page callback for settings
 */
function vvv_validate_age_settings() {
  $form['vvv_validate_age_on_election'] = array(
    '#type' => 'checkbox',
    '#title' => 'Brug valgdato, for validering',
    '#description' => 'Valider alderen mod valgets dato. Hvis dette ikke vælges, bruges dags dato.',
    '#default_value' => variable_get('vvv_validate_age_on_election', TRUE),
  );

  $form['vvv_validate_age_age'] = array(
    '#type' => 'textfield',
    '#title' => 'Alder',
    '#default_value' => variable_get('vvv_validate_age_age', 18),
    '#description' => 'Hvilken alder skal den frivillige min have',
  );

  return system_settings_form($form);
}

/**
 * Validation on age
 */
function vvv_validate_age_validate($volunteer, $message) {
  $date = &drupal_static(__FUNCTION__);
  if (!isset($date)) {
    // Get date to validate volunteer against
    if (variable_get('vvv_validate_age_on_election', TRUE)) {
      $election_nids = odin_get_future_elections();

      foreach (node_load_multiple($election_nids) as $election_node) {
        $date_field = field_get_items('node', $election_node, 'field_date');
        $tmp_date = $date_field ? new DateTime($date_field[0]['value']) : '';

        // Use the date
        if (!isset($date)) {
          $date = $tmp_date;
        }

        // If there are more than one date, use the "lowest"
        if ($tmp_date < $date) {
          $date = $tmp_date;
        }
      }
    }
    else {
      $date = new DateTime('now');
    }
  }

  // Birthdate
  $cpr_field = field_get_items('node', $volunteer, 'field_cpr_number');
  $cpr = $cpr_field ? $cpr_field[0]['value'] : '';

  $dd = substr($cpr, 0, 2);
  $mm = substr($cpr, 2, 2);
  $yy = substr($cpr, 4, 2);

  // md - "magic digit"
  $md = substr($cpr, 7, 1);

  $century = _vvv_validate_age_get_century($yy, $md);

  try {
    $birthdate = new DateTime($century.$yy . '-' . $mm . '-' . $dd);
  }
  catch (Exception $e) {
    return array(
        'valid' => FALSE,
        'text' => 'Den frivillige har ikke en gyldig fødselsdato',
      );
  }

  $diff = $date->diff($birthdate);
  $years = $diff->format('%y');
  $min_age = variable_get('vvv_validate_age_age', 18);

  if ($years < $min_age) {
    return array(
      'valid' => FALSE,
      'text' => 'Den frivilliges alder er under: ' . $min_age,
    );
  }
  return array(
    'valid' => TRUE,
  );
}

/**
 * Helper function, to find the correct century
 */
function _vvv_validate_age_get_century($yy, $md) {
  // See http://da.wikipedia.org/wiki/CPR-nummer#Under_eller_over_100_.C3.A5r
  if ($md <= 3) {
    return 19;
  }
  else if ($md === 4) {
    if ($yy <= 36) {
      return 20;
    }
    else {
      return 19;
    }
  }
  else if ($md >= 5 && $md <= 8) {
    if ($yy <= 57) {
      return 20;
    }
    else {
      return 19;
    }
  }
  else if ($md === 9) {
    if ($yy <= 36) {
      return 20;
    }
    else {
      return 19;
    }
  }
  // If all else fails, we go with 19
  return 19;
}

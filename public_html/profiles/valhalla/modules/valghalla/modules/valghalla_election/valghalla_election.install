<?php

/**
 * @file
 * Install/Schema, and uninstall functions for valghalla_election.
 */

/**
 * Implements hook_install().
 */
function valghalla_election_install() {
  valghalla_election_update_7101();
  valghalla_election_update_7102();
}

/**
 * Implements hook_uninstall().
 */
function valghalla_election_uninstall() {
  if (db_table_exists('field_election_roles_diaet')) {
    db_query('DROP TABLE {field_election_roles_diaet}');
  }
}

/**
 * Implements hook_schema().
 */
function valghalla_election_schema() {
  $schema['field_election_roles_diaet'] = array(
    'description' => 'Table for storing the individual role diaet of each election.',
    'fields' => array(
      'nid'  => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: the node identifier for an election item.',
      ),
      'role_diaet_value' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'description' => 'Diaet value for each role',
      ),
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Migrate binding on the seats from polling_station to the election.
 */
function valghalla_election_update_7101() {
  // Reverting feature.
  features_revert_module('valghalla_election');

  // Field creation and field instance creation.
  $roles = valghalla_election_get_roles();

  foreach ($roles as $role) {
    if (!field_info_field('field_role_n' . $role->nid)) {
      // Create the field base.
      $field = array(
        'field_name' => 'field_role_n' . $role->nid,
        'type' => 'volunteers_roles_field',
      );
      field_create_field($field);
    }

    // Initiate field instance.
    $instance = array(
      'field_name' => 'field_role_n' . $role->nid,
      'entity_type' => 'field_collection_item',
      'label' => t('Role'),
      'bundle' => 'field_volunteers_pr_pol_st_party',
      // If you don't set the "required" property then the field wont be
      // required by default.
      'required' => TRUE,
      'widget' => array(
        'type' => 'custom_type',
      ),
    );

    // Create the field instance on the bundle, if does not exist yet.
    if (!field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }

  // Field content creation.
  // 1. Load all elections.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'election')
    ->execute();

  $elections = array();
  if (!empty($result['node'])) {
    $elections = node_load_multiple(array_keys($result['node']));
  }

  // 2. Load all polling station used in election.
  foreach ($elections as $election) {
    $pollingStations = field_get_items('node', $election, 'field_polling_stations');

    if (is_array($pollingStations)) {
      // 3. Load polling station field_volunteers_pr_party_1 field collections.
      foreach ($pollingStations as $pollingStation) {
        $pollingStation = node_load($pollingStation['target_id']);
        if (empty($pollingStation)) {
          continue;
        }

        $fieldVolunteerPrParty = field_get_items('node', $pollingStation, 'field_volunteers_pr_party_1');
        if (is_array($fieldVolunteerPrParty)) {
          foreach ($fieldVolunteerPrParty as $volPrParty) {
            $volPrPartyLoaded = entity_load_single('field_collection_item', $volPrParty['value']);

            // 4. Create the new field collection and add it to election.
            $fc = entity_create('field_collection_item', array('field_name' => 'field_volunteers_pr_pol_st_party'));

            $fc->setHostEntity('node', $election);
            $fc->field_ppsp_polling_station[LANGUAGE_NONE][0]['nid'] = $pollingStation->nid;
            $fc->field_ppsp_party[LANGUAGE_NONE][0]['tid'] = $volPrPartyLoaded->field_party_list['und'][0]['party_list'];

            // 4.1 Find and fill all role fields.
            $allFields = field_info_instances('field_collection_item', 'field_volunteers_pr_party_1');
            foreach ($allFields as $field) {
              if (substr($field['field_name'], 0, 12) === 'field_role_n') {
                if (!empty($volPrPartyLoaded->{$field['field_name']})) {
                  $fc->{$field['field_name']}[LANGUAGE_NONE][0]['number_vo'] = $volPrPartyLoaded->{$field['field_name']}['und'][0]['number_vo'];
                }
              }
            }

            // 5. Saving the new field collection.
            $fc->save();
          }
        }
      }
    }
  }

  // Remove old field and field instances of field_volunteers_pr_party_1.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_volunteers_pr_party_1');

  $result = $query->execute();

  if ($result['field_collection_item']) {
    entity_delete_multiple('field_collection_item', array_keys($result['field_collection_item']));
  }
  field_delete_field('field_volunteers_pr_party_1');

  // Note: only run field_purge_batch if you want to remove immediately.
  // Otherwise it will be removed from next cron run.
  field_purge_batch(1);

  // Disable and uninstall obsolete modules.
  $module_list = array(
    'valhalla_field_party_volunteers',
    'valhalla_field_party_volunteers_v2',
    'valhalla_field_party_volunteers_v3',
  );
  module_disable($module_list, TRUE);
  drupal_uninstall_modules($module_list, TRUE);
}

/**
 * Remove field field_secretary from partier taxonomy_term.
 */
function valghalla_election_update_7102() {
  field_delete_field('field_secretary');

  // Note: only run field_purge_batch if you want to remove immediately.
  // Otherwise it will be removed from next cron run.
  field_purge_batch(1);
}

/**
 * Adding new fields fields.
 *
 * New fields: field_party_subsc_accept_comment, field_party_subsc_message,
 * field_party_subsc_terms_text, field_election_notif_conf_export,
 * field_election_valid_age, field_election_valid_citizenship,
 * field_election_valid_civ_status, field_election_valid_municipal,
 * field_party_skip_valid_municipal.
 */
function valghalla_election_update_7103() {
  // Reverting feature.
  features_revert_module('valghalla_election');
}

/**
 * Remove field field_logo from partier taxonomy_term.
 */
function valghalla_election_update_7104() {
  field_delete_field('field_logo');
  field_purge_batch(1);
}

/**
 * Creates missing polling station to party fieldset combinations.
 */
function valghalla_election_update_7105() {
  // 1. Load all elections.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'election')
    ->execute();

  $elections = node_load_multiple(array_keys($result['node']));

  // 2. Load all polling station used in election.
  foreach ($elections as $election) {
    $pollingStations = field_get_items('node', $election, 'field_polling_stations');

    // 3. Filling polling station party combination list,
    // that election must have.
    $pollingStationPartyMappings = array();
    if (is_array($pollingStations)) {
      foreach ($pollingStations as $pollingStation) {
        $pollingStationPartyMappings[$pollingStation['target_id']] = odin_get_parties();
      }
    }

    // 4. Removing the polling station party combination,
    // which election has already.
    foreach ($election->field_volunteers_pr_pol_st_party['und'] as $key => $value) {
      if (isset($value['entity'])) {
        $vppsp = $value['entity'];
      }
      else {
        $vppsp = entity_load_single('field_collection_item', $value['value']);
      }

      $vppspPollingStationId = $vppsp->field_ppsp_polling_station['und'][0]['nid'];
      $vppspPartyId = $vppsp->field_ppsp_party['und'][0]['tid'];
      unset($pollingStationPartyMappings[$vppspPollingStationId][$vppspPartyId]);
    }

    // 5. Creating the field set for missing combination.
    foreach ($pollingStationPartyMappings as $pollingStationId => $pollingStationParties) {
      foreach ($pollingStationParties as $partyId => $partyName) {
        $fc = entity_create('field_collection_item', array('field_name' => 'field_volunteers_pr_pol_st_party'));
        $fc->setHostEntity('node', $election);
        $fc->field_ppsp_polling_station[LANGUAGE_NONE][0]['nid'] = $pollingStationId;
        $fc->field_ppsp_party[LANGUAGE_NONE][0]['tid'] = $partyId;
        $fc->save();
      }
    }
  }
}

/**
 * Adding new fields fields.
 *
 * New fields: field_election_disable_consent, field_election_ext_require_email,
 * field_election_ext_require_phone.
 */
function valghalla_election_update_7106() {
  // Reverting feature.
  features_revert_module('valghalla_election');
}

/**
 * Adding new fields fields.
 *
 * New fields: field_election_consent_text.
 */
function valghalla_election_update_7107() {
  // Reverting feature.
  features_revert_module('valghalla_election');
}

/**
 * Adding new fields field.
 *
 * New fieldss: field_party_skip_valid_citizenship.
 */
function valghalla_election_update_7108() {
  // Reverting feature.
  features_revert_module('valghalla_election');
}

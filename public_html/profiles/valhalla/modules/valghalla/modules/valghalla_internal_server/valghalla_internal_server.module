<?php

/**
 * @file
 * Valghalla_internal_server.inc.
 */

include_once 'valghalla_internal_server.features.inc';

use ValghallaInternalServer\ExternalWebservice;

define("VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS", 10);

module_load_include('php', 'valghalla_internal_server', 'includes/ExternalWebservice.class');
module_load_include('php', 'valghalla_internal_server', 'includes/ValghallaLogger.class');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.pages');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.batch');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.utils');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.queue');

/**
 * Implements hook_node_insert().
 */
function valghalla_internal_server_node_insert($node) {
  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_update().
 */
function valghalla_internal_server_node_update($node) {
  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function valghalla_internal_server_node_delete($node) {
  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    // Adding item, and marking it as deleted.
    valghalla_synch_queue_add_item($node, TRUE);
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function valghalla_internal_server_taxonomy_term_insert($term) {
  valghalla_synch_queue_add_item($term);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function valghalla_internal_server_taxonomy_term_update($term) {
  valghalla_synch_queue_add_item($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function valghalla_internal_server_taxonomy_term_delete($term) {
  valghalla_synch_queue_add_item($term, TRUE);
}

/**
 * Implements hook_cron().
 */
function valghalla_internal_server_cron() {
  // Update heartbeat.
  $ws = new ExternalWebservice();
  variable_set('valgalla_internal_server_heartbeat', $ws->heartbeat());

  $synchFrequency = intval(variable_get('valghalla_external_server_synch_frequency', 0));
  $nowTs = time();

  $batchExists = FALSE;
  if ((($nowTs - variable_get('valgalla_internal_server_last_clone_timestamp')) / 60) > $synchFrequency) {
    valghalla_internal_server_clone_updated_content();
    $batchExists = TRUE;
  }
  if ((($nowTs - variable_get('valgalla_internal_server_last_push_timestamp')) / 60) > $synchFrequency) {
    valghalla_internal_server_push_updated_content();
    $batchExists = TRUE;
  }

  if ($batchExists) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      batch_process(current_path());
    }
  }
}

/**
 * Implements hook_init().
 *
 * Presents the error message if can't connect to external server or
 * if cron has not been run in more than 15 minutes.
 */
function valghalla_internal_server_init() {
  $minsSinceLastCron = (time() - variable_get('cron_last')) / 60;
  if (!variable_get('valgalla_internal_server_heartbeat') || $minsSinceLastCron > 15) {
    drupal_set_message(variable_get('valghalla_external_server_synch_error_message', 'Cannot connect to Valghalla external server'), 'warning', FALSE);
  }
}

/**
 * Function to execute clone batch.
 *
 * @param bool $forceStart
 *   If the batch has to be started right away.
 */
function valghalla_internal_server_clone_updated_content($forceStart = FALSE) {
  $updatedContent = array();

  $ws = new ExternalWebservice();

  // Allowing to get limited number of nodes.
  // Limit = VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS * pageSize
  // (default to 20).
  for ($i = 0; $i < VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS; $i++) {
    $currentPageContent = $ws->fetchContent($i);

    // If this page returned no results, no need to proceed further.
    if (empty($currentPageContent)) {
      break;
    }

    $updatedContent = array_merge($updatedContent, $currentPageContent);
  }

  // Making list of uuids.
  $uuids = array();
  foreach ($updatedContent as $content) {
    if (isset($content->uuid)) {
      $uuids[] = $content->uuid;
    }
  }

  // Using batch to do the heavy operations.
  $batch = valghalla_internal_server_batch_clone($uuids);
  batch_set($batch);

  // If batch is not force started, it must be started manually.
  if ($forceStart) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      batch_process(current_path());
    }
  }
}

/**
 * Function to execute push batch.
 *
 * @param bool $forceStart
 *   If the batch has to be started right away.
 */
function valghalla_internal_server_push_updated_content($forceStart = FALSE) {
  // Getting items ordered according by the position the have to be pushed.
  $queueItems = valghalla_synch_queue_get_items_ordered();

  // Using batch to do the heavy operations.
  $batch = valghalla_internal_server_batch_push($queueItems);
  batch_set($batch);

  // If batch is not force started, it must be started manually.
  if ($forceStart) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      batch_process(current_path());
    }
  }
}

/**
 * Implements hook_node_export_node_alter().
 */
function valghalla_internal_server_node_export_node_alter(&$node, $original_node) {
  $node = valghalla_synch_node_export_anonymize_node($node, variable_get('valghalla_external_server_hash_salt'));
}

/**
 * Implements hook_node_export_node_import_alter().
 *
 * Decrypts the CPR, email and phone.
 *
 * @see valghalla_internal_server_deanonymize_node()
 */
function valghalla_internal_server_node_export_node_import_alter(&$node, $original_node, $save) {
  $node = valghalla_internal_server_deanonymize_node($node);
}

/**
 * Implements hook_monolog_channel_info().
 */
function valghalla_internal_server_monolog_channel_info() {
  $channels = array();

  $channels['valghalla_internal_server_channel'] = array(
    'label' => t('Valghalla internal server'),
    'description' => t('The default channel to log Valghalla internal server messages.'),
    'default profile' => 'valghalla_internal_server_profile',
  );

  return $channels;
}

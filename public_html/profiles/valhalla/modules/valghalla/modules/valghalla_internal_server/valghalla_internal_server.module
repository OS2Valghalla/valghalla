<?php

/**
 * @file
 * Valghalla_internal_server.inc.
 */

include_once 'valghalla_internal_server.features.inc';

use ValghallaInternalServer\ExternalWebservice;
use ValghallaVolunteers\ValghallaVolunteersLogger;

define("VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS", 10);
define("VALGHALLA_INTERNAL_SERVER_RUN_FAILED_SYNC", TRUE);
define("VALGHALLA_INTERNAL_SERVER_SYNC_OK", TRUE);

module_load_include('php', 'valghalla_internal_server', 'includes/ExternalWebservice.class');
module_load_include('php', 'valghalla_internal_server', 'includes/ValghallaLogger.class');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.pages');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.batch');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.utils');
module_load_include('inc', 'valghalla_internal_server', 'includes/valghalla_internal_server.queue');

/**
 * Implements hook_menu().
 */
function valghalla_internal_server_menu() {
  $items['admin/valghalla/validator/internal_server_logs'] = array(
    'title' => 'Valghalla internal server synch logs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('valghalla_internal_server_logs_table_form'),
    'access arguments' => array('administer valghalla'),
  );
  return $items;
}

/**
 * Implements hook_node_insert().
 */
function valghalla_internal_server_node_insert($node) {
  if ($node->type == 'volunteers') {
    ValghallaVolunteersLogger::info(sprintf('Creating new volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
  }

  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_update().
 */
function valghalla_internal_server_node_update($node) {
  if ($node->type == 'volunteers') {
    ValghallaVolunteersLogger::info(sprintf('Updating volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
  }

  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function valghalla_internal_server_node_delete($node) {
  if ($node->type == 'volunteers') {
    ValghallaVolunteersLogger::info(sprintf('Deleting volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
  }

  if (in_array($node->type,
    array(
      'volunteers',
      'roles',
      'election',
      'constituency',
      'polling_station',
    ))
  ) {
    // Adding item, and marking it as deleted.
    valghalla_synch_queue_add_item($node, TRUE);
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function valghalla_internal_server_taxonomy_term_insert($term) {
  valghalla_synch_queue_add_item($term);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function valghalla_internal_server_taxonomy_term_update($term) {
  valghalla_synch_queue_add_item($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function valghalla_internal_server_taxonomy_term_delete($term) {
  valghalla_synch_queue_add_item($term, TRUE);
}

/**
 * Implements hook_cron().
 */
function valghalla_internal_server_cron() {
  valghalla_internal_server_perform_synch(FALSE);
}

/**
 * Implements hook_init().
 *
 * Presents the error message if can't connect to external server or
 * if synch has not been run in more than 15 minutes.
 */
function valghalla_internal_server_init() {
  $synchTs = min(variable_get('valgalla_internal_server_last_clone_timestamp', 0), variable_get('valgalla_internal_server_last_push_timestamp', 0));
  $minsSinceLastSynch = (time() - $synchTs) / 60;

  if (!variable_get('valgalla_internal_server_heartbeat') || $minsSinceLastSynch > 15) {
    drupal_set_message(variable_get('valghalla_external_server_synch_error_message', 'Cannot connect to Valghalla external server'), 'warning', FALSE);
  }

  if (!variable_get('valghalla_synch_ok', VALGHALLA_INTERNAL_SERVER_SYNC_OK) && !variable_get('valghalla_internal_server_run_failed_sync', VALGHALLA_INTERNAL_SERVER_RUN_FAILED_SYNC)) {
    drupal_set_message('Synchronization with external server is stopped!', 'warning', FALSE);
  }
}

/**
 * Sync jobs execute wrapper.
 *
 * @param bool $force
 *   Make a force synch rather than depend on the schedule frequency.
 */
function valghalla_internal_server_perform_synch($force = TRUE) {
  if (!variable_get('valghalla_internal_server_run_failed_sync', VALGHALLA_INTERNAL_SERVER_RUN_FAILED_SYNC)
    && !variable_get('valghalla_synch_ok', VALGHALLA_INTERNAL_SERVER_SYNC_OK)) {
    watchdog('valghalla_internal_server', 'Synchronization is not valid. ', array(), WATCHDOG_WARNING);
    return;
  }

  // Locking synch.
  if (!lock_acquire('valghalla_internal_server_synch')) {
    watchdog('valghalla_internal_server', 'Cannot start synch process, synch is already in progress. ', array(), WATCHDOG_WARNING);
    return;
  }

  // Update heartbeat.
  $ws = new ExternalWebservice();
  variable_set('valgalla_internal_server_heartbeat', $ws->heartbeat());

  $synchFrequency = intval(variable_get('valghalla_external_server_synch_frequency', 0));
  $nowTs = time();

  $batchExists = FALSE;
  if ($force || (($nowTs - variable_get('valgalla_internal_server_last_clone_timestamp')) / 60) > $synchFrequency) {
    valghalla_internal_server_clone_updated_content();
    $batchExists = TRUE;
  }
  if ($force || (($nowTs - variable_get('valgalla_internal_server_last_push_timestamp')) / 60) > $synchFrequency) {
    valghalla_internal_server_push_updated_content();
    $batchExists = TRUE;
  }

  if ($batchExists) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      if (isset($_GET['destination'])) {
        $destination = $_GET['destination'];
        background_batch_process_batch($destination);
        drupal_goto($destination);
      }
      else {
        background_batch_process_batch(current_path());
      }
    }
  }

  // Unlocking synch.
  lock_release('valghalla_internal_server_synch');
}

/**
 * Synchronization check process.
 */
function valghalla_internal_server_synch_check() {
  $valghalla_synch_ok = FALSE;

  $queue = valghalla_synch_queue_get_items_ordered();
  if (!empty($queue) || !lock_acquire('valghalla_internal_server_synch')) {
    watchdog('valghalla_internal_server', 'Internal server synchronization queue is not empty or synch is in progress. Can not start synch check process.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  $endpoint = valghalla_internal_server_get_external_server_url();
  // JSON responce from external server with data to check synch process.
  // See valghalla_external_server_sync_check().
  $result = drupal_http_request($endpoint . '/rest/sync-check-data');

  if (in_array($result->code, array(200)) && !empty($result->data)) {
    $ext_data = drupal_json_decode($result->data);
    if (!is_array($ext_data)) {
      if ($ext_data == 'synch_queue_not_empty') {
        watchdog('valghalla_internal_server', 'External server synchronization queue is not empty. Can not start synch check process.', array(), WATCHDOG_WARNING);
      }
      else {
        watchdog('valghalla_internal_server', 'Fetched synchronization data is not correct. Can not start synch check process.', array(), WATCHDOG_WARNING);
      }
      return FALSE;
    }
    $data = valghalla_synch_node_export_election_counts();
    $valghalla_synch_ok = TRUE;
    $fails = array();

    foreach ($data as $election_uuid => $election_count) {
      foreach (array('total', 'assigned') as $key) {
        if (!isset($ext_data[$election_uuid][$key])
          || $election_count[$key] != $ext_data[$election_uuid][$key]) {
          $valghalla_synch_ok = FALSE;
          $nodes = entity_uuid_load('node', array($election_uuid));
          $election = reset($nodes);
          $fails[] = array(
            $election_uuid => array(
              'election title' => $election->title,
              'internal_data' => $data[$election_uuid],
              'external_data' => isset($ext_data[$election_uuid]) ? $ext_data[$election_uuid] : NULL,
            ),
          );
        }
      }
    }
    if (!$valghalla_synch_ok) {
      $message = 'Synchronization with internal server failed.' . "<br>\n";
      $message .= 'Not matched data !fails';
      $args = array(
        '!fails' => '<pre>' . print_r($fails, 1) . '</pre>',
      );
      watchdog('valghalla_internal_server', $message, $args, WATCHDOG_WARNING);

      $now = time();
      $report_to = variable_get('valghalla_internal_server_failed_sync_report_mail', FALSE);
      $sync_report_frequesncy = variable_get('valghalla_internal_server_failed_sync_report_frequency', 0);
      $sync_report_last = variable_get('valghalla_internal_server_failed_sync_report_last');
      if ($report_to
        && module_exists('valghalla_mail')
        && $now - $sync_report_last > $sync_report_frequesncy) {
        global $base_url;
        $message = $base_url . "<br>" . $message;
        $params = array(
          'subject' => t('Failed synchronization detected for !sitename. !base_url', array(
            '!sitename' => variable_get('site_name', $_SERVER['SERVER_NAME']),
            '!base_url' => $base_url,
          )),
          'body' => format_string($message, $args),
          'format' => 'html',
          // We are no going to use token replacement here.
          'tokens' => array(),
          'volunteer_nid' => 0,
          'notification_type' => 'direct',
        );
        if (valghalla_notifications_direct_send('mail', $report_to, $params)) {
          variable_set('valghalla_internal_server_failed_sync_report_last', $now);
          watchdog('valghalla_internal_server', 'Sync failed report has been send.');
        }
      }
    }
    else {
      drupal_set_message('Synchronization is ok!');
    }
    variable_set('valghalla_synch_ok', $valghalla_synch_ok);
  }
  else {
    watchdog('valghalla_internal_server', 'Can not validate external sync. Synchronization check data from external server is empty', array(), WATCHDOG_WARNING);
  }

  // Set synch check timestamp.
  variable_set('valgalla_internal_server_last_synch_check', time());

  lock_release('valghalla_internal_server_synch');

  return $valghalla_synch_ok;
}

/**
 * Function to execute clone batch.
 *
 * @param bool $forceStart
 *   If the batch has to be started right away.
 */
function valghalla_internal_server_clone_updated_content($forceStart = FALSE) {
  $updatedContent = array();

  $ws = new ExternalWebservice();

  // Allowing to get limited number of nodes.
  // Limit = VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS * pageSize
  // (default to 20).
  for ($i = 0; $i < VALGHALLA_INTERNAL_SERVER_MAX_SUBSEQ_WS_REQUESTS; $i++) {
    $currentPageContent = $ws->fetchContent($i);

    // If this page returned no results, or the only result is the checksum.
    // No need to proceed further.
    if (empty($currentPageContent) || !is_array($currentPageContent) || isset($currentPageContent[0]->checksum)) {
      break;
    }

    $updatedContent = array_merge($updatedContent, $currentPageContent);
  }

  // Making list of uuids.
  $uuids = array();
  foreach ($updatedContent as $content) {
    if (isset($content->uuid)) {
      $uuids[] = $content->uuid;
    }
  }

  // Using batch to do the heavy operations.
  $batch = valghalla_internal_server_batch_clone($uuids);
  batch_set($batch);

  // If batch is not force started, it must be started manually.
  if ($forceStart) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      background_batch_process_batch(current_path());
    }
  }
}

/**
 * Function to execute push batch.
 *
 * @param bool $forceStart
 *   If the batch has to be started right away.
 */
function valghalla_internal_server_push_updated_content($forceStart = FALSE) {
  // Getting items ordered according by the position the have to be pushed.
  $queueItems = valghalla_synch_queue_get_items_ordered();

  // Using batch to do the heavy operations.
  $batch = valghalla_internal_server_batch_push($queueItems);
  batch_set($batch);

  // If batch is not force started, it must be started manually.
  if ($forceStart) {
    if (drupal_is_cli() && function_exists('drush_main')) {
      drush_backend_batch_process();
    }
    else {
      background_batch_process_batch(current_path());
    }
  }
}

/**
 * Implements hook_node_export_node_alter().
 */
function valghalla_internal_server_node_export_node_alter(&$node, $original_node) {
  $node = valghalla_synch_node_export_anonymize_node($node, variable_get('valghalla_external_server_hash_salt'));
}

/**
 * Implements hook_node_export_node_import_alter().
 *
 * Decrypts the CPR, email and phone.
 *
 * @see valghalla_internal_server_deanonymize_node()
 */
function valghalla_internal_server_node_export_node_import_alter(&$node, $original_node, $save) {
  // Do not write any revision log at this point.
  $node->log = NULL;
  $node = valghalla_internal_server_deanonymize_node($node);
}

/**
 * Implements hook_monolog_channel_info().
 */
function valghalla_internal_server_monolog_channel_info() {
  $channels = array();

  $channels['valghalla_internal_server_channel'] = array(
    'label' => t('Valghalla internal server'),
    'description' => t('The default channel to log Valghalla internal server messages.'),
    'default profile' => 'valghalla_internal_server_profile',
  );

  return $channels;
}

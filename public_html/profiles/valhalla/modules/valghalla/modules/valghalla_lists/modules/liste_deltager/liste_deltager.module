<?php
/**
 * @file
 * liste_deltager.module
 */

/**
 * Implements hook_menu().
 */
function liste_deltager_menu() {
  $items['valghalla_lists/deltagere'] = array(
    'title' => 'Deltagerlister',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('liste_deltager_form'),
    'access arguments' => array('liste deltager see list'),
  );

  $saved_filters = variable_get('liste_deltager_saved_filters', array());

  foreach ($saved_filters as $id => $filter) {
    $items['valghalla_lists/gemt_liste-' . $id] = array(
      'title' => 'Gemt liste: ' . $filter['name'],
      'page callback' => 'drupal_goto',
      'page arguments' => array('valghalla_lists/deltagere/' . $id),
      'access arguments' => array('liste deltager see list'),
      'weight' => 100,
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function liste_deltager_permission() {
  return array(
    'liste deltager see list' => array(
      'title' => 'Se "Deltagerlister"',
      'description' => 'Dette tillader kun brugeren at se gemte lister',
    ),
    'liste deltager change filters' => array(
      'title' => 'Ændre filtre på "Deltagerlister"',
      'description' => 'Dette tillader brugeren at se gemte liste og skifte deres filtre',
    ),
    'liste deltager administer saved filters' => array(
      'title' => 'Gemme filtre på "Deltagerlister"',
      'description' => 'Dette tillader brugeren at se gemme filtre',
    ),
  );
}

/**
 * Form callback for "Deltager lister".
 */
function liste_deltager_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'liste_deltager') . '/js/liste_deltager.js');

  $form['save_filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gem filtre'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#access' => user_access('liste deltager administer saved filters'),
  );

  $form['filter'] = array(
    '#access' => user_access('liste deltager change filters'),
  );

  // Show columns.
  $form['filter']['columns'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Kolonner'),
    '#prefix' => '<div class="no-print"><div class="col-left">',
    '#suffix' => '<a class="js-select-all" href="#">Vælg alle</a></div>',
    '#options' => _liste_deltager_columns(),
  );

  // Filter volunteers.
  $form['filter']['polling_station'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#size' => 8,
    '#title' => 'Valgsted',
    '#options' => liste_deltager_polling_station_options(),
    '#prefix' => '<div class="col-right"><div>',
    '#suffix' => '<a class="js-select-all" href="#">Vælg alle</a></div>',
  );

  $form['filter']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Rolle(r)'),
    '#options' => _valghalla_helper_get_roles(),
    '#prefix' => '<div class="col-left">',
    '#suffix' => '<a class="js-select-all" href="#">Vælg alle</a></div>',
  );

  $form['filter']['party'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Parti(er) (plads)'),
    '#prefix' => '<div class="col-right">',
    '#suffix' => '<a class="js-select-all" href="#">Vælg alle</a>',
    '#options' => _valghalla_helper_get_parties(),
  );

  $form['filter']['rsvp'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Status'),
    '#options' => array(
      0 => 'Ikke besvaret',
      1 => 'Ja',
      2 => 'Nej',
      3 => 'Aldrig',
    ),
    '#suffix' => '<a class="js-select-all" href="#">Vælg alle</a></div></div>',
  );

  $saved_filters = variable_get('liste_deltager_saved_filters', array());
  $saved_filters_list = '<ul>';

  foreach ($saved_filters as $id => $filter) {
    $saved_filters_list .= '<li>' . l($filter['name'], 'valghalla_lists/deltagere/' . $id) . '</li>';
  }
  $saved_filters_list .= '</ul>';

  $form['save_filters']['filters'] = array(
    '#title' => 'Filtre',
    '#type' => 'item',
    '#markup' => $saved_filters_list,
  );

  $form['save_filters']['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Navn på filter',
    '#suffix' => '<p><small>Opdateres navnet gemmes nyt filter med dette.</small></p>',
  );

  $form['save_filters']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Gem',
    '#submit' => array('liste_deltager_save_filter'),
    '#suffix' => '<p><small>Gem aktivkt filter.</small></p>',
  );

  $form['save_filters']['delete'] = array(
    '#type' => 'submit',
    '#value' => 'Slet',
    '#submit' => array('liste_deltager_delete_filter'),
    '#suffix' => '<p><small>Slet aktivt filter</small></p>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Opdater'),
    '#suffix' => '</div>',
  );

  if (isset($saved_filters[arg(2)])) {

    $input = $saved_filters[arg(2)]['input'];
    $filter = $saved_filters[arg(2)];
    drupal_set_title('Gemt liste: ' . $filter['name']);

    $form['filter']['columns']['#default_value'] = $input['columns'];
    $form['filter']['polling_station']['#default_value'] = $input['polling_station'];
    $form['filter']['roles']['#default_value'] = $input['roles'];
    $form['filter']['party']['#default_value'] = $input['party'];
    $form['filter']['rsvp']['#default_value'] = $input['rsvp'];
    $form['save_filters']['name']['#default_value'] = $saved_filters[arg(2)]['name'];
  }

  if (isset($form_state['rebuild']) && $form_state['rebuild']) {
    $form['print'] = array(
      '#type' => 'button',
      '#value' => t('Print'),
      '#attributes' => array('onclick' => 'javascript: window.print();'),
      '#prefix' => '<div class="no-print print-button">',
      '#suffix' => '</div>',
    );

    $form['results'] = array(
      '#markup' => liste_deltager_generate_list($form_state['values']),
    );
  }
  if (!$election_node = node_load($_SESSION['election_nid'])) {
    return array(array('#markup' => 'Du skal vælge et valg i dropdown menuen øverst.'));
  }

  return $form;
}

/**
 * Save filter callback.
 */
function liste_deltager_save_filter(&$form, &$form_state) {
  $id = strtolower(preg_replace("/[^A-Za-z0-9]/", '', $form_state['values']['name']));
  $name = $form_state['values']['name'];

  $saved_filters = variable_get('liste_deltager_saved_filters', array());

  $input = $form_state['input'];

  $saved_filters[$id]['name'] = $name;
  $saved_filters[$id]['input'] = $input;

  variable_set('liste_deltager_saved_filters', $saved_filters);
  menu_rebuild();
  drupal_goto('valghalla_lists/deltagere/' . $id);
}

/**
 * Delete filter callback.
 */
function liste_deltager_delete_filter(&$form, &$form_state) {
  $saved_filters = variable_get('liste_deltager_saved_filters', array());

  unset($saved_filters[arg(2)]);

  variable_set('liste_deltager_saved_filters', $saved_filters);
  menu_rebuild();
  drupal_goto('valghalla_lists/deltagere');
}
/**
 * Submit callback for "Delager lister".
 */
function liste_deltager_form_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Generate list of volunteers.
 */
function liste_deltager_generate_list($values) {
  $variables = array();

  if ($values['polling_station']) {
    $variables['header'] = liste_deltager_generate_header($values);

    foreach ($values['polling_station'] as $polling_station) {
      $_values = $values;
      $_values['polling_station'] = $polling_station;

      $variables['header'][$polling_station] = liste_deltager_generate_header($_values);

      $variables['table'][$polling_station] = liste_deltager_generate_table($_values);
    }
  }

  return theme('liste_deltager_list', $variables);
}

/**
 * Generate header for list.
 */
function liste_deltager_generate_header($values) {
  $header = array();

  if ($election = node_load($_SESSION['election_nid'])) {
    $header['election'] = $election->title;

    $election_date_field = field_get_items('node', $election, 'field_date');
    $header['date'] = strtolower(format_date(strtotime($election_date_field[0]['value']), 'custom', 'l, j. F, Y'));
  }

  if ($polling_station = node_load($values['polling_station'])) {
    $header['polling_station'] = $polling_station->title;
    $header['adress'] = valghalla_polling_station_get_adress($polling_station);

    if ($school_code_field = field_get_items('node', $polling_station, 'field_venue_skolekode')) {
      $header['schoolcode'] = $school_code_field[0]['value'];
    }

    $header['contact_info'] = valghalla_polling_station_get_contact($polling_station);
  }

  return $header;
}

/**
 * Generate table of volunteers.
 */
function liste_deltager_generate_table($values) {
  $header = array();
  $rows = array();

  $available_columns = _liste_deltager_columns();
  foreach ($values['columns'] as $column => $checked) {
    if ($checked) {
      $header[] = $available_columns[$column];
    }
  }

  foreach (liste_deltager_get_volunteers($values) as $key => $volunteer) {
    $rows[$key] = array();
    foreach ($values['columns'] as $column => $checked) {
      if ($checked) {
        $rows[$key][$column] = $volunteer[$column];
      }
    }
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Get a list of volunteers.
 */
function liste_deltager_get_volunteers($values) {
  // Prepare statement.
  $volunteer_query = new EntityFieldQuery();
  $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo');

  $roles = count($values['roles']) > 0 ? $values['roles'] : FALSE;
  $party = count($values['party']) > 0 ? $values['party'] : FALSE;

  $rsvp_filter = count($values['rsvp']) > 0 ? $values['rsvp'] : FALSE;
  $polling_station = count($values['polling_station']) > 0 ? $values['polling_station'] : FALSE;

  $rsvp_map = array(
    0 => '-',
    1 => 'Ja',
    2 => 'Nej',
    3 => 'Aldrig',
  );

  if ($_SESSION['election_nid']) {
    $volunteer_query->fieldCondition('field_election', 'target_id', $_SESSION['election_nid']);
  }
  if ($roles) {
    $volunteer_query->fieldCondition('field_post_role', 'target_id', $roles);
  }
  if ($party) {
    $volunteer_query->fieldCondition('field_post_party', 'target_id', $party);
  }
  if ($polling_station) {
    $volunteer_query->fieldCondition('field_vlnt_station', 'target_id', $polling_station);
  }

  $result = array_keys(array_shift($volunteer_query->execute()));

  $parties = _valghalla_helper_get_parties();
  $roles_array = _valghalla_helper_get_roles();

  if (db_table_exists('field_election_roles_diaet')) {
    $diet_rows = db_query("SELECT * FROM {field_election_roles_diaet} r WHERE r.nid = " . $_SESSION['election_nid'])->fetchObject();

    if (!is_null($diet_rows)) {
      $diet_data = unserialize($diet_rows->role_diaet_value);
    }

    foreach ($roles_array as $id => $role) {
      $diet_map[$role] = $diet_data[$id];
    }
  }

  $values = array();

  // Loop over results, get info for all columns.
  foreach ($result as $key => $fc_id) {
    $volunteer_fc = entity_load_single('field_collection_item', $fc_id);
    if (!is_object($volunteer_fc)) {
      continue;
    }

    $volunteer = $volunteer_fc->hostEntity();

    $party_post_field = field_get_items('field_collection_item', $volunteer_fc, 'field_post_party');
    $party_post = $parties[$party_post_field[0]['target_id']];

    $rsvp_field = field_get_items('field_collection_item', $volunteer_fc, 'field_rsvp');
    $rsvp = $rsvp_map[$rsvp_field[0]['value']];

    if (!in_array($rsvp_field[0]['value'], $rsvp_filter, TRUE)) {
      continue;
    }

    $party_field = field_get_items('node', $volunteer, 'field_party');
    $party = $parties[$party_field[0]['tid']];

    $cpr_field = field_get_items('node', $volunteer, 'field_cpr_number');

    if (user_access('see all psn numbers')) {
      $cpr = $cpr_field[0]['value'];
    }
    else {
      $cpr = substr($cpr_field[0]['value'], 0, 6);
    }

    $tokens = _valghalla_helper_get_token_values($volunteer_fc);

    // Diet.
    $diet = $diet_map[$tokens['!position']];

    // If it's set on the fc item, use that. Otherwise we just keep
    // the value set on the election.
    if ($diaet_field = field_get_items('field_collection_item', $volunteer_fc, 'field_diaet')) {
      $diet = $diaet_field[0]['value'];
    }

    $day = substr($cpr, 0, 2);
    $month = substr($cpr, 2, 2);
    $year = substr($cpr, 4, 2);

    $date = DateTime::createFromFormat('d-m-y', $day . '-' . $month . '-' . $year);
    $now = new DateTime();
    $interval = $now->diff($date);
    $age = $interval->y;

    $values[] = array(
      'name' => $tokens['!name'],
      'role' => $tokens['!position'],
      'mail' => $tokens['!email'],
      'phone' => $tokens['!phone'],
      'rsvp' => $rsvp,
      'cpr' => $cpr,
      'age' => $age,
      'party' => $party,
      'party_post' => $party_post,
      'diet' => $diet,
      'sign' => '<div class="sign-col"></div>',
    );
  }

  return $values;
}

/**
 * Implements hook_theme().
 */
function liste_deltager_theme() {
  return array(
    'liste_deltager_list' => array(
      'template' => 'liste_deltager_list',
    ),
  );
}

/**
 * A list of columns that could be shown in the list.
 */
function _liste_deltager_columns() {
  return array(
    'name' => 'Navn',
    'cpr' => 'Cpr-nr.',
    'age' => 'Alder',
    'role' => 'Rolle',
    'rsvp' => 'RSVP',
    'phone' => 'Telefon',
    'mail' => 'Mail',
    'party' => 'Parti (deltager)',
    'party_post' => 'Parti (plads)',
    'diet' => 'Diæt',
    'sign' => 'Kvittering',
  );
}

/**
 * Generate list of polling stations.
 */
function liste_deltager_polling_station_options() {
  if (!$election_node = node_load($_SESSION['election_nid'])) {
    return array('Du skal vælge et valg i dropdown menuen øverst.');
  }

  // Generate options list, with polling stations.
  $polling_stations_field = field_get_items('node', $election_node, 'field_polling_stations');

  foreach ($polling_stations_field as $data) {
    $polling_station_nids[$data['target_id']] = $data['target_id'];
  }

  foreach (node_load_multiple($polling_station_nids) as $polling_station) {
    if ($constituency_field = field_get_items('node', $polling_station, 'field_constituency')) {
      // We save the data in 2 arrays, and don't populate options yet, as we
      // have to sort the options according to the title of the
      // constituencies.
      $constituency = node_load($constituency_field[0]['nid']);
      $constituencies[$constituency->nid] = $constituency->title;
      $polling_stations[$constituency->nid][$polling_station->nid] = $polling_station->title;
    }
    else {
      $options[$polling_station->nid] = $polling_station->title;
    }
  }

  if ($constituencies && $polling_stations) {
    natsort($constituencies);

    foreach ($constituencies as $constituency_nid => $constituency_title) {
      $options[$constituency_title] = $polling_stations[$constituency_nid];
    }
  }

  return $options;
}

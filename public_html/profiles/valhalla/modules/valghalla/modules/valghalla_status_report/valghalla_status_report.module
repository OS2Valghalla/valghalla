<?php
/**
 * @file
 * Valhalla blocks module
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright Bellcom Open Source aps.
 *
 * This module is responsible for the overview/status blocks.
 *  - These blocks are fetched asynchronously. The 2 Drupal
 *    blocks just insert a placeholder to be filled out, and
 *    instansiate rendering of the markup.
 * As well as the change election and change party blocks.
 *  - These 2, do not rely on the frontpage, and can be used
 *    wherever.
 */

use Drupal\Valghalla\Pdf;

/**
 * Implements hook_menu().
 */
function valghalla_status_report_menu() {
  $items['valghalla/report'] = array(
    'title' => t('Status rapport'),
    'page callback' => 'valghalla_status_report_generator',
    'access callback' => 'user_is_logged_in',
  );
  $items['valghalla/test-cron'] = array(
    'title' => t('Cron test'),
    'page callback' => '_valghalla_status_report_cron',
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function valghalla_status_report_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['valghalla_status_report_polling_station'] = array(
    'variables' => array(
      'parties_status' => NULL,
      'pollingstation_nid' => NULL,
      'party_posts_to_fill' => NULL,
      'existing_roles' => NULL,
    ),
    'template' => 'valghalla_status_report__polling_station',
  );

  return $items;
}

/*
 * Implements hook_form_alter().
 */
function valghalla_status_report_form_alter(&$form, $form_state, $form_id) {

  // First, check for the node type configuration form.
  if ($form_id == 'valghalla_notifications_admin_settings') {

    // Status report settings.
    $form['valghalla_notifications']['valghalla_status_report_days'] = array(
      '#type' => 'textfield',
      '#title' => t('Status rapport'),
      '#description' => t('Liste af dage før valg der skal udsendes en status rapport til valgets partier. Dage skal være adskilt af komma ( , ). f.eks. 14, 7, 5, 3'),
      '#default_value' => variable_get('valghalla_status_report_days', '14, 7, 5, 3'),
    );

    // Add validate function.
    $form['#validate'][] = 'valghalla_status_report_form_validate';
  }
}

/*
 * Implements hook_form_validate().
 */
function valghalla_status_report_form_validate($form, &$form_state) {

  // Status report.
  if (preg_match('/[^\d|,| ]/', $form_state['values']['valghalla_status_report_days'])) {
    // Found illigal chars in the form.
    form_set_error('valghalla_status_report_days', 'Dette felt skal være en komma-separeret liste af hele tal.');
  }
}

/**
 * Generates a PDF report
 */
function valghalla_status_report_generator() {
  $pdf = new Pdf();

  // Generate PDF.
  $content = _generate_pdf_content();
  $pdf->WriteHTML($content);

  // Sent PDF to the browser.
  $pdf->Output();
}

/**
 * Generate overview markup.
 */
function _valghalla_status_report_generate_overview_markup($count) {
  $label = _valghalla_status_report_get_label($count['total_count']);
  $markup = '
        <table class="table">
          <thead>
            <tr>
              <th></th>
              <th class="column-label">I alt</th>
              <th class="column-label">Mangler</th>
            </tr>
          </thead>
          <tr>
            <td><div class="partistatusenhed">' . t('Status total') . '</div></td>
            <td class="column-count ' . $label . '">' . $count['total_count']['total'] . '/' . $count['total_count']['assigned'] . '</td>
            <td class="column-count">' . ($count['total_count']['assigned'] - $count['total_count']['total']) . '</td>
          </tr>
          <tr>
            <td>' . t('Bekræftede') . '</td>
            <td class="column-count">' . $count['total_count']['rsvp_ok'] . '</td>
            <td></td>
          </tr>
          <tr>
            <td>' . t('Afviste') . '</td>
            <td class="column-count">' . $count['total_count']['rsvp_no'] . '</td>
            <td></td>
          </tr>
          <tr>
            <td>' . t('Afventer svar') . '</td>
            <td class="column-count">' . ($count['total_count']['total'] - ($count['total_count']['rsvp_ok'] + $count['total_count']['rsvp_no'])) . '</td>
            <td></td>
          </tr>

        </table>';

  $markup .= '<table class="table">
                <thead>
                  <tr>
                    <th>' . t('Roller') . '</th>
                    <th class="column-label">' . t('I alt') . '</th>
                    <th class="column-label">' . t('Mangler') . '</th>
                  </tr>
                </thead>';

  $roles = odin_get_roles();

  foreach ($count['role_count'] as $role_nid => $role_count) {
    if ($role_count['assigned'] == 0) {
      // Skip roles that have no assigned posts.
      continue;
    }

    $label = _valghalla_status_report_get_label($role_count);
    $markup .= '
        <tr>
          <td class="column-first">' . $roles[$role_nid] . '</td>
          <td class="column-count ' . $label . '">' . $role_count['total']
          . '/' . $role_count['assigned'] . '</td>
          <td class="column-count">' .
          ($role_count['assigned'] - $role_count['total']) . '</td>
        </tr>';
  }

  $markup .= '</table>';

  return $markup;
}

/**
 * Generates table markup for constituency.
 */
function _valghalla_status_report_generate_constituency_markup($constituency_nids, $polling_station_count) {
  $roles = odin_get_roles();

  $constituencies = array();

  foreach ($constituency_nids as $constituency_nid => $polling_station_nids) {
    $constituency_node = node_load($constituency_nid);

    $constituency_total = array(
      'total_count' => array(
        'assigned' => 0,
        'total'    => 0,
        'rsvp_ok'  => 0,
        'rsvp_no'  => 0,
      ),
      'role_count' => array(),
    );

    // Count constituency totals.
    foreach ($polling_station_count as $polling_station_nid => $data) {
      if (in_array($polling_station_nid, array_keys($polling_station_nids))) {
        $constituency_total['total_count']['assigned'] += $data['total_count']['assigned'];
        $constituency_total['total_count']['total']    += $data['total_count']['total'];
        $constituency_total['total_count']['rsvp_ok']  += $data['total_count']['rsvp_ok'];
        $constituency_total['total_count']['rsvp_no']  += $data['total_count']['rsvp_no'];

        foreach ($data['role_count'] as $role_nid => $role_count) {
          if (!isset($constituency_total['role_count'][$role_nid])) {
            $constituency_total['role_count'][$role_nid] = array(
              'assigned' => 0,
              'total'    => 0,
              'rsvp_ok'  => 0,
              'rsvp_no'  => 0,
            );
          }
          $constituency_total['role_count'][$role_nid]['assigned'] += isset($role_count['assigned']) ? $role_count['assigned'] : 0;
          $constituency_total['role_count'][$role_nid]['total']    += isset($role_count['total'])    ? $role_count['total'] : 0;
          $constituency_total['role_count'][$role_nid]['rsvp_ok']  += isset($role_count['rsvp_ok'])  ? $role_count['rsvp_ok'] : 0;
          $constituency_total['role_count'][$role_nid]['rsvp_no']  += isset($role_count['rsvp_no'])  ? $role_count['rsvp_no'] : 0;
        }
      }
    }

    $header_markup = '';
    $bottom_markup = '';

    // Generate header and bottom rows, for each constituency.
    foreach ($roles as $role_nid => $role_title) {
      $header_markup .= '<th class="column-label">' . $role_title . '</th>';

      // Generate bottom totals row.
      $label = _valghalla_status_report_get_label($constituency_total['role_count'][$role_nid]);

      $bottom_markup .= '<td class="total column-count ' . $label . ' ">' . $constituency_total['role_count'][$role_nid]['total'];
      $bottom_markup .= '/' . $constituency_total['role_count'][$role_nid]['assigned'] . '</td>';
    }

    // Generate constituency status block.
    $markup = '<table class="table"><thead><tr><th>' . $constituency_node->title . '</th>';
    $markup .= $header_markup;
    $markup .= '<th class="column-label">I alt</th>';
    $markup .= '</tr></thead>';
    $markup .= _valghalla_status_report_generate_polling_station_markup($polling_station_nids,
                                                                $polling_station_count);

    $markup .= '<tr><td class="total">I alt</td>';
    $markup .= $bottom_markup;

    $label = _valghalla_status_report_get_label($constituency_total['total_count']);

    $markup .= '<td class="total column-count ' . $label . ' ">' . $constituency_total['total_count']['total'];
    $markup .= '/' . $constituency_total['total_count']['assigned'] . '</td>';
    $markup .= '</tr>';
    $markup .= '</table>';

    $constituencies[$constituency_node->title] = $markup;
  }

  ksort($constituencies);

  $markup = implode('', $constituencies);

  return $markup;
}

/**
 * Generates row markup for overview page.
 */
function _valghalla_status_report_generate_polling_station_markup($polling_station_nids, $polling_station_count) {
  $markup = '';

  foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {

    // Check if there is no assigned roles to the statation, and total count is zero.
    if ($polling_station_count[$polling_station_nid]['total_count']['total'] == 0 &&
        $polling_station_count[$polling_station_nid]['total_count']['assigned'] == 0 ) {
      continue;
    }

    $markup .= '<tr><td class="column-first">' . $polling_station_title . '</td>';

    foreach ($polling_station_count[$polling_station_nid]['role_count'] as $role_nid => $role_count) {
      $label = _valghalla_status_report_get_label($role_count);

      $markup .= '<td class="column-count ' . $label . '">'  .    $role_count['total'] . '/' . $role_count['assigned'] . '</td>';
    }

    $label = _valghalla_status_report_get_label($polling_station_count[$polling_station_nid]['total_count']);

    $markup .= '<td class="column-count ' . $label . '">'  .  $polling_station_count[$polling_station_nid]['total_count']['total'];
    $markup .= '/' . $polling_station_count[$polling_station_nid]['total_count']['assigned'] . '</td>';

    $markup .= '</tr>';
  }
  return $markup;
}

/**
 * Helper, find status label.
 */
function _valghalla_status_report_get_label($count) {
  $label = '';
  if ($count['total'] == $count['assigned']) {
    $label = 'warning';
  }
  if ($count['rsvp_ok'] == $count['assigned']) {
    $label = 'success';
  }
  if ($count['rsvp_no']) {
    $label = 'danger';
  }
  return $label;
}

/**
 * Generate PDF content.
 */
function _generate_pdf_content($election_nid = NULL, $party_tid = NULL) {
  $markup = '';

  // If we didnt pass an election nid, TRY to use the one from the session.
  if (! $election_nid) {

    if (isset($_SESSION['election_nid'])) {
      $election_nid = $_SESSION['election_nid'];
    }
  }

  // Load election.
  $election_node = node_load($election_nid);

  // We need to know what polling stations are active in this
  // election.
  $polling_station_nids = odin_get_polling_stations($election_node->nid);

  if (empty($polling_station_nids)) {
    return t('Der er ingen valgsteder på dette valg.');
  }
  if (!is_object($election_node)) {
    return t('Der er ikke valgt et valg.');
  }

  $markup .= '<h1>' . t('Status rapport') . '</h1>';

  // Party status.
  $markup .= _generate_pdf_content__party_status($party_tid, $polling_station_nids);

  // Constituency status.
  $markup .= _generate_pdf_content__party_constituency_status($party_tid, $polling_station_nids);

  // We are requiring a specific party.
  if ($party_tid) {

    // External links.
    $markup .= '<pagebreak>';

    $markup .= '<h1>' . t('Eksterne links') . '</h1>';
    $markup .= _generate_pdf_content__party_external_links($party_tid);
  }

  // Volunteer list.
  $markup .= '<pagebreak>';
  $markup .= '<h1>' . t('Deltagerliste') . '</h1>';

  $markup .= _generate_pdf_content__volunteer_list_from_polling_station($party_tid, $polling_station_nids);

  return $markup;
}

/*
 * Generate markup for external links part of PDF.
 */
function _generate_pdf_content__party_external_links($party_tid = NULL) {
  $roles = odin_get_roles();

  // Link to external signup link for this party.
  $party_url = 'http://someurl.com?party_id=' . $party_tid;

  $markup = '<h3 style="margin-bottom: 0;">' . t('Parti:') . '</h3>';
  $markup .= '- <a href="' . $party_url . '">' . $party_url . '</a>';

  $markup .= '<br><br>';

  // Loop through all roles, and create an "external signup" link for this role.
  if ($roles) {
    $markup .= '<h3>' . t('Parti og roller:') . '</h3>';

    foreach($roles as $role_nid => $role_title) {
      $role_url = 'http://someurl.com?role_id=' . $role_nid;

      $markup .= '<div>';
      $markup .=   '<h4 style="margin-bottom: 0;"><strong>' . $role_title . ':</strong></h4>';
      $markup .=   '- <a href="' . $role_url . '">' . $role_url . '</a>';
      $markup .= '</div>';
    }
  }

  return $markup;
}

/**
 * Generate content for party status.
 */
function _generate_pdf_content__party_status($party_tid, $polling_station_nids) {
  $markup = '';
  global $user;

  $user_entity = user_load($user->uid);
  $user_party_id = empty($user_entity->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user_entity->field_party[LANGUAGE_NONE][0]['tid'];

  // Get polling stations user is allowed to see.
  $restrict_polling_stations = array();

  if (!empty ($user_entity->field_polling_station[LANGUAGE_NONE])) {
    foreach ($user_entity->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  // We also need the roles.
  $roles = odin_get_roles();

  $count = odin_get_volunteers_count($_SESSION['election_nid'],
    array_keys($polling_station_nids),
    $roles,
    $user_party_id);
  $markup .= _valghalla_status_report_generate_overview_markup($count);

  return $markup;
}

/**
 * Generate content for party constituency status.
 */
function _generate_pdf_content__party_constituency_status($party_tid, $polling_station_nids) {
  global $user;
  $markup = '';

  $user_entity = user_load($user->uid);
  $user_party_id = empty($user_entity->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user_entity->field_party[LANGUAGE_NONE][0]['tid'];

  // Get polling stations user is allowed to see.
  $restrict_polling_stations = array();
  if (!empty ($user_entity->field_polling_station[LANGUAGE_NONE])) {
    foreach ($user_entity->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  // We also need the roles.
  $roles = odin_get_roles();

  // We need info on the polling station nodes (constituency)
  // So we just load them all.
  foreach ($polling_station_nids as $polling_station_nid => $polling_station_title) {

    // If the array of restricting stations is not empty we only let the
    // user see the polling stations in this array.
    if (!empty($restrict_polling_stations) && !in_array($polling_station_nid, $restrict_polling_stations)) {
      continue;
    }

    $polling_station_count[$polling_station_nid] = odin_get_volunteers_count(
      $_SESSION['election_nid'],
      array($polling_station_nid),
      $roles,
      $user_party_id);
  }
  $constituency_nids = odin_get_constituencies($_SESSION['election_nid']);
  $markup .= _valghalla_status_report_generate_constituency_markup($constituency_nids, $polling_station_count);

  return $markup;
}

/*
 * Generates a list of volunteers.
 */
function _generate_pdf_content__volunteer_list_from_polling_station($party_tid = NULL, $polling_station_nids) {
  global $user;

  $restrict_polling_stations = FALSE;
  $user = user_load($user->uid);
  $selected_party_tid = $party_tid;

  // Try to load a selected party tid from the user.
  if (! $party_tid) {
    $selected_party_tid = $user_party_id = empty($user->field_party[LANGUAGE_NONE][0]['tid']) ? FALSE : $user->field_party[LANGUAGE_NONE][0]['tid'];
  }

  if (!empty ($user->field_polling_station[LANGUAGE_NONE])) {
    $restrict_polling_stations = array();

    foreach ($user->field_polling_station[LANGUAGE_NONE] as $station) {
      $restrict_polling_stations[] = $station['nid'];
    }
  }

  $final_output = '';

  // Run through all polling stations.
  foreach($polling_station_nids as $polling_station_nid => $name) {
    $polling_station = node_load($polling_station_nid);

    $markup = '<h2>' . $polling_station->title . '</h2>';

    if (user_access('valghalla see all parties') && !$selected_party_tid) {
      // If the user is administrator and theres no party chosen, show all parties!
      $parties = odin_get_parties();

      foreach ($parties  as $party_tid => $party_name) {
        if (is_array($restrict_polling_stations) && !in_array($polling_station->nid, $restrict_polling_stations)) {
          continue;
        }

        // Polling stations.
        if ($output = _generate_pdf_content__volunteer_list__markup($polling_station, $party_tid)) {
          $markup .= $output;
        }
      }
    }
    else {

      if ($output = _generate_pdf_content__volunteer_list__markup($polling_station, $selected_party_tid)) {
        $markup .= $output;
      }
    }

    // Let the user edit the node, if he/she has sufficient permissions.
    $node_edit = '';

    if (node_access('update', node_load(arg(2)))) {
      $node_edit_url = '/node/' . arg(2) . '/edit?destination=' . current_path();
      $node_edit = '<div><a class="btn btn-secondary edit-polling-station hidden" href="' . $node_edit_url . '">' . t('Rediger valgsted') . '</a></div>';
    }

    $final_output .= $node_edit . $markup;
  }

  return $final_output;
}

/**
 * Generate list markup for polling station.
 */
function _generate_pdf_content__volunteer_list__markup($polling_station, $user_party_id) {
  $posts_array = valghalla_volunteers_polling_station_posts_to_fill($polling_station, $user_party_id);

  if (!empty($posts_array['party_posts_to_fill'])) {
    $parties_status = array();

    // Filling party status information.
    $status = odin_get_volunteers_count($_SESSION['election_nid'], array($polling_station->nid), odin_get_roles(), $user_party_id);

    $parties_status[$user_party_id] = array(
      'party_status_label' => _valhalla_blocks_get_label($status['total_count']),
      'status' => $status
    );

    // Return the themed values.
    return theme('valghalla_status_report_polling_station', array(
      'parties_status' => $parties_status,
      'pollingstation_nid' => $posts_array['station_nid'],
      'party_posts_to_fill' => $posts_array['party_posts_to_fill'],
    ));
  }
}

/**
 * Send out notifications via cron.
 */
function _valghalla_status_report_cron() {
  $elections = odin_get_active_elections();
  $report_broadcast = FALSE;

  // Run through all elections.
  foreach ($elections as $election_nid) {
    $election = node_load($election_nid);

    // We are supposed to sent out emails to parties.
    if ($field_report_broadcast = field_get_items('node', $election, 'field_election_report_broadcast')) {
      $report_broadcast = (bool) $field_report_broadcast[0]['value'];
    }

    // If we are not supposed to sent out emails, we abort!
    if ($report_broadcast !== TRUE) {
      return;
    }

    // Load all parties.
    $parties = odin_get_parties();

    // Run through all parties.
    foreach($parties as $party_tid => $party_name) {
      $party = taxonomy_term_load($party_tid);
      $party_should_recieve_emails = FALSE;
      $recipient = NULL;
      $cvr_number = NULL;
      $pdf = new Pdf();
      $content = '';
      $file = NULL;

      // Check if this party should receive emails.
      if ($field_allow_broadcast = field_get_items('taxonomy_term', $party, 'field_recieve_pdf_broadcast')) {
        $party_should_recieve_emails = (bool) $field_allow_broadcast[0]['value'];
      }
      if ($party_should_recieve_emails !== TRUE) {
        return;
      }

      // Collect details necessary for sending out notifications.
      if ($field_email = field_get_items('taxonomy_term', $party, 'field_email_address')) {
        $recipient = $field_email[0]['email'];
      }
      if ($field_cvr_number = field_get_items('taxonomy_term', $party, 'field_cvr_number')) {
        $cvr_number = $field_cvr_number[0]['safe_value'];
      }
      if (! $recipient OR ! $cvr_number) {
        return;
      }

      // Generate PDF.
      $content = _generate_pdf_content($election_nid, $party_tid);
      $pdf->WriteHTML($content);

//      $file = $pdf->Output('', 'S');
      $pdf->Output();

      if (!$pdf) {
        return;
      }

      // Send PDF to e-boks.
      if ($cvr_number) {}

      // Send PDF via e-mail.
      else if($recipient) {}
    }
  }
}

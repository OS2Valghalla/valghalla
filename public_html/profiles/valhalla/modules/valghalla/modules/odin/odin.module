<?php
/**
 * Helper module
 *
 * Named after the god Odin from the norse mythology, who drank from
 * the well of wisdom.
 */

/**
 * Retrieve party tid for next free seat on specified parameters
 */
function odin_party_tid_for_next_free_seat($election_nid, $polling_station_nid, $role_nid) {
  $parties = _valghalla_helper_get_parties();
  $polling_station = node_load($polling_station_nid);

  foreach ($parties as $party_tid => $party) {
    $posts_array = valghalla_volunteers_to_polling_station_roles($polling_station, $party_tid, $election_nid);

    foreach ($posts_array['existing'] as $key => $existing) {
      unset($posts_array['posts_to_fill'][$key]);
    }
    foreach ($posts_array['posts_to_fill'] as $post_to_fill) {
      if ($post_to_fill['role_nid'] == $role_nid) {
        return $party_tid;
      }
    }
  }
}


/**
 * Get count for roles and total
 * @params
 *  $eleciton_nid
 *  $polling_station_nids
 *  $roles
 *  $user_party_id
 */
function odin_get_volunteers_count($election_nid, $polling_station_nids, $roles, $user_party_id = NULL) {
  $total_count = array(
      'assigned' => 0,
      'total' => 0,
      'rsvp_ok' => 0,
      'rsvp_no' => 0,
    );

  foreach ($roles as $role_nid => $role_title) {
    //
    // Total assinged roles
    //
    $assigned_count = _valghalla_helper_get_roles_count($polling_station_nids, $role_nid, $user_party_id);
    $role_count[$role_nid]['assigned'] = is_numeric($assigned_count) ? $assigned_count: 0;
    $total_count['assigned'] += $role_count[$role_nid]['assigned'];

    //
    // Total assigned for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid);

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $result = array_shift($volunteer_query->execute());

    $role_count[$role_nid]['total'] = count($result);
    $total_count['total'] += $role_count[$role_nid]['total'];

    //
    // Total replied ok for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 1 corresponds to ok
      ->fieldCondition('field_rsvp', 'value', 1);

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $result = array_shift($volunteer_query->execute());

    $role_count[$role_nid]['rsvp_ok'] = count($result);
    $total_count['rsvp_ok'] += $role_count[$role_nid]['rsvp_ok'];

    //
    // Total replied no for role
    //
    $volunteer_query = new EntityFieldQuery();

    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
      ->entityCondition('bundle', 'field_electioninfo')
      ->fieldCondition('field_election', 'target_id', $election_nid)
      ->fieldCondition('field_vlnt_station', 'target_id', $polling_station_nids)
      ->fieldCondition('field_post_role', 'target_id', $role_nid)
      // RVSP 2,3 is no
      ->fieldCondition('field_rsvp', 'value', array(2, 3));

    if ($user_party_id) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $user_party_id);
    }

    $result = array_shift($volunteer_query->execute());

    $role_count[$role_nid]['rsvp_no'] = count($result);
    $total_count['rsvp_no'] += $role_count[$role_nid]['rsvp_no'];
  }

  return $count = array('total_count' => $total_count, 'role_count' => $role_count);
}

/**
 * Retrive volunteer node by cpr number
 *
 * @param string $cpr
 * @return mixed stdClass on success otherwise false
 */
function odin_load_volunteer_by_cpr($cpr) {
  $entity_id = db_select('field_data_field_cpr_number', 't')
      ->fields('t', array('entity_id'))
      ->condition('entity_type', 'node', '=')
      ->condition('bundle', 'volunteers', '=')
      ->condition('field_cpr_number_value', $cpr, '=')
      ->execute()
      ->fetchField();

  if ($entity_id) {
    return node_load($entity_id);
  }

  return FALSE;
}


function odin_get_future_elections() {
  $election_query = new EntityFieldQuery();
  $election_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'election')
    ->fieldCondition('field_date', 'value', date('Y-m-d'), '>');
  $result = $election_query->execute();

  if (isset($result['node'])) {
    return array_keys(array_shift($result));
  }
  return FALSE;
}

<?php

/**
 * Valghalla mail module
 *
 * @file valghalla_mail.module
 *
 * @copyright 2012 OS2 - Offentligt Digitaliseringsfællesskab.
 * See README.md at https://github.com/os2web/valghalla_mail
 *
 */

/**
 * Code for the Valghalla Mail. feature.
 */
include_once 'valghalla_mail.features.inc';

module_load_include('inc', 'valghalla_mail', 'includes/valghalla_mail_navigation');
module_load_include('inc', 'valghalla_mail', 'includes/valghalla_mail_submit');
module_load_include('inc', 'valghalla_mail', 'includes/valghalla_mail_form');

/**
 * Implements hook_cron()
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_mail_cron(){
  include_once 'includes/valghalla_mail_rsvp_reminder.inc';

  $last_run_ts = variable_get('valghalla_mail_last_run', REQUEST_TIME);

  valghalla_mail_rsvp_reminder($last_run_ts);

  variable_set('valghalla_mail_last_run', REQUEST_TIME);
}

/**
 * Implements hook_menu()
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_mail_menu() {
  $items['valghalla/administration/notifications'] = array(
      'title' => t('E-mail notifikationer'),
      'description' => t('Tilretning af mail notifikationer.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('valghalla_mail_admin_notifications'),
      'access arguments' => array('administer valghalla'),
      'file' => 'valghalla_mail_admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => -4,
  );
  $items['valghalla/administration/valg/mails'] = array(
      'title' => t('E-mail indstillinger'),
      'description' => t('Tilretning af standard mails.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('valghalla_mail_admin_valghalla_mails'),
      'access arguments' => array('administer valghalla'),
      'file' => 'valghalla_mail_admin.inc',
      'type' => MENU_NORMAL_ITEM,
      'weight' => -4,
  );

  return $items;
}

/**
 * Implements hook_notifications_info().
 */
function valghalla_mail_notifications_info() {
  return array(
    'mail' => array(
      'name' => 'E-mail',
      'node_type' => 'email',
      'send_to_callback' => 'valghalla_mail_send_to',
      'get_message_callback' => 'valghalla_mail_get_message',
      'send_message_callback' => 'valghalla_mail_send_message',
    ),
  );
}

/**
 * Handles valghalla templated mail sendout.
 *
 */
function valghalla_mail_mail($key, &$message, $params) {
  $options = array();

  // if $params isnt an array, dont do anything.
  if(!is_array($params)){
    $message['send'] = FALSE;
    return;
  }

  switch ($key) {
    // "default" case for sending mail.
    case 'mail':
            $params += array('tokens' => array());

      // Html mail
      if (strstr($params['format'], 'html')) {
        $headers = array(
          'MIME-Version' => '1.0',
          'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
          'Content-Transfer-Encoding' => '8Bit',
          'X-Mailer' => 'Drupal'
        );
        foreach ($headers as $key => $value) {
          $message['headers'][$key] = $value;
        }
      }

      $message['subject'] = t($params['subject'], $params['tokens'], $options);
      $message['body'][] = t($params['body'], $params['tokens'], $options);
      $message['params']['attachments'] = $params['attachments'];
      if (!empty($params['bcc'])) {
        $message['headers']['Bcc'] = $params['bcc'];
      }
      break;
    // 20/03-2014 - tth@bellcom.dk: Not sure if this is needed anymore
    // will keep it for a bit.
    case 'default':
      $message['subject'] = t($params['subject'], $params['replacements'], $options);
      $message['body'][] = t($params['message'], $params['replacements'], $options);
      break;
  }
}

/**
 * Fetch mail subject and body for given role, mail type.
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_mail_get_mail($election_nid, $role_nid, $mail_type, $mail_nid = FALSE){

  if($mail_type){
    $variable_name = 'valghalla_mail_' . $election_nid . '_' . $role_nid . '_' . $mail_type;
    $mail_nid = variable_get($variable_name, 0);
  }

  // If 'None'(id==1), do not proceed.
  if($mail_nid == 1){
    return FALSE;
  }
  // If it doesn't exist, get the standard.
  if(!$mail_nid){
    $mail_nid = variable_get('valghalla_mail_' . $election_nid . '_' . $mail_type, FALSE);
  }

  $mail_node = node_load($mail_nid);

  // If mail_node is valid, get values.
  if(is_object($mail_node)){
    $body_field = field_get_items('node', $mail_node, 'body');
    $subject_field = field_get_items('node', $mail_node, 'field_subject');
    // yani: add attachment
    $attachments = array();
    if( $files = field_get_items('node', $mail_node, 'field_valghalla_mail_attachments')) {
      foreach($files as $file_info){
        $file = file_load($file_info['fid']);
        $uri = drupal_realpath($file->uri);
        $attachments[] = array(
          'filecontent' => $uri,
          'filename' => $file->filename,
          'filemime' => $file->filemime,
        );
      }
    }
    $body = $body_field[0]['value'];
    $format = $body_field[0]['format'];
    $subject = $subject_field[0]['value'];
    return array('subject' => $subject, 'body' => $body, 'format' => $format, 'attachments' => $attachments);
  }
  return FALSE;
}

/**
 * Mail preview AJAX page callback.
 *
 * Prints the message with the tokens replaced. As it would
 * look in the mail.
 */
function valghalla_mail_ajax_view($mail_nid, $fc_id, $election_nid = FALSE) {
  $options = array();
  $volunteer_fc = entity_load_single('field_collection_item', $fc_id);

  $tokens = _valghalla_helper_get_token_values($volunteer_fc);

  if($mail_nid == 'invite'){
    $params = valghalla_mail_get_mail($election_nid, $tokens['!position_nid'], 'invitation');
  }
  else {
    $params = valghalla_mail_get_mail(FALSE, FALSE, FALSE, $mail_nid);
  }

  $body = t($params['body'], $tokens);
  if(!strstr($params['format'], 'html')){
    $body = nl2br($body);
  }

  $subject = t($params['subject'], $tokens, $options);
  print "<div class = 'valghalla_mail_subject'> " . t(' Emne : ') . $subject . "</div>";
  print "<div class= 'valghalla_mail_body'>" . $body . "</div>";
}

/**
 * @deprecated Moved to valghalla_notifications module.
 *
 * Valghalla mail types.
 */
function valghalla_mail_get_mail_types(){
  return valghalla_notifications_get_types();
}

/**
 * Available mails
 */
function valghalla_mail_get_mails(){
  $mail_nodes = node_load_multiple(array(), array('type' => 'email'));
  // Populate array with mail options for general mails.
  $mail_options[0] = t('Nedarves fra "Standard E-Mail skabeloner"');
  $mail_options[1] = t('None');
  foreach($mail_nodes as $mail_node){
    $mail_options[$mail_node->nid] = $mail_node->title;
  }
  return $mail_options;
}

/**
 * Check if the user should recieve mails.
 */
function valghalla_mail_volunteer_no_mail($volunteer_node) {
  if ($field = field_get_items('node', $volunteer_node, 'field_no_mail')) {
    return $field[0]['value'] == 1;
  }

  return FALSE;
}

/**
 * Implements hook_notifications_recipients_form_alter().
 *
 * @see valghalla_notifications_recipients_form()
 */
function valghalla_mail_notifications_mail_recipients_form_alter(&$form, &$form_state) {
  $values = isset($form_state['multistep_values']['get_recipients']) ? $form_state['multistep_values']['get_recipients'] : array();

  $form['sender'] = array(
    '#type' => 'fieldset',
    '#title' => t('Afsender'),
  );

  $form['sender']['email_sender'] = array(
    '#type' => 'checkbox',
    '#title' => t('brug min egen mail'),
    '#description' => t('Denne vil også bruges som svar-til email, så svar fra modtageren sendes til den pågældende e-mailadresse.'),
    '#default_value' => isset($values['email_sender']) ? $values['email_sender'] : 0,
  );

  global $user;
  $form['sender']['user_email'] = array(
    '#type' => 'hidden',
    '#default_value' => $user->mail,
  );
}

/**
 * Get message callback.
 *
 * @param object $template_node
 *   Node template object.
 *
 * @return array
 *   Array with message params.
 */
function valghalla_mail_get_message($template_node) {
  $body_field = field_get_items('node', $template_node, 'body');
  $subject_field = field_get_items('node', $template_node, 'field_subject');

  $attachments = array();
  $files = field_get_items('node', $template_node, 'field_valghalla_mail_attachments');
  if (!empty($files)) {
    foreach ($files as $file_info) {
      $file = file_load($file_info['fid']);
      $uri = drupal_realpath($file->uri);
      $attachments[] = array(
        'filecontent' => $uri,
        'filename' => $file->filename,
        'filemime' => $file->filemime,
      );
    }
  }
  $body = $body_field[0]['value'];
  $format = $body_field[0]['format'];
  $subject = $subject_field[0]['value'];
  return array(
    'subject' => $subject,
    'body' => $body,
    'format' => $format,
    'attachments' => $attachments
  );
}

/**
 * Send message callback.
 */
function valghalla_mail_send_message($to, $params, $multistep_values) {
  $language = language_default();
  $mail_sender = $multistep_values['get_recipients']['email_sender'];
  if ($mail_sender) {
    $from = $multistep_values['get_recipients']['user_email'];
  }
  else {
    $from = variable_get('site_mail', 'admin@example.com');
  }
  $result = drupal_mail('valghalla_mail', 'mail', $to, $language, $params, $from, TRUE);
  return $result['result'];
}

/**
 * Get send to data callback.
 */
function valghalla_mail_send_to($entity) {
  if ($email_field = field_get_items('node', $entity, 'field_email')) {
    return $email_field[0]['email'];
  }
  return FALSE;
}
<?php

/**
 * @file
 * Valghalla mail module.
 *
 *  Valghalla_mail.module.
 *
 * @copyright 2012 OS2 - Offentligt Digitaliseringsfællesskab.
 * See README.md at https://github.com/os2web/valghalla_mail
 */

/**
 * Code for the Valghalla Mail. feature.
 */
include_once 'valghalla_mail.features.inc';

/**
 * Implements hook_notifications_info().
 */
function valghalla_mail_notifications_info() {
  return array(
    'mail' => array(
      'name' => 'E-mail',
      'node_type' => 'email',
      'send_to_callback' => 'valghalla_mail_send_to',
      'get_message_callback' => 'valghalla_mail_get_message',
      'send_message_callback' => 'valghalla_mail_send_message',
    ),
  );
}

/**
 * Implements hook_mail().
 *
 * Handles valghalla templated mail sendout.
 */
function valghalla_mail_mail($key, &$message, $params) {
  // If $params isnt an array, dont do anything.
  if (!is_array($params)) {
    $message['send'] = FALSE;
    return;
  }

  switch ($key) {
    // "default" case for sending mail.
    case 'mail':
      $params += array('tokens' => array());

      // Html mail.
      if (strstr($params['format'], 'html')) {
        $headers = array(
          'MIME-Version' => '1.0',
          'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
          'Content-Transfer-Encoding' => '8Bit',
          'X-Mailer' => 'Drupal',
        );
        foreach ($headers as $key => $value) {
          $message['headers'][$key] = $value;
        }
      }

      $message['subject'] = format_string($params['subject'], $params['tokens']);
      $message_body = format_string($params['body'], $params['tokens']);
      $message['body'][] = $message_body;
      if (!empty($params['bcc'])) {
        $message['headers']['Bcc'] = $params['bcc'];
      }

      if (!empty($params['notification_entity'])) {
        /** @var EntityInterface $notification */
        $notification = $params['notification_entity'];
        $notification->message = $message['subject'] . '<br>' . $message_body;
        if (!empty($params['attachments'])) {
          $message['params']['attachments'] = $params['attachments'];
          $files = array();
          foreach ($params['attachments'] as $attachment) {
            $files[] = $attachment['filename'];
          }
          $notification->message .= t('Attachments:') . theme('item_list', array('items' => $files));
        }
        $notification->save();
      }
      break;
  }
}

/**
 * Valghalla mail types.
 *
 * @deprecated Moved to valghalla_notifications module.
 */
function valghalla_mail_get_mail_types() {
  return valghalla_notifications_get_types();
}

/**
 * Available mails.
 */
function valghalla_mail_get_mails() {
  $mail_nodes = node_load_multiple(array(), array('type' => 'email'));
  // Populate array with mail options for general mails.
  $mail_options[0] = t('Nedarves fra "Standard E-Mail skabeloner"');
  $mail_options[1] = t('None');
  foreach ($mail_nodes as $mail_node) {
    $mail_options[$mail_node->nid] = $mail_node->title;
  }
  return $mail_options;
}

/**
 * Check if the user should recieve mails.
 */
function valghalla_mail_volunteer_no_mail($volunteer_node) {
  if ($field = field_get_items('node', $volunteer_node, 'field_no_mail')) {
    return $field[0]['value'] == 1;
  }

  return FALSE;
}

/**
 * Implements hook_notifications_recipients_form_alter().
 *
 * @see valghalla_notifications_recipients_form()
 */
function valghalla_mail_notifications_mail_recipients_form_alter(&$form, &$form_state) {
  $values = isset($form_state['multistep_values']['get_recipients']) ? $form_state['multistep_values']['get_recipients'] : array();

  $form['sender'] = array(
    '#type' => 'fieldset',
    '#title' => t('Afsender'),
  );

  $form['sender']['email_sender'] = array(
    '#type' => 'checkbox',
    '#title' => t('brug min egen mail'),
    '#description' => t('Denne vil også bruges som svar-til email, så svar fra modtageren sendes til den pågældende e-mailadresse.'),
    '#default_value' => isset($values['email_sender']) ? $values['email_sender'] : 0,
  );

  global $user;
  $form_state['storage']['user_email'] = $user->mail;
}

/**
 * Get message callback.
 *
 * @param object $template_node
 *   Node template object.
 *
 * @return array
 *   Array with message params.
 */
function valghalla_mail_get_message($template_node) {
  $body_field = field_get_items('node', $template_node, 'body');
  $subject_field = field_get_items('node', $template_node, 'field_subject');

  $attachments = array();
  $files = field_get_items('node', $template_node, 'field_valghalla_mail_attachments');
  if (!empty($files)) {
    foreach ($files as $file_info) {
      $file = file_load($file_info['fid']);
      $parts = pathinfo($file->uri);
      $attachments[] = array(
        'filecontent' => file_get_contents($file->uri),
        'filename' => $file->filename,
        'filemime' => $file->filemime,
        'extension' => $parts['extension'],
      );
    }
  }
  $body = $body_field[0]['value'];
  $format = $body_field[0]['format'];
  $subject = $subject_field[0]['value'];
  return array(
    'subject' => $subject,
    'body' => $body,
    'format' => $format,
    'attachments' => $attachments,
  );
}

/**
 * Send message callback.
 */
function valghalla_mail_send_message($to, $params, $context = array()) {
  $language = language_default();

  $from = variable_get('site_mail', 'admin@example.com');
  if (!empty($context['get_recipients']['email_sender'])) {
    $from = $context['get_recipients']['user_email'];
  }

  /** @var EntityInterface $notification */
  $notification = entity_get_controller('entity_valghalla_notification')->create(array(
    'type' => $params['notification_type'],
    'vol_id' => $params['volunteer_nid'],
    'recipient' => $to,
    'gateway' => 'mail',
    'status' => 'Failed',
  ));
  $notification->save();
  $params['notification_entity'] = $notification;

  $result = drupal_mail('valghalla_mail', 'mail', $to, $language, $params, $from, TRUE);
  if ($result['result']) {
    $notification->status = 'Succeed';
    $notification->save();
  }
  return $result['result'];
}

/**
 * Get send to data callback.
 */
function valghalla_mail_send_to($entity) {
  if ($email_field = field_get_items('node', $entity, 'field_email')) {
    return $email_field[0]['email'];
  }
  return FALSE;
}

<?php

/**
 * @file
 * Valghalla_external_server.module.
 */

use ValghallaVolunteers\ValghallaVolunteersLogger;

/**
 * Implements hook_node_insert().
 */
function valghalla_external_server_node_insert($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Creating new volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_update().
 */
function valghalla_external_server_node_update($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Updating volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function valghalla_external_server_node_delete($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Deleting volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
  }
}

/**
 * Implements hook_valghalla_allowed_uris_alter().
 */
function valghalla_external_server_valghalla_allowed_uris_alter(&$allowed_uris) {
  $allowed_uris[] = '/rest*';
}

/**
 * Implements hook_menu().
 */
function valghalla_external_server_menu() {
  $items['rest/sync-check-data'] = array(
    'page callback' => 'valghalla_external_server_sync_check',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function valghalla_external_server_init() {
  $rest_url = '/rest*';

  if (drupal_match_path(request_uri(), $rest_url) && !drupal_is_cli()) {
    $remote_ip = ip_address();

    $allow = FALSE;
    $allowed_ips = variable_get('valghalla_external_server_allowed_ips');

    if (empty($allowed_ips)) {
      // No allows IPs set, everybody is allows.
      $allow = TRUE;
    }
    else {
      $allowed_ips = explode(',', $allowed_ips);

      // Check performed on parts of the ip address.
      // This makes it possible to add only the beginning of the IP range.
      // F.ex. 192.168 will allow all ip addresses including 192.168 as part
      // of the it.
      foreach ($allowed_ips as $custom_ip) {
        if (strpos($remote_ip, $custom_ip) !== FALSE) {
          $allow = TRUE;
          break;
        }
      }
    }

    if (!$allow) {
      print(format_string('@ip not within the list of allowed IPs.', array('@ip' => $remote_ip)));
      drupal_exit();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function valghalla_external_server_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'valhalla_admin_settings_form') {
    $form['valghalla_external_server_fs'] = array(
      '#type' => 'fieldset',
      '#title' => t('Valghalla ekstern server indstillinger'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 11,
    );

    $form['valghalla_external_server_fs']['valghalla_external_server_allowed_ips'] = array(
      '#title' => t("Allowed IP's to access REST endpoint"),
      '#type' => 'textfield',
      '#description' => t('Comma separated. Ex. 192.168.1.1,192.168.2.1'),
      '#default_value' => variable_get('valghalla_external_server_allowed_ips'),
    );

    $form['#validate'][] = 'valghalla_external_server_form_validate';
  }
}

/**
 * Implements hook_form_validate().
 */
function valghalla_external_server_form_validate($form, &$form_state) {
  if (preg_match("/[^0-9.,]/", $form_state['values']['valghalla_external_server_allowed_ips'])) {
    form_set_error('valghalla_external_server_allowed_ips', 'Invalid format');
  }
}

/**
 * Callback for sync check data.
 *
 * JSON responce for internal server with data to check synch process.
 * See valghalla_internal_server_synch_check().
 */
function valghalla_external_server_sync_check() {
  $queue = valghalla_synch_queue_get_items_ordered();
  if (!empty($queue)) {
    $data = 'synch_queue_not_empty';
  }
  else {
    $data = valghalla_synch_node_export_election_counts();
  }
  drupal_json_output($data);
}

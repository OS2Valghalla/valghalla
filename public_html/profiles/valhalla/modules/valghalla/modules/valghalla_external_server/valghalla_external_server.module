<?php

/**
 * @file
 * Valghalla_external_server.module.
 */

use ValghallaVolunteers\ValghallaVolunteersLogger;

/**
 * Implements hook_node_insert().
 */
function valghalla_external_server_node_insert($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Creating new volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_update().
 */
function valghalla_external_server_node_update($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Updating volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
    valghalla_synch_queue_add_item($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function valghalla_external_server_node_delete($node) {
  if (in_array($node->type, array('volunteers'))) {
    ValghallaVolunteersLogger::info(sprintf('Deleting volunteer %s (nid: %d, uuid: %s)', $node->title, $node->nid, $node->uuid));
  }
}

/**
 * Implements hook_valghalla_allowed_uris_alter().
 */
function valghalla_external_server_valghalla_allowed_uris_alter(&$allowed_uris) {
  $allowed_uris[] = '/rest*';
}

/**
 * Implements hook_menu().
 */
function valghalla_external_server_menu() {
  $items['rest/sync-check-data'] = array(
    'page callback' => 'valghalla_external_server_sync_check',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Callback for sync check data.
 *
 * JSON responce for internal server with data to check synch process.
 * See valghalla_internal_server_synch_check().
 */
function valghalla_external_server_sync_check() {
  $queue = valghalla_synch_queue_get_items_ordered();
  if (!empty($queue)) {
    $data = 'synch_queue_not_empty';
  }
  else {
    $data = valghalla_synch_node_export_election_counts();
  }
  drupal_json_output($data);
}

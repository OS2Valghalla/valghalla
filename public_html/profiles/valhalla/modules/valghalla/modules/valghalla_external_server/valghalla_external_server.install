<?php

/**
 * @file
 * Valghalla_external_server.install.
 */

/**
 * Implements hook_install().
 *
 * Sets required variables.
 */
function valghalla_external_server_install() {
  // Module requires this variable to be FALSE.
  variable_set('node_export_dependency_attach_nodes', FALSE);
  variable_set('node_export_existing', 'revision');

  // Load all volunteers.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'volunteers')
    ->execute();

  // Anonymize the volunteer node.
  $volunteers = node_load_multiple(array_keys($result['node']));
  if (!empty($volunteers) && is_array($volunteers)) {
    foreach ($volunteers as $volunteer) {
      $volunteer = valghalla_synch_node_export_anonymize_node($volunteer);
      node_save($volunteer);

      // Deleting all revisions of that volunteer.
      $revisions = node_revision_list($volunteer);
      array_shift($revisions);

      foreach ($revisions as $revision) {
        node_revision_delete($revision->vid);
      }

      // Remove this node from synch queue.
      valghalla_synch_queue_remove_item($volunteer->uuid);
    }
  }
}

/**
 * Implements hook_enable().
 *
 * Disables the CPR validation.
 */
function valghalla_external_server_enable() {
  variable_set('valghalla_volunteer_validator_enable', 0);
  variable_set('valghalla_volunteer_validator_get_address', 0);
  variable_set('valghalla_volunteer_validator_get_name', 0);
  variable_set('valghalla_volunteer_validator_get_subscription_status', 0);

  variable_set('validate_create_age', 0);
  variable_set('validate_create_municipality', 0);
  variable_set('validate_create_citizenship', 0);
  variable_set('validate_create_civil_status', 0);
}
